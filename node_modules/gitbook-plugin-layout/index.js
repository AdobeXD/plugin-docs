var fs = require('fs');
//var cacheObj = {}; //{bodyStart: {pathFile: xxx,content: xxxx,timer:xxx}}
module.exports = {

    // Extend ebook resources and html
    website: {
        /*
         assets: "./book",
         js: [
         "test.js"
         ],
         css: [
         "test.css"
         ],*/
        html: {
            "body:start": function () {
                var pathFile = this.options.pluginsConfig && this.options.pluginsConfig.layout && this.options.pluginsConfig.layout.headerPath;
                if (pathFile && fs.existsSync(pathFile)){
                    return fs.readFileSync(pathFile, {encoding: 'utf-8'});
                }
                return '';
            },
            "body:end": function () {
                if (this.options.pluginsConfig && this.options.pluginsConfig.layout && this.options.pluginsConfig.layout.footerPath && fs.existsSync(this.options.pluginsConfig.layout.footerPath)) {
                    return fs.readFileSync(this.options.pluginsConfig.layout.footerPath, {encoding: 'utf-8'})
                }
                return '';
            }
        }
    },

    /*    // Extend templating blocks
     blocks: {
     // Author will be able to write "{% myTag %}World{% endMyTag %}"
     myTag: {
     process: function(blk) {
     return "Hello "+blk.body;
     }
     }
     },

     // Extend templating filters
     filters: {
     // Author will be able to write "{{ 'test'|myFilter }}"
     myFilter: function(s) {
     return "Hello "+s;
     }
     },*/

    // Hook process during build
/*    hooks: {
        // For all the hooks, this represent the current generator

        // This is called before the book is generated
        "init": function () {
            console.log("init!");
        },

        // This is called after the book generation
        "finish": function () {
            console.log("finish!");
        }
    }*/
};
