{"./":{"url":"./","title":"Overview","keywords":"","body":"An overview of creating Adobe XD plugins XD plugins extend the capabilities of Adobe XD by adding new features to the app, automating workflows, connecting the app to external services, and more. On this page, we'll give you a quick overview of what you can create and what skills you need to bring. From there, you can choose your own adventure: build a \"Hello, World\" plugin in our Quick Start tutorial, follow our tutorials, try code-complete sample plugins, or browse the API references. Oh, and be sure to join the developer community while you're here! We want you to say hi (we'll say hi back). Now, let’s supercharge the future of design together with XD plugins! What can you build? The XD plugin APIs enable you to build plugins for a number of use cases, including: Asset Management & Import: Provide designers with access to stock photography and assets, and integrate with your DAM or brand management system. Automation & Utility: Help designers automate repetitive or tedious tasks. Unleash their creativity by enabling generative and data-driven designs. Publish & Handoff: Make publishing and handoff a breeze by integrating with online services and content management systems. Designer & Stakeholder Collaboration: Enhance collaboration between designers and stakeholders by integrating with the workflow services your team uses. XD plugins appear to the user in one of two ways, as a Plugins menu item that: Runs with no UI (like a script), or Opens a custom modal UI where the user can interact with the plugin You can learn more about the API surfaces available to you in our tutorials, as well as in our API References. What skills do you need? Below are the prerequisite skills you'll need to build a plugin. It's a short list! And even if you're new to coding, we think you'll be able to build your skills as you go. Required JavaScript: XD plugins are written in JavaScript. The XD plugin APIs support ES6+ JavaScript features, and ES5 is perfectly fine too. If you've never worked with JavaScript before, we recommend taking a moment to get familiar with the language first. But come back quickly; you don't need to be a JavaScript rock star to get started building XD plugins. The Quick Start tutorial and API feature tutorials you'll find in the documentation will help get you on your way. Recommended HTML/CSS: If you plan to offer a UI for your plugin, some familiarity with HTML and CSS is recommended. XD plugin APIs support a subset of HTML and CSS for creating plugin UI. Optional React: If you want to push your plugin UI even further, you can put your React skills to use. React is a great option for complex plugins that must manage both state and user interface. Please refer to the following samples for more about how to configure React: ui-hello-react e2e-adobe-stock ui-html-playground Where to start? There are lots of ways to journey through the documentation on your way to building the next great XD plugin. If you're just getting started, we recommend following the left-hand navigation on this site from top to bottom (or until you're ready to plot your own course!). Here are some highlights you won't want to miss: Get Started: To begin, try our Quick Start tutorial, then follow along with the API feature tutorials. Go deep: Read up on the structure of a plugin, expand your reach with advanced concepts, and then dig into the API reference. See code: If you prefer to learn from working code, we have a samples repo on GitHub for you to take a look at. Join the community: We want to hear from you, know who you are, keep you up to date with the latest info, and grow together. See our Community page to learn about how to connect. "},"tutorials/quick-start/":{"url":"tutorials/quick-start/","title":"Quick start","keywords":"","body":"Quick Start: Make your first XD plugin Let’s walk through creating your first Adobe XD plugin together. We'll keep things simple in this Quick Start tutorial. Once you're done, you'll have a solid grasp of the steps to take when starting to create your own XD plugin. At the end of the tutorial, we'll suggest some next steps for going deeper with the XD plugin APIs. Prerequisites Basic knowledge of HTML, CSS, and JavaScript A text editor to write your code in (like VSCode, Sublime Text, Bracket, Atom, etc) Development Steps Complete code for this plugin can be found on GitHub. 0. Get a plugin ID from the I/O Developer Console Before you start, you'll want to create a plugin on the Adobe I/O Developer Console. Go to the I/O Console and sign in or sign up Click \"New Plugin\" Give your plugin a unique name and click \"Create Plugin\" On the following page, get the 8-character unique plugin ID. We'll use this plugin ID in one of the next steps. 1. Identify where your plugins are located Adobe XD loads plugins that are in development from a develop folder in specific location on your machine. To get to that folder, simply go to this menu item: Plugins > Development > Show Develop Folder. This will open the develop folder, which we'll use in the next step. 2. Create your plugin scaffold Next, you'll need to make a new folder within the develop folder to store the plugin files that you'll create below. Name your new plugin folder anything you like. Now, let's create your plugin files. Open your favorite text editor and create two files inside of your new plugin folder with these exact names: manifest.json is your plugin’s manifest. This file includes information about the plugin, such as its name, the menu item(s) it adds to XD, and so on. Learn about the manifest here. main.js is your plugin’s code. This file contains your JavaScript code that implements the logic for your plugin. Learn more about main.js here. These two files go into your plugin's parent directory. When you have the right structure, it will look like this: my-plugin-folder ├── main.js └── manifest.json It's possible to have more files if you want, but these files are the bare minimum requirement for your plugin to work, and are all we'll need for this Quick Start tutorial. 3. Create your plugin’s manifest In the previous step, you created a file named manifest.json. Open that file and paste in this JSON object: { \"id\": \"ID_FROM_IO_CONSOLE\", \"name\": \"Hello World sample plugin\", \"host\": { \"app\": \"XD\", \"minVersion\": \"13.0.0\" }, \"version\": \"1.0.0\", \"uiEntryPoints\": [ { \"type\": \"menu\", \"label\": \"Create Rectangle\", \"commandId\": \"createRectangle\" } ] } Be sure to replace the id value with the unique plugin ID you got from the I/O Console in the first step: \"id\": \"1234ABCD\", If you're curious about what each entry means, see the manifest documentation. The value of the commandId property may be any string; in this case, it's createRectangle. In the next section, we will see how this string is associated with the code for our plugin. 4. Create your plugin’s code Next, we need to create the JavaScript code for our plugin. The code lives in a file named main.js, which we created in step #2. Paste this code into main.js: const {Rectangle, Color} = require(\"scenegraph\"); // [1] function rectangleHandlerFunction(selection) { // [2] const newElement = new Rectangle(); // [3] newElement.width = 100; newElement.height = 50; newElement.fill = new Color(\"Purple\"); selection.insertionParent.addChild(newElement); // [4] newElement.moveInParentCoordinates(100, 100); // [5] } module.exports = { // [6] commands: { createRectangle: rectangleHandlerFunction } }; This code does the following: Gets references to the Rectangle and Color classes from XD’s scenegraph module. There are several different API modules you can load using require(). Defines our handler function. The handler function will run when the user selects the Create Rectangle menu command in the app's Plugins menu. Creates a new Rectangle object. There's nothing in it yet! The following lines assign various properties and styles to the rectangle: width, height, and color. Adds the Rectangle object to the scenegraph at the top-left (coordinates 0, 0). Puts the Rectangle object at coordinates 100, 100 within the parent element. Exports a map object, which associates the JavaScript handler function (rectangleHandlerFunction) with the commandId property declared in the manifest earlier. The command ID (the part to the left of the : here) must match the commandId value declared in your manifest exactly. 5. Run your plugin So you’ve written a plugin! How do we run it? If you haven’t already done so, launch XD and open a new document. Then navigate to the Plugins > Create Rectangle menu item. Alternatively, if XD was already open, select Plugins > Development > Reload Plugins. Congratulations! You’ve built your first plugin for Adobe XD! Next Steps Learn about debugging plugins Follow our tutorials See working code in our sample repos on GitHub Browse the API references "},"tutorials/debugging/":{"url":"tutorials/debugging/","title":"Debugging plugins","keywords":"","body":"How to Debug Your Plugin Bugs happen! In this tutorial, you will learn how to debug your Adobe XD plugin. Prerequisite At least one plugin in your develop folder (you can create one using our Quick Start tutorial). Debugging Steps During development, if your plugin is misbehaving, there are few things you can do to investigate the problem. 1. Look for errors in the developer console You can see error messages your plugin may be causing with the XD developer console. The developer console can be opened from the Plugins menu: Plugins > Development > Developer Console. 2. Try reloading the plugins You can reload all plugins in your develop folder from the Plugins menu: Plugins > Development > Reload Plugins. There's also a handy keyboard shortcut: Platform Keyboard shortcut macOS Shift-Cmd-R Windows Ctrl-Alt-E If there are any errors blocking the plugin from loading, they will appear in the developer console on reload: 3. Try logging messages to the developer console The example code below does not appear to be creating the \"Hello!\" text as expected. Let's try adding a \"start message\" and an \"end message\" into sayHello() to double-check that the code is starting and running all the way to the end: function sayHello(selection) { console.log(\"sayHello started!\"); // log a message const el = new Text(); el.text = \"Hello!\"; el.styleRanges = [ { length: el.text.length, fill: new Color(\"#FFFFFF\") } ]; selection.insertionParent.addChild(el); el.moveInParentCoordinates(100, 100); console.log(\"sayHello ran to the end!\"); // log a message } Your console.log messages will appear in the developer console: It looks like the function is running... maybe there is another problem. Oops, the fill color set by the plugin is #FFFFFF, which is white: the same color as this artboard's background. You can verify this with a console.log message: console.log(\"el fill color =\" + el.fill); // OUTPUT HERE Next Steps Ready to learn more about XD plugins? Learn about plugin structure Follow along with our tutorials Browse the API references "},"reference/structure/":{"url":"reference/structure/","title":"Plugin structure","keywords":"","body":"Plugin Structure One folder and two files: that's all it takes to create an XD plugin! In this section, we'll tell you all about how plugins are structured. These tutorials will show you where to put your plugin files, how to name your plugin, and what files you need to create for an XD plugin. Plugin Location and Name Folder Structure "},"reference/structure/location.html":{"url":"reference/structure/location.html","title":"Plugin location","keywords":"","body":"Plugin location For XD to know your plugin exists, you'll need to put it in a certain folder on your computer and give it a name. On this page, you can learn where plugins are stored on your machine.. Parent folder path Adobe XD loads plugins from the plugins and develop folders. These folders are stored in a specific storage location based on your platform: Platform Path macOS ~/Library/Application\\ Support/Adobe/Adobe\\ XD\\ CC/ Windows C:\\Users\\%USERNAME%\\AppData\\Local\\Packages\\Adobe.CC.XD_adky2gkssdxte\\LocalState\\ This path will eventually (if it doesn't already) contain two folders: develop and plugins. The develop folder The develop folder is used during plugin development, and is the only folder XD will reload plugins from when you reload plugins from the Plugins menu. XD makes it very easy for you to get to the develop folder: simply go to this menu item: Plugins > Development > Show Develop Folder. If there isn't a folder that already exists named develop, you can go ahead and create it yourself. The plugins folder The plugins folder is where production plugins are stored when the user installs them. During development, you should not store your plugin in this folder, instead opting for the develop folder, as noted above. In other words, you should not need to work with the plugins folder directly; XD will manage this folder for the user. "},"reference/structure/folder-structure.html":{"url":"reference/structure/folder-structure.html","title":"Folder structure","keywords":"","body":"Folder structure When you have the right structure for your XD plugin, it will look like this: my-plugin-folder ├── main.js └── manifest.json Your plugin's parent folder In the develop folder, create a new folder for your plugin with any name you like. Your plugin files Within the parent folder, you'll need at minimum two files, with these exact names: manifest.json is your plugin’s manifest. This file is where you include facts about your plugin, such as its name, the menu item(s) it adds to XD, and so on. Learn about the manifest here. main.js is your plugin’s code. This file contains your JavaScript code that implements the logic for your plugin. Learn more about main.js here. These two files go into your plugin's parent directory. The manifest.json and main.js files stored in your plugin's parent directory are the bare minimum requirement for your plugin to work, but it's possible to have more JavaScript files if you want. You can learn about including further JavaScript files in our JavaScript concepts section on using require. Next steps Read on to learn about the two required files: manifest.json main.js "},"reference/structure/manifest.html":{"url":"reference/structure/manifest.html","title":"manifest.json","keywords":"","body":"The manifest.json file The manifest is where you include metadata about your plugin. Simply put, the manifest is a list of facts about your plugin in the form of a JSON object. No executable code goes into your manifest. Example manifest { \"id\": \"YOUR_ID_HERE\", \"name\": \"Name of Your Plugin\", \"version\": \"0.0.1\", \"description\": \"Description of your plugin.\", \"icons\": [ { \"width\": 96, \"height\": 96, \"path\": \"images/icon@2x.png\" } ], \"host\": { \"app\": \"XD\", \"minVersion\": \"13.0.0\" }, \"uiEntryPoints\": [ { \"type\": \"menu\", \"label\": \"Hello World\", \"commandId\": \"helloCommand\", \"shortcut\": { \"mac\": \"Cmd+Shift+P\", \"win\": \"Ctrl+Shift+P\" } } ] } See the sections below to learn more about each key/value field. All fields are required unless otherwise noted below. Top-level metadata The top level of the manifest JSON object contains high-level information about your plugin. Key path Type Description id string Unique identifier for your plugin. You can get your unique ID on the Adobe I/O Console. name string Human-readable name of your plugin displayed in the Plugin Manager listing. (Note: if you're submitting your plugin, this name must match what is in your I/O Console plugin submission.) version string Version number of your plugin in x.y.z format. *Must be three segments. Each version component must be between 0 and 99. description string Description displayed in the Plugin Manager listing. icons Array Icon(s) displayed in the Plugin Manager listing. Currently, you should supply only a single icon that is 96x96 at 2x scale (XD will automatically downscale it to 48x48 on a 1x display; you cannot provide a second, separate 48x48 image file at this time). host.app string Indicates that this is a plugin for Adobe XD (currently, the only valid value here is \"XD\"). host.minVersion string Minimum required version of Adobe XD (in x.y.z format) that can run this plugin. Must be three segments (typically you'll leave all segments set to 0 except for the major version number). host.maxVersion string Optional. Maximum version of XD (in x.y.z format) that can run this plugin. Must be three segments as well. uiEntryPoints Array List of objects describing what entries your plugin adds to the Plugins menu in XD. See the next section for details. UI entry points array The uiEntryPoints field is an array of objects, and each object must match one of the two formats below. Items appear in the Plugins menu in the same order as they're listed in the uiEntryPoints array. MenuItemDefinition (executable menu items) Key Type Description type string Entry point type. Currently \"menu\" is the only supported value. label string or Object Label for this menu item that the user will select to run your plugin. May be a single string or an object containing localized strings (see \"Localization,\" below). Your menu item must follow our plugin experience guidelines. commandId string Identifier that links the menu item to a function in your plugin's JavaScript code. This identifier needs to be unique within your plugin (but doesn't need to be globally unique). It can be whatever you like, but it makes sense to succinctly describe what the command will do. shortcut {mac: string, win: string} Optional. Object defining Mac & Windows keyboard shortcuts for this menu item. See \"Keyboard shortcuts\" below for details. SubmenuDefinition (submenu) Key Type Description type string Entry point type. Currently \"menu\" is the only supported value. label string or Object Label for this submenu. May be a single string or an object containing localized strings (see below). menuItems Array Nested array specifying the menu items this submenu contains. Only a single submenu nesting level is supported, so this array may not contain any SubmenuDefinitions itself, only executable MenuItemDefinitions. Your menu item must follow our plugin experience guidelines. Keyboard shortcuts Keyboard shortcuts are defined separately for each platform (as seen in the example at the top of this tutorial). Each definition is a string that follows this syntax: One or more modifier keys, in any order, each one followed by \"+\" Mac: modifiers may be Cmd, Ctrl, Opt / Alt, or Shift. Shortcut must contain at least one of Cmd or Ctrl. Win: modifiers may be Ctrl, Alt, or Shift. Shortcut must contain Ctrl. A letter or number key. Letters are case-insensitive (e.g. \"Cmd+P\" and \"Cmd+p\" mean the same thing and neither requires pressing Shift). Other keys (including punctuation, arrow keys, or F1-F12) are currently not supported. If your shortcut collides with a built-in XD command or another plugin's shortcut, your shortcut will be ignored and you'll see a warning printed to the developer console. Localization Plugin menu item labels can be localized to match the rest of XD's UI. Other fields such as name and description cannot be localized yet. Localized labels are represented as an object containing multiple translations, instead of a single string value: \"label\": { \"default\": \"Menu Label\", \"fr\": \"Etiquette de Menu\", \"de\": \"Menübezeichnung\" } A default string is always required. The language must be a two-letter code from ISO 639-1, not a hyphenated code such as en-US. To avoid inconsistency with the rest of XD's built-in menu items, languages that aren't supported by XD are ignored. You can also localize strings that appear in your plugin's own dialog UI, by choosing which strings to use in your UI based on the value of application.appLanguage. "},"reference/structure/handlers.html":{"url":"reference/structure/handlers.html","title":"main.js","keywords":"","body":"The main.js file All plugins must have a main.js file, which serves as the entry point for execution of your JavaScript code. This file is where all the fun happens! Below, we'll cover some points to help you get oriented with main.js. Wiring your code to the manifest Your main.js file exports a map linking each commandId from the manifest to a handler function in your code: function sayHello(selection, documentRoot) { console.log(\"Hello, world!\"); } module.exports.commands = { helloCommand: sayHello }; In this example: helloCommand matches the value of commandId in your manifest sayHello is the name of your main handler function, so it is mapped to helloCommand in your command exports. Contextual arguments The handler function (in the above example, sayHello) receives two contextual arguments from XD: The current selection state The root node of the entire document (see scenegraph > RootNode) The argument names selection and documentRoot are arbitrary, but are considered convention. We use those names throughout our documentation. Accessing app APIs See Available APIs to learn about how to access the APIs that XD provides you with. Most APIs are loaded using require(), but a few can be accessed directly as globals. Loading libraries and other JavaScript files You can learn about including further JavaScript files in our JavaScript concepts section on using require. "},"tutorials/":{"url":"tutorials/","title":"About the tutorials","keywords":"","body":"About the tutorials Do you like to learn by following step-by-step examples? If so, this is the section for you! Each of the tutorials contained within will teach you a specific skill related to the XD plugin APIs. With these tutorials, you can learn things like how to draw a line, how to make a network request, or how to display an image in your UI. To get the most out of the tutorials, follow along with them from top to bottom. If you get stuck while coding along, don't worry! We have code-complete sample repos on GitHub for each tutorial. Before you jump in, a quick note to save you some time: the tutorials will all assume you have completed our Quick Start tutorial. Make sure to do that before you jump in. Our tutorials are divided into these main areas: Working with content Working with I/O Building user interface Chances are there's something in each section that will be relevant to the XD plugin you're creating! "},"tutorials/content-index.html":{"url":"tutorials/content-index.html","title":"Working with content","keywords":"","body":"Working with content A fundamental use case for XD plugins is working with content. Whether you want to add lines or other shapes to an artboard, work with text and text styles, or move existing objects around a document, using XD plugin APIs to work with content will enable your plugin to compliment the user's design workflow with great speed and accuracy. The tutorials contained in this section will show you a few ways XD plugins can work with content: How to draw lines How to work with paths How to style text Working with a SceneNodeList "},"tutorials/how-to-draw-lines/":{"url":"tutorials/how-to-draw-lines/","title":"How to draw lines","keywords":"","body":"How to draw lines This sample demonstrates how to create a plugin that adds colored lines to the user's document. Prerequisites Basic knowledge of HTML, CSS, and JavaScript Quick Start Tutorial Debugging Tutorial Development Steps Complete code for this plugin can be found on GitHub. 1. Prepare your plugin scaffold First, edit the manifest file for the plugin you created in our Quick Start Tutorial. Replace the JSON object in your manifest with the one below, noting the changes for the following fields: id name uiEntryPoints[0].label uiEntryPoints[0].commandId { \"id\": \"ID_FROM_IO_CONSOLE\", \"name\": \"Create Lines sample plugin\", \"host\": { \"app\": \"XD\", \"minVersion\": \"13.0.0\" }, \"version\": \"1.0.0\", \"uiEntryPoints\": [ { \"type\": \"menu\", \"label\": \"Create lines\", \"commandId\": \"createLinesCommand\" } ] } Then, update your main.js file, mapping the manifest's commandId to a handler function. Replace the content of your main.js file with the following code: function createLinesHandlerFunction(selection) { // The body of this function is added later } module.exports = { commands: { \"createLinesCommand\": createLinesHandlerFunction } }; The remaining steps in this tutorial describe additional edits to the main.js file. 2. Require in XD API dependencies For this tutorial, we just need access to two XD scenegraph classes and one XD module. Add the following lines to the top of your main.js file: // Add this to the top of your main.js file const { Line, Color } = require(\"scenegraph\"); const commands = require(\"commands\"); Now the Line and Color classes and commands module are required in and ready to be used. 3. Create a helper function Our plugin is going to assing random colors to the lines we create! Add the lines of code below to your file: function randomColor() { const hexValues = ['00', '33', '66', '99', 'CC', 'FF']; const color = \"#\" + Array.from({ length: 3 }, _ => hexValues[Math.floor(Math.random() * hexValues.length)]).join(\"\"); return color; } This function returns a web-friendly color hex value (e.g., `\"#FFFFFF\"). This is just straight-up JavaScript; there's nothing specific to XD plugin APIs to cover here. 4. Create line data In this step, we're going to add a little more plain-old JavaScript. This time we'll add a data structure that will set us up to draw lines with the XD plugin API in the next step. Add this code to your file: const lineData = [ { startX: 100, startY: 110, endX: 210, endY: 233 }, { startX: 210, startY: 233, endX: 320, endY: 156 }, { startX: 320, startY: 156, endX: 400, endY: 300 }, { startX: 400, startY: 300, endX: 500, endY: 120 } ] A couple of things to note: In this example, the each line's startX and startY matches the former line's endX and endY. This ensures lines are connected to each other. But they don't have to connect; feel free to modifiy the data as you wish! The data structure here is important to note: lineData is an array. This gives us a way to store coordinates for multiple lines. We'll loop over this array in the next step. The array contains multiple objects that will be passed, one at a time, to the Line API. Since we're drawing lines, each object has a start and end coordinates for X and Y. 5. Create the main function In this step, we'll build out the main function, createLinesHandlerFunction, that we added in the first step. Each of the numbered comments are explained below the code: function createLinesHandlerFunction(selection) { // [1] let lines = []; // [2] lineData.forEach(data => { // [3] const line = new Line(); // [4.i] line.setStartEnd( // [4.ii] data.startX, data.startY, data.endX, data.endY ); line.strokeEnabled = true; // [4.iii] line.stroke = new Color(randomColor()); // [4.iv] line.strokeWidth = 3; // [4.v] lines.push(line); // [4.vi] selection.editContext.addChild(line) // [4.vii] }); selection.items = lines; // [11] commands.group(); // [12] } This function only needs the first contextual argument, selection, which gives access to the selection object inside XD. Create an empty array to contain all the Line objects we'll create. This array will be used in a later step. Loop over the lineData array, getting an individual data object each time through the loop. For each data object: Create a new instance of Line. Use the Line object's setter, .setStartEnd, to set the line data from our data object. Set the strokeEnabled property to true in order to draw a stroke for the line. Set the stroke color using the randomColor helper function. Set the width of the stroke using strokeWidth property. Append the line object into the lines array. Insert the line into the edit context using the selection.editContext.addChild method. This step adds the line to the document's scenegraph. Now that all of the Line objects have been added to the scenegraph, set the document's current selection to be those Line objects. Use the group command to combine all of the currently-selected objects (the Line objects) into a single group object. 6. Run the plugin After saving all of your changes, reload the plugin in XD and run it. The result should be similar to the following: Next Steps Want to expand on what you learned here? Have a look at these references to see options for customizing this sample plugin: Line Color Commands Ready to explore further? Take a look at our other resources: Tutorials Sample code repos "},"tutorials/how-to-create-paths/":{"url":"tutorials/how-to-create-paths/","title":"How to create paths","keywords":"","body":"How to create paths This sample demonstrates how to create path objects in XD. The path objects are used to construct a pie chart. Prerequisites Basic knowledge of HTML, CSS, and JavaScript Basic knowledge of Paths Quick Start Tutorial Debugging Tutorial Development Steps Complete code for this plugin can be found on GitHub. 1. Create plugin scaffold First, edit the manifest file for the plugin you created in our Quick Start Tutorial. Replace the JSON object in your manifest with the one below, noting the changes for the following fields: id name uiEntryPoints[0].label uiEntryPoints[0].commandId { \"id\": \"ID_FROM_IO_CONSOLE\", \"name\": \"Create Pie Chart sample plugin\", \"host\": { \"app\": \"XD\", \"minVersion\": \"13.0.0\" }, \"version\": \"1.0.0\", \"uiEntryPoints\": [ { \"type\": \"menu\", \"label\": \"Create Pie Chart\", \"commandId\": \"createPieChartCommand\" } ] } Then, update your main.js file, mapping the manifest's commandId to a handler function. Replace the content of your main.js file with the following code: function createPieChartHandlerFunction(selection) { // The body of this function is added later } module.exports = { commands: { \"createPieChartCommand\": createPieChartHandlerFunction } }; The remaining steps in this tutorial describe additional edits to the main.js file. 2. Require in XD API dependencies For this tutorial, we just need access to two XD scenegraph classes. Add the following lines to the top of your main.js file: // Add this to the top of your main.js file const { Path, Color } = require(\"scenegraph\"); Now the Path and Color classes are required in and ready to be used. 3. Create helper functions Calculate a point on a circle Since our plugin will create a pie chart, this helper function will be used to return an x,y coordinates of each wedge in the pie chart. The function accepts radius and angle as parameters and use them to calculate the coordinates of a point on a circle at a given angle on the perimeter of the circle. Add the lines of code below to your file: function pointOnCircle(radius, angle) { const radians = angle * 2. * Math.PI / 360.; const xcoord = radius * Math.cos(radians); const ycoord = radius * Math.sin(radians); return xcoord + \",\" + ycoord; } This is just straight-up JavaScript; there's nothing specific to XD plugin APIs to cover here. We won't cover the math in depth, here's an overview what this helper function does: The angle is expressed in degrees. It must be converted to radians before passing it to the sine and cosine functions. More info: Math.cos, Math.sin The function will return the coordinates as a string in the x,y format, which will be used to be inserted to the path data, which also has to be a string Add a single pie wedge to the scenegraph Our plugin will also need to be able to add a single pie wedge to the scenegraph. Add the lines of code below to your file. Each of the numbered comments are explained below the code: function createWedge(selection, radius, startAngle, endAngle, color) { // [1] const startPt = pointOnCircle(radius, startAngle); const endPt = pointOnCircle(radius, endAngle); const pathData = `M0,0 L${startPt} A${radius},${radius},0,0,1,${endPt} L0,0`; // [2] const wedge = new Path(); // [3] wedge.pathData = pathData; // [4] wedge.fill = new Color(color); // [5] wedge.translation = {x: radius, y: radius}; // [6] selection.insertionParent.addChild(wedge); // [7] } This function accepts five arguments: The current selection in the scene graph (selection) The pie chart radius (chartRadius) The start radian of the wedge (startAngle) The end radian of the wedge (endAngle) The color of the wedge (color) Based on these arguments, pathData is constructed. The pen is moved to the origin, a line is drawn to the first point on the edge of the circle, an arc is drawn to the second point on the edge of the circle, and then a line is drawn back to the origin. For more information on how to create path data, please refer to Paths Create a new instance of Path Set pathData Set the color of the path object Move the path object down and to the right by radius units. As a result, the pie chart will appear with its top left corner positioned at 0,0 Insert the path object into the currently-selected artboard 4. Create the main function In this step, we'll build out the main function, createLinesHandlerFunction, that we added in the first step. This function creates four wedges: function createPieChartHandlerFunction(selection) { createWedge(selection, 100, 0, 90, \"red\"); createWedge(selection, 100, 90, 135, \"blue\"); createWedge(selection, 100, 135, 225, \"yellow\"); createWedge(selection, 100, 225, 360, \"purple\"); } Note that the end angle of each wedge matches the start angle of the next wedge. As a result, the wedges fit together to create a complete pie chart! 5. Run the plugin Ater saving all your changes, reload the plugin in XD and run it. The result should be similar to the following: Next Steps Want to expand on what you learned here? Have a look at these references to see options for customizing this sample plugin: Path Color Commands Ready to explore further? Take a look at our other resources: Tutorials Sample code repos "},"tutorials/how-to-style-text/":{"url":"tutorials/how-to-style-text/","title":"How to style text","keywords":"","body":"How to style text Creating styled text in Adobe XD is easy! In this tutorial, we'll show you how to create a text element with a specific color and font size, and also a text element with multiple inline colors. Prerequisites Basic knowledge of HTML, CSS, and JavaScript Quick Start Tutorial Debugging Tutorial Development Steps Complete code for this plugin can be found on GitHub. 1. Prepare your plugin scaffold First, edit the manifest file for the plugin you created in our Quick Start Tutorial. Replace the JSON object in your manifest with the one below, noting the changes for the following fields: id name uiEntryPoints[0].label uiEntryPoints[0].commandId { \"id\": \"ID_FROM_IO_CONSOLE\", \"name\": \"Create Styled Text sample plugin\", \"host\": { \"app\": \"XD\", \"minVersion\": \"13.0.0\" }, \"version\": \"1.0.0\", \"uiEntryPoints\": [ { \"type\": \"menu\", \"label\": \"Create Styled Text\", \"commandId\": \"createStyledTextCommand\" } ] } Then, update your main.js file, mapping the manifest's commandId to a handler function. Replace the content of your main.js file with the following code: function createStyledTextHandlerFunction(selection) { // The body of this function is added later } module.exports = { commands: { \"createStyledTextCommand\": createStyledTextHandlerFunction } }; The remaining steps in this tutorial describe additional edits to the main.js file. 2. Require in XD API dependencies For this tutorial, we just need access to two XD scenegraph classes. Add the following lines to the top of your main.js file: // Add this to the top of your main.js file const { Text, Color } = require(\"scenegraph\"); Now the Text and Color classes are required in and ready to be used. 3. Create the main function In this step, we'll build out the main function, createStyledTextHandlerFunction, that we added in the first step. This function will add red text to the user's doucment. Each of the numbered comments are explained below the code: function createStyledTextHandlerFunction(selection) { const node = new Text(); // [1] node.text = \"This is some red text\"; // [2] node.fill = new Color(\"#FF0000\"); // [3] node.fontSize = 24; selection.insertionParent.addChild(node); // [4] node.moveInParentCoordinates(20, 50); // [5] } Create the Text object. Populate text with a string. Set the color to red and the font size to 24 for the entire string. Add text to the scenegraph as a child of the currrently-selected artboard. Move text to a different position relative to the artboard's coordinate system. Character styles such as color and font size can also vary within the text. Read more below for details. 4. Test the plugin If you reload the plugin and run it, you should see the following result: Not bad for a few lines of code! Let's push it a little further. 5. Update the main function All red is ok, but we can make our text more colorful than that. Let's change the code to apply different styles to different parts of the text, resulting in rainbow-colored text. The styleRanges property lets us apply different styles to different ranges of the node's text: function createStyledTextHandlerFunction(selection) { const node = new Text(); const textData = [ // [1] {text: \"This \", color: \"red\"}, {text: \"is \", color: \"orange\"}, {text: \"some \", color: \"yellow\"}, {text: \"ra\", color: \"green\"}, {text: \"in\", color: \"blue\"}, {text: \"bow \", color: \"indigo\"}, {text: \"text\", color: \"violet\"} ]; node.text = textData.map(item => item.text).join(\"\"); // [2] node.styleRanges = textData.map(item => ({ // [3] length: item.text.length, fill: new Color(item.color) })); node.fontSize = 24; // [4] selection.insertionParent.addChild(node); node.moveInParentCoordinates(20, 50); } Here's what's changed: This data structure stores the text to be displayed, as well as the color to use for each fragment of text. Just as before, we set node.text equal to the text to be displayed. This time, the text string is created by concatenating together all the .text property values contained in the textData array. The Array#map gets us an array of strings, which we combine into a single string with Array#join. In this step, we build an array of style objects, applying each style to a few characters of the text string. We use Array#map again, this time converting each item in the textData array into a style object. The length of each style is equal to the length of the text string contained in one element of the textData array. The fill of each style uses the color value contained in one element of the textData array. We can still apply styles to the entire text node at once, as in the earlier example. Here, the font size will be set to the same value across all the style ranges we just created. The Color constructor understands some color names, but you have plenty of other options for defining colors precisely, including hex, rgba, and more. See the Color reference for more information. Here are a few things to notice about the styleRanges property of Text objects: styleRanges is an array of objects; you can have more than one style for a text node. Each range is given a length which determines the number of characters to which the style is applied, starting from the end of the previous style range. Character styles such as fill or fontSize can be set to different values in each style range, or they can be set on the Text node overall to apply the setting to all existing style ranges. 6. Run the plugin After saving all of your changes, reload the plugin in XD and run it. You'll now have rainbow-colored text: Next Steps Want to expand on what you learned here? Have a look at these references to see options for customizing this sample plugin: Text Color Ready to explore further? Take a look at our other resources: Tutorials Sample code repos "},"tutorials/how-to-work-with-scenenodelist/":{"url":"tutorials/how-to-work-with-scenenodelist/","title":"Working with a SceneNodeList","keywords":"","body":"How to work with a SceneNodeList This sample demonstrates how to work with a SceneNodeList in Adobe XD. The short version of this story is that a SceneNodeList is not an Array. Read on for details. Prerequisites Basic knowledge of HTML, CSS, and JavaScript. Quick Start Tutorial Debugging Tutorial Development Steps Complete code for this plugin can be found on GitHub. 1. Prepare your plugin scaffold First, edit the manifest file for the plugin you created in our Quick Start Tutorial. Replace the JSON object in your manifest with the one below, noting the changes for the following fields: id name uiEntryPoints (note how this array contains 2 objects) { \"id\": \"ID_FROM_IO_CONSOLE\", \"name\": \"SceneNodeList Plugin\", \"host\": { \"app\": \"XD\", \"minVersion\": \"13.0.0\" }, \"version\": \"1.0.0\", \"uiEntryPoints\": [ { \"type\": \"menu\", \"label\": \"Create Elements\", \"commandId\": \"createElements\" }, { \"type\": \"menu\", \"label\": \"Filter and Color\", \"commandId\": \"filterAndColor\" } ] } Then, update your main.js file, mapping both of the manifest's commandId to their respective handler functions. Replace the content of your main.js file with the code below. function createElements(selection) { // The body of this function is added later } function filterAndColor(selection, documentRoot) { // The body of this function is added later } module.exports = { commands: { createElements, filterAndColor } }; Note the different use of contextual arguments in each function: the first function only makes use of selection, which the second makes use of both selection and documentRoot. We'll look at why documentRoot is used in a later step. The remaining steps in this tutorial describe additional edits to the main.js file. 2. Require in XD API dependencies For this tutorial, we just need access to two XD scenegraph classes and one XD module. Add the following lines to the top of your main.js file: // Add this to the top of your main.js file const { Artboard, Rectangle, Ellipse, Text, Color } = require(\"scenegraph\"); Now the Artboard, Rectangle, Ellipse, Text, and Color classes are required in and ready to be used. 3. Create the handler function for createElements This function will do what it says on the label: create elements in the XD document. It's just here for the purpose of generating elements that will help us learn about the SceneNodeList in the next section. Because of that, we won't go into detail about the createElements function. In short, it will create a number of rectangles, ellispses, and text elements, and put them on your XD artboard. function createElements(selection) { for (let i = 0; i We'll run the command for this function in a later step. 4. Create the handler function for filterAndColor So let's take a look at working with a SceneNodeList! The function we create in this step will filter all content on the artboard for rectangles, and then color only the rectangles red. Recall that in the first step, we made a note of contextual arguments in command handlers, and particularly that this filterAndColor function makes use of the second documentRoot argument. Like any SceneNode, documentRoot has a .children property that returns a SceneNodeList. A SceneNodeList is not an Array. One notable difference is that, with a SceneNodeList, you access elements in the list using the #at method (for example, node.children.at(0) to get the first node in the list). You can learn more about the SceneNodeList class here. Let's fill out our handler function. Each of the numbered comments are explained below the code: function filterAndColor(selection, documentRoot) { documentRoot.children.forEach(node => { // [1] if (node instanceof Artboard) { // [2] let artboard = node; let rectangles = artboard.children.filter(artboardChild => { // [3] return artboardChild instanceof Rectangle; }) rectangles.forEach(rectangle => { // [4] rectangle.fill = new Color(\"red\"); }) } }) } Start from the documentRoot node and traverse down the tree using the .children property. Since .children is a SceneNodeList, it has a #forEach method that will let us iterate through the list, node by node. Since we started at the documentRoot level, the first thing we need to do is look for the artboards in the document. This line ensures that we only traverse down further if the current child node is an artboard. Once we've found an artboard, we look at its .children property, which is also a SceneNodeList. This SceneNodeList will contain all of the elements we created earlier. We use theSceneNodeList#filtermethod to filter the artboard's children down to arectangles` array. Finally, we iteracte over the rectangles array with #forEach, coloring each rectangle red as we go. 5. Run the plugin After saving all your changes, reload the plugin in XD. First, select an artboard and run the \"Create Elements\" command. You plugin will pull shapes on the artboard. Then, run the \"Filter and Color\" command: You've worked with a SceneNodeList to iterate through an artboard's contents and filter based on element type! Next Steps Want to expand on what you learned here? Have a look at these references to see options for customizing this sample plugin: SceneNodeList SceneNode Artboard Rectangle Ellipse Text Color Ready to explore further? Take a look at our other resources: Tutorials Sample code repos "},"tutorials/io-index.html":{"url":"tutorials/io-index.html","title":"Working with I/O","keywords":"","body":"Working with I/O If you want your plugin to go beyond the document to work with local files or web services, you'll want to learn about our file I/O and network I/O APIs. These tutorials will help you connect your XD plugin with the wider world: import from and export to the local machine, integrate with OAuth, or make network requests. The tutorials contained in this section will show you a few ways XD plugins can work with file and network I/O: How to export a rendition How to read a file How to integrate with OAuth How to make a simple network request "},"tutorials/how-to-export-a-rendition/":{"url":"tutorials/how-to-export-a-rendition/","title":"How to export a rendition","keywords":"","body":"How to export a rendition This sample describes how an XD plugin can invoke the default folder picker and generate a rendition of the selected artboard for export. Prerequisites Basic knowledge of HTML, CSS, and JavaScript. Quick Start Tutorial Debugging Tutorial Development Steps Complete code for this plugin can be found on GitHub. 1. Prepare your plugin scaffold First, edit the manifest file for the plugin you created in our Quick Start Tutorial. Replace the JSON object in your manifest with the one below, noting the changes for the following fields: id name uiEntryPoints[0].label uiEntryPoints[0].commandId { \"id\": \"ID_FROM_IO_CONSOLE\", \"name\": \"Export Rendition Plugin\", \"host\": { \"app\": \"XD\", \"minVersion\": \"13.0.0\" }, \"version\": \"1.0.0\", \"uiEntryPoints\": [ { \"type\": \"menu\", \"label\": \"Export Rendition\", \"commandId\": \"exportRendition\" } ] } Then, update your main.js file, mapping the manifest's commandId to a handler function. Replace the content of your main.js file with the following code: async function exportRenditionHandlerFunction(selection) { if (selection.items.length > 0) { // The body of this function is added later } } module.exports = { commands: { \"exportRendition\": exportRenditionHandlerFunction } }; A couple of notes about the handler function shell above: This function will run asynchronously, as indicated by the async keyword at the beginning of the line. To learn more about what this means, see our document on sync and async support. Since this plugin will require user to select an object, we use an if statement to check if there is an XD object selected. The remaining steps in this tutorial describe additional edits to the main.js file. 2. Require in XD API dependencies For this tutorial, we just need access to one XD module and one UXP class. Add the following lines to the top of your main.js file: // Add this to the top of your main.js file const application = require(\"application\"); const fs = require(\"uxp\").storage.localFileSystem; Now the application module and localFileSystem class are required in and ready to be used. These modules are required to invoke the folder picker and export renditions. 3. Invoke the folder picker Here, we'll use uxp.storage.localFileSystem (our fs constant) to invoke the folder picker: const folder = await fs.getFolder(); const file = await folder.createFile(\"rendition.png\"); This will invoke the default folder picker for user to choose the save directory and create a file named rendition.png. 4. Define your rendition settings Next, we'll define the settings for our desired renditions. Note the data structure in the code below: an array of objects (in this case, one object). Each of the numbered comments are explained below the code: let renditionSettings = [{ node: selection.items[0], // [1] outputFile: file, // [2] type: application.RenditionType.PNG, // [3] scale: 2 // [4] }]; selection.items[0] refers to the first user-selected item in the document Set the outputFile property to the file constant we created in step #3 Set the type property to application.RenditionType.PNG Set the desired scale of the exported rendition We'll use this data structure containing our settings in the next step. 5. Create renditions This is where we attempt to create the renditions: application.createRenditions(renditionSettings) // [1] .then(results => { // [2] console.log(`PNG rendition has been saved at ${results[0].outputFile.nativePath}`); }) .catch(error => { // [3] console.log(error); }); The application#createRenditions method accepts as an argument the renditionSettings data structure that we created in step #4. createRenditions returns a Promise. We log success to the developer console. Any errors will land in .catch, which we also log to the developer console. 6. Run the plugin After saving all of your changes, reload the plugin in XD. Make sure to select an artboard and run the plugin command. You should see a folder picker like this one: The rendition will be saved at the specified location. Open the developer console to see your success or error message from the previous step. Next Steps Want to expand on what you learned here? Have a look at these references to see options for customizing this sample plugin: File I/O Export Renditions Ready to explore further? Take a look at our other resources: Tutorials Sample code repos "},"tutorials/how-to-read-a-file/":{"url":"tutorials/how-to-read-a-file/","title":"How to read a file","keywords":"","body":"How to read a file This tutorial will show you how an XD plugin can read in a file from the file system. As one of example of what you can do with a file, we'll extract text from the file and add that text to the scenegraph. Prerequisites Basic knowledge of HTML, CSS, and JavaScript. Quick Start Tutorial Debugging Tutorial Development Steps Complete code for this plugin can be found on GitHub. 1. Prepare your plugin scaffold First, edit the manifest file for the plugin you created in our Quick Start Tutorial. Replace the JSON object in your manifest with the one below, noting the changes for the following fields: id name uiEntryPoints[0].label uiEntryPoints[0].commandId { \"id\": \"ID_FROM_IO_CONSOLE\", \"name\": \"Insert Text from File\", \"host\": { \"app\": \"XD\", \"minVersion\": \"13.0.0\" }, \"version\": \"1.0.0\", \"uiEntryPoints\": [ { \"type\": \"menu\", \"label\": \"Insert Text From File\", \"commandId\": \"insertTextFromFileCommand\" } ] } Then, update your main.js file, mapping the manifest's commandId to a handler function. Replace the content of your main.js file with the following code (note the presence of the async keyword, which we'll look at in a later step): async function insertTextFromFileHandler(selection) { // The body of this function is added later } module.exports = { commands: { \"insertTextFromFileCommand\": insertTextFromFileHandler } }; The remaining steps in this tutorial describe additional edits to the main.js file. 2. Require in XD API dependencies For this tutorial, we need access to two XD scenegraph dependencies and one UXP dependency. Add the following lines to the top of your main.js file: // Add this to the top of your main.js file const { Text, Color } = require(\"scenegraph\"); const fs = require(\"uxp\").storage.localFileSystem; Now the Text and Color classes are required in and ready to be used, as well as UXP's local file system provider. 3. Create a handler function Our plugin will allow the user to pick a file from the system file picker, read that file's contents, and add the contents to a text object on the scenegraph. Each of the numbered comments are explained below the code: async function insertTextFromFileHandler(selection) { // [1] const aFile = await fs.getFileForOpening({ types: [\"txt\"] }); // [2] if (!aFile) return; // [3] const contents = await aFile.read(); // [4] const text = new Text(); // [5] text.text = contents; text.styleRanges = [{ length: contents.length, fill: new Color(\"#0000ff\"), fontSize: 12 }]; selection.insertionParent.addChild(text); // [6] text.moveInParentCoordinates(10, 30); } This example uses XD's asynchronous Filo I/O APIs, so the handler function must be declared as an async method. To learn more about async support in XD plugin APIs, see our document on sync and async support. A file picker dialog is displayed, and the function waits for the user to select a text file. The selected file is assigned to aFile. The #getFileForOpening method is asynchronous, so the await keyword is used. If aFile is undefined (because the user did not select a file), then plugin exits. The contents of the file is read in, and returned as a string. See below for more detail. The #read method is asynchronous, so the await keyword is used. The contents of the string is added to a Text object. For details on Text properties, see the \"How to style text\" tutorial. The text object is added to and positioned on the selected artboard. 4. Run the plugin After saving all of your changes, reload the plugin in XD and run it. First you'll see a file picker: If you select a file containing text, the text should be added to the currently-selected artboard: Next Steps Want to expand on what you learned here? Have a look at these references to see options for customizing this sample plugin: File I/O Text Ready to explore further? Take a look at our other resources: Tutorials Sample code repos "},"tutorials/how-to-make-network-requests/":{"url":"tutorials/how-to-make-network-requests/","title":"How to make network requests","keywords":"","body":"How to make network requests This sample app will show you how to load an image in an XD object (Rectangle or Artboard) by making network requests using XHR and fetch. Prerequisites Basic knowledge of HTML, CSS, and JavaScript Basic knowledge of XMLHttpRequest and fetch Quick Start Tutorial Debugging Tutorial Development Steps Complete code for this plugin can be found on GitHub. 1. Create plugin scaffold First, edit the manifest file for the plugin you created in our Quick Start Tutorial. Replace the JSON object in your manifest with the one below, noting the changes for the following fields: id name uiEntryPoints[0].label uiEntryPoints[0].commandId { \"id\": \"ID_FROM_IO_CONSOLE\", \"name\": \"Network IO\", \"version\": \"1.0.0\", \"host\": { \"app\": \"XD\", \"minVersion\": \"13.0.0\" }, \"uiEntryPoints\": [ { \"type\": \"menu\", \"label\": \"How to make network requests\", \"commandId\": \"applyImage\" } ] } Then, update your main.js file, mapping the manifest's commandId to a handler function. Replace the content of your main.js file with the following code: function applyImage(selection) { // The body of this function is added later } module.exports = { commands: { applyImage } }; The remaining steps in this tutorial describe additional edits to the main.js file. 2. Require in XD API dependencies For this tutorial, we just need access to one XD scenegraph class. Add the following lines to the top of your main.js file: // Add this to the top of your main.js file const { ImageFill } = require(\"scenegraph\"); Now the ImageFill class is imported and ready to be used. 3. Write a helper function to make XHR requests Our XHR helper xhrBinary will make an HTTP GET request to any URL it is passed, and a return a Promise with an arraybuffer. Each of the numbered comments are explained below the code: function xhrBinary(url) { // [1] return new Promise((resolve, reject) => { // [2] const req = new XMLHttpRequest(); // [3] req.onload = () => { if (req.status === 200) { try { const arr = new Uint8Array(req.response); // [4] resolve(arr); // [5] } catch (err) { reject(`Couldnt parse response. ${err.message}, ${req.response}`); } } else { reject(`Request had an error: ${req.status}`); } } req.onerror = reject; req.onabort = reject; req.open('GET', url, true); req.responseType = \"arraybuffer\"; // [6] req.send(); }); } xhrBinary function takes a url as a parameter The function returns a Promise The function uses XMLHttpRequest to make network requests Once the correct response comes back, the function uses Unit8Array method to convert the response to an arraybuffer After the conversion, the promise is resolved Make sure the set the responseType as arraybuffer We'll use this function in a later step. 4. Convert arraybuffer to base64 string The help function we just made returns and arraybuffer but ImageFill will expect a base64 string. We need to convert one to the other. The XD plugin API does not provide a atob method, as you would expect in a browser environment. You will need to supply your own conversion method. Luckily, you don't need to create your own from scratch. There are many open-source libraries out there that will convert arraybuffer to base64 string. This public is one such example in a GitHub Gist. Find your favorite and add it to your main.js file. For this example, we'll call the base64ArrayBuffer found in the Gist linked above. We'll use this function in a later step. 5. Write a helper to apply ImageFill This helper function will create an ImageFill instance that can be applied to a user-selected XD scengraph object: function applyImagefill(selection, base64) { // [1] const imageFill = new ImageFill(`data:image/jpeg;base64,${base64}`); // [2] selection.items[0].fill = imageFill; // [3] } The function accepts the selection and a base64 string as parameters Use the ImageFill class to create the fill Apply the image to the user-selected XD object We'll use this function in the next step. 6. Write a helper function to download the image Ok, you've just made three helper functions. Now we're going to tie them all together! Note the use of the async keyword at the beginning of the function. async function downloadImage(selection, jsonResponse) { // [1] try { const photoUrl = jsonResponse.message; // [2] const photoObj = await xhrBinary(photoUrl); // [3] const photoObjBase64 = await base64ArrayBuffer(photoObj); // [4] applyImagefill(selection, photoObjBase64); // [5] } catch (err) { console.log(\"error\") console.log(err.message); } } This helper function accepts the selection and a JSON response object as parameters Gets the URL from the JSON response Uses our async xhrBinary function to get an arraybuffer Uses our async base64ArrayBuffer function to convert arraybuffer to base64 string Uses applyImagefill to place the image into a user-selected XD object 7. Write the main handler function This is the function that will be called with the user runs our plugin command. function applyImage(selection) { if (selection.items.length) { // [1] const url = \"https://dog.ceo/api/breeds/image/random\"; // [2] return fetch(url) // [3] .then(function (response) { return response.json(); // [4] }) .then(function (jsonResponse) { return downloadImage(selection, jsonResponse); // [5] }); } else { console.log(\"Please select a shape to apply the downloaded image.\"); } } Checks if user has selected at least one object This is an example public URL to an image Pass the URL to fetch The first .then block returns the response JSON object The second .then block passes the selection and our JSON reponse to our downloadImage function, ultimately placing it in the document Next Steps Want to expand on what you learned here? Have a look at these references to see options for customizing this sample plugin: Network I/O XMLHttpRequest fetch Ready to explore further? Take a look at our other resources: Tutorials Sample code repos "},"tutorials/how-to-integrate-with-OAuth/":{"url":"tutorials/how-to-integrate-with-OAuth/","title":"How to integrate with OAuth","keywords":"","body":"How to Integrate with OAuth This tutorial will show you how to implement the OAuth workflow in an XD plugin, using the Dropbox API as an example. Auth workflows are necessarily complex, so this tutorial will be on the longer side and make use of some advanced concepts. Please read the each section carefully, especially the Prerequisites and Configuration sections. Prerequisites Basic knowledge of HTML, CSS, and JavaScript. Quick Start Tutorial Debugging Tutorial Familiarity with your OS's command line application Familiarity with OAuth A registered app on Dropbox with the following settings: Choose \"Dropbox API\" Choose \"Full Dropbox\" for the access type In Redirect URIs, add your own https ngrok URL (example: \"https://476322de.ngrok.io/callback\") or a secure public URL if you have one Technology Used [Install required] Node.js and the npm package manager OAuth ngrok Dropbox API Overview of the OAuth workflow There are three parts of this workflow: Your XD plugin Your server endpoints (for this development example, we'll create a local Node.js server) The service providers OAuth endpoints (for this example, the Dropbox API) The high-level workflow is as follows: The XD plugin pings the server to get the session ID The server returns a unique ID for the user's XD session Plugin opens a tab in user's default browser with a URL pointing to an endpoint on the server The server handles the entire OAuth code grant workflow The user gives necessary permissions to the plugin The server saves the access token paired with the session ID The plugin polls the server to check if the access token is available for the session ID. If the token is available, the server sends the access token back The plugin uses the access token to make API calls to the service API Configuration Complete code for this plugin can be found on GitHub. The following steps will help you get the sample code from our GitHub repo up and running. 1. Install Node.js packages Inside the sample repo's server folder, there is a package.json file that contains a list of dependencies. Run the following command from the top level directory of the repo to install the dependencies: $ cd server $ npm install 2. Use ngrok to create a public SSL URL You can use either ngrok to create a public SSL endpoint, or use your own public URL. To use ngrok, first download it to your machine. You can run ngrok from anywhere on your machine, but since we're already in the server folder, we'll move ngrok there for convenience. mv ~/Downloads/ngrok ./ Then we run it: ./ngrok http 8000 Now ngrok is forwarding all HTTP requests from port 8000 to a public SSL endpoint. You can see the forwarding endpoint currently being used in the ngrok terminal output. Note the forwarding endpoint; we'll use it in the next step. 3. Set your API credentials and public URL Enter the required credentials in public/config.js. You'll need: Your Dropbox API key Your Dropbox API secret Your ngrok public URL const dropboxApiKey = \"YOUR-DROPBOX-API-KEY\"; const dropboxApiSecret = \"YOUR-DROPBOX-SECRET\"; const publicUrl = \"YOUR-PUBLIC-URL\"; // e.g. https://476322de.ngrok.io/ try { if (module) { module.exports = { dropboxApiKey: dropboxApiKey, dropboxApiSecret: dropboxApiSecret, publicUrl: publicUrl } } } catch (err) { console.log(err); } Our server will make use of these settings in a later step. 4. Start the server After completing the configuration steps, start the server from the server folder: $ npm start Now you have a running server with an HTTPS endpoint and your Dropbox credentials ready to go. Development Steps Now we can get back to the XD plugin side of things! 1. Require in XD API dependencies For this tutorial, we just need access to two XD scenegraph classes. Add the following lines to the top of your plugin's top-level main.js file: const { Text, Color } = require(\"scenegraph\"); Now the Text and Color classes are required in and ready to be used. 2. Store the public URL Your plugin will also need to know your public URL. Since we used ngrok earlier, we'll make a constant with that URL: const publicUrl = \"YOUR-PUBLIC-URL\"; // e.g. https://476322de.ngrok.io/ This url will be used to send requests to your server. 3. Create a variable to store the access token Once you receive the access token from your server, you can use the token for API calls as long as the token is stored in memory and the XD session is alive. let accessToken; We'll assign the value later. 4. Write a helper function for XHR requests // XHR helper function function xhrRequest(url, method) { return new Promise((resolve, reject) => { // [1] const req = new XMLHttpRequest(); req.timeout = 6000; // [2] req.onload = () => { if (req.status === 200) { try { resolve(req.response); // [3] } catch (err) { reject(`Couldn't parse response. ${err.message}, ${req.response}`); } } else { reject(`Request had an error: ${req.status}`); } } req.ontimeout = () => { console.log(\"polling..\") // [4] resolve(xhrRequest(url, method)) } req.onerror = (err) => { console.log(err) reject(err) } req.open(method, url, true); // [5] req.responseType = 'json'; req.send(); }); } This helper function returns a promise object Request timeout is set to 6000 miliseconds On a successful request, the promise is resolved with req.response. In any other scenarios, the promise is rejected If the request was timed out after 6000 miliseconds, the function loops and keeps sending XHR request until the response is received The function sends the request to the specified url with the specified method 5. Create the main plugin function Note the use of the async keyword since this function will have asynchronous calls inside. async function launchOAuth(selection) { ... } Please see the subsequent steps below to see what goes into this function 6. Get the session ID We'll make an XHR request. const rid = await xhrRequest(`${publicUrl}/getRequestId`, 'GET') .then(response => { return response.id; }) This part of the function sends a GET request to your server's getRequestId endpoint and returns response.id. Let's take a look at the code on the server side: /* Authorized Request IDs (simulating database) */ const requestIds = {}; // [1] app.get('/getRequestId', function (req, res) { /* Simulating writing to a database */ for (let i = 1; i Note that there is a global variable, requestIDs, which is an empty JavaScript object. For the sake of simplicity, we are using this object to simulate a database This loop function simulates writing to a database by creating a new id, save the id in the global object, and res.json with the id 7. Open the default browser with the URL pointing to your server To open the machine's default browser from an XD plugin, we can use UXP's shell module: require(\"uxp\").shell.openExternal(`${publicUrl}/login?requestId=${rid}`) This will open the browser with the url pointing to an endpoint on your server. Let's take a look at the code on the server side. app.get('/login', function (req, res) { let requestId = req.query.requestId; // [1] /* This will prompt user with the Dropbox auth screen */ res.redirect(`https://www.dropbox.com/oauth2/authorize?response_type=code&client_id=${dropboxApiKey}&redirect_uri=${publicUrl}/callback&state=${requestId}`) // [2] }) app.get('/callback', function (req, res) { /* Retrieve authorization code from request */ let code = req.query.code; // [3] let requestId = req.query.state; /* Set options with required paramters */ let requestOptions = { // [4] uri: `https://api.dropboxapi.com/oauth2/token?grant_type=authorization_code&code=${code}&client_id=${dropboxApiKey}&client_secret=${dropboxApiSecret}&redirect_uri=${publicUrl}/callback`, method: 'POST', json: true } /* Send a POST request using the request library */ request(requestOptions) // [5] .then(function (response) { /* Store the token in req.session.token */ req.session.token = response.access_token; // [6] /* Simulating writing to a database */ requestIds[requestId][\"accessToken\"] = response.access_token; // [7] res.end() }) .catch(function (error) { res.json({ 'response': 'Log in failed!' }); }); }) /login route grabs the requestId from the query parameter and redirects to the Dropbox's authorize endpoint and pass the requestId to the optional parameter, state. This redirect will prompt the login screen on the user's browser Once the dropbox API returns the code to the specified callback endpoint, /callback, which then parses the code and the requestId Set requestOptions object with Dropbox's token URI Use the request library to send the POST request Store the access token received from Dropbox in the session object Simulate writing to a database by paring the access token with requestId and storing it to requestIds global object 8. Poll the server until access token is received accessToken = await xhrRequest(`${publicUrl}/getCredentials?requestId=${rid}`, 'GET') .then(tokenResponse => { return tokenResponse.accessToken; }) As noted in step #4, the xhrRequest helper function is designed to poll the server if the initial request is not responded in 6000 miliseconds. Once the user completes the OAuth workflow in the browser, polling should stop and this request should be returned with the access token. 9. Show a dialog indicating the token has been received // create the dialog let dialog = document.createElement(\"dialog\"); // [1] // main container let container = document.createElement(\"div\"); // [2] container.style.minWidth = 400; container.style.padding = 40; // add content let title = document.createElement(\"h3\"); // [3] title.style.padding = 20; title.textContent = `XD and Dropbox are now connected`; container.appendChild(title); // close button let closeButton = document.createElement(\"button\"); // [4] closeButton.textContent = \"Got it!\"; container.appendChild(closeButton); closeButton.onclick = (e) => { // [5] dialog.close(); } document.body.appendChild(dialog); // [6] dialog.appendChild(container); dialog.showModal() Just like HTML DOM APIs, you can use document.createElement method to create UI objects. Elements have the style property which contains metrics properties you can set The dialog element is the modal window that pops down in XD Create a container div element Create a h3 element to let the user know the auth workflow has been completed You need at least one exit point. Create a close button and add it to the container Create a listener for the click event and close the dialog Attach the dialog to the document, add the container, and use showModal method to show the modal 10. Make an API call to Dropbox const dropboxProfileUrl = `https://api.dropboxapi.com/2/users/get_current_account?authorization=Bearer%20${accessToken}`; // [1] const dropboxProfile = await xhrRequest(dropboxProfileUrl, 'POST'); // [2] Note that received accessToken is included in this Dropbox API call to retrieve the current account's profile xhrRequest helper function is used again to make this POST call 10. Create a text element to show the profile information inside the current artboard const text = new Text(); // [1] text.text = JSON.stringify(dropboxProfile); // [2] text.styleRanges = [ // [3] { length: text.text.length, fill: new Color(\"#0000ff\"), fontSize: 10 } ]; selection.insertionParent.addChild(text); // [4] text.moveInParentCoordinates(100, 100); // [5] Create a new Text instance in XD Populate the text with the stringified version of the profile json object Add the styleRanges for the text Insert the text Move the text inside the artboard to make it visible Next Steps Ready to explore further? Take a look at our other resources: Tutorials Sample code repos "},"tutorials/ui-index.html":{"url":"tutorials/ui-index.html","title":"Building user interfaces","keywords":"","body":"Building user interfaces While plenty of XD plugins are perfectly suited to run like headless scripts, many plugins will need to interact with the user in some way. XD plugins can display UI in the form of modal dialogs, built with JavaScript and a supported subset of HTML and CSS. For simple alerts and messages, we've also built various helpers which make it easy to display important messages, get user feedback, and more. The tutorials in this section will focus on the UI you can generate using these helpers. Should you need more power than these helpers provide, you can learn more by reading the User Interface Concepts. The tutorials contained in this section will get you on your way to building plugin UI well-suited for XD utilizing the Plugin Toolkit library. Before continuing, please ensure that you install the tooklit in your project, as follows: Click the \"Clone or Download\" button on the right side of the Plugin Toolkit page Uncompress the zip file after the download completes Copy the lib folder to your plugin project Now you're ready to display simple messages to your users! How to show an alert How to ask user for confirmation More complex UI There are a lot of ways to render more complex UI. You can review the following material to learn more: User Interface Concepts User Interface elements User Interface Layout All about Dialogs "},"tutorials/how-to-show-an-alert/":{"url":"tutorials/how-to-show-an-alert/","title":"How to show an alert","keywords":"","body":"How to show an alert There will be times when you need to show a simple message to your user. This tutorial will show you an easy way to display an informational message like the following: Other times you'll need to display an error alert, which looks like this: Technology Used Plugin Toolkit Prerequisites Basic knowledge of HTML, CSS, and JavaScript. Quick Start Tutorial Debugging Tutorial Development Steps Complete code for this plugin can be found on GitHub. 1. Add the \"plugin helpers\" library Creating dialogs can take a lot of boilerplate code, but we've created a small library that makes it simple to display simple dialogs in the form of a \"helper\" library. This library is located at https://github.com/AdobeXD/plugin-toolkit. To add the library to your project, you can: Click the \"Clone or Download\" button on the right side of the page Uncompress the zip file after the download completes Copy the lib folder to your plugin project 2. Require the dialogs module in main.js Add the following to your main.js: const { alert, error } = require(\"./lib/dialogs.js\"); This will import a alert function that we can call to display an alert. The error function can be used to display the error variation. 3. Create a function to display the alert async function showAlert() { /* we'll display a dialog here */ } Next, inside this function, we call alert to render the message. This function takes several parameters: The dialog's title The text you want to display to the user in the dialog's body – you can pass as many lines of text as you want (but be careful: dialogs won't scroll automatically!) Let's see what that looks like in code: await alert(\"Connect to the Internet\", //[1] \"In order to function correctly, this plugin requires access to the Internet. Please connect to a network that has Internet access.\"); //[2] 4. Create a function to display an error alert async function showError() { /* we'll display a dialog here */ } Inside this function, we call error to render the message. Just like alert, this function takes several parameters: The dialog's title The text you want to display to the user in the dialog's body – you can pass as many lines of text as you want (but be careful: dialogs won't scroll automatically!) Let's see what that looks like in code: await error(\"Synchronization Failed\", //[1] \"Failed to synchronize all your changes with our server. Some changes may have been lost.\", \"Steps you can take:\", \"* Save your document\", \"* Check your network connection\", \"* Try again in a few minutes\"); //[2] Note that the we passed several lines of text to error, including some markdown-like list items. The dialogs module understands a very limited subset of markdown; for more see the Plugin Toolkit. 5. Create the menu handler We need to export a menu handler from the main.js file so that XD knows what to do with our plugin: module.exports = { commands: { showAlert, showError } } Be sure to add this to your plugin manifest.json as well: { \"id\": \"ID_FROM_IO_CONSOLE\", \"name\": \"(H2) How to show an alert\", \"version\": \"1.0.0\", \"host\": { \"app\": \"XD\", \"minVersion\": \"13.0.0\" }, \"uiEntryPoints\": [ { \"type\": \"menu\", \"label\": \"How to show an alert\", \"commandId\": \"showAlert\" }, { \"type\": \"menu\", \"label\": \"How to show an error\", \"commandId\": \"showError\" } ] } Guidelines It's important to know when to show an alert because they do obstruct the user's ability to interact with XD. As such, you should follow these guidelines: Don't display \"success\" alerts when it's obvious that the plugin has been successful. Do display a \"success\" alert if your plugin's operation is completed, but the user would have no way of knowing. Do use human-readable language. Don't use technical jargon unless it's language the user is already familiar with. Next Steps Other than alert and error, there are other useful dialog helpers that you might be interested in. How to ask for confirmation User Interface Concepts Other samples "},"tutorials/how-to-ask-user-for-confirmation/":{"url":"tutorials/how-to-ask-user-for-confirmation/","title":"Asking user for confirmation","keywords":"","body":"Asking the user for confirmation There are many times when a plugin will need to ask the user whether or not it should proceed with a given course of action. This tutorial will show you an easy way to get user confirmation before proceeding with a task. Technology Used Plugin Toolkit Prerequisites Basic knowledge of HTML, CSS, and JavaScript. Quick Start Tutorial Debugging Tutorial Development Steps Complete code for this plugin can be found on GitHub. 1. Add the \"plugin helpers\" library Creating dialogs can take a lot of boilerplate code, but we've created a small library that makes it simple to display simple dialogs in the form of a \"helper\" library. This library is located at https://github.com/AdobeXD/plugin-toolkit. To add the library to your project, you can: Click the \"Clone or Download\" button on the right side of the page Uncompress the zip file after the download completes Copy the lib folder to your plugin project 2. Require the dialogs module in main.js Add the following to your main.js: const { confirm } = require(\"./lib/dialogs.js\"); This will import a confirm function that we can call to display a confirmation dialog. 3. Create a function to display the confirmation async function showConfirm() { /* we'll display a dialog here */ } Next, inside this function, we call confirm to actually show the confirmation dialog. confirm takes three arguments: The dialog's title The text you want to display to the user in the dialog's body The two buttons from which you want the user to choose (A confirmation dialog can only have two buttons) Let's see what that looks like in code: const feedback = await confirm(\"Enable Smart Filters?\", //[1] \"Smart filters are nondestructive and will preserve your original images.\", //[2] [\"Cancel\", \"Enable\"] /*[3]*/ ); Note that the third argument is an array of strings. These identify the names of the two buttons that will display in the confirmation dialog. These are given in the order they would appear on a macOS machine, which means that the \"cancel\" or negative button is listed first, and the \"ok\" or acceptance button is listed last. 5. React to which button was pressed When the dialog is closed, some useful information about which button was pressed will be provided. You can access this using the which property on the feedback variable (return value from confirm). switch (feedback.which) { case 0: /* User canceled */ break; case 1: /* User clicked Enable */ break; } As you can see, the value of which maps to the buttons as specified when calling confirm. So 0 is the \"Cancel\" button and 1 is the \"Enable\" button. 6. Create the menu handler We need to export a menu handler from the main.js file so that XD knows what to do with our plugin: module.exports = { commands: { showConfirm } } Be sure to add this to your plugin manifest.json as well: { \"id\": \"ID_FROM_IO_CONSOLE\", \"name\": \"Show Confirmation\", \"host\": { \"app\": \"XD\", \"minVersion\": \"13.0.0\" }, \"version\": \"1.0.0\", \"uiEntryPoints\": [ { \"type\": \"menu\", \"label\": \"Confirmation\", \"commandId\": \"showConfirm\" } ] } Next Steps Ready to explore further? Take a look at our other resources: Tutorials Sample code repos "},"reference/":{"url":"reference/","title":"About advanced concepts","keywords":"","body":"About advanced concepts This section is a great place to visit once you've tried our Quick Start Tutorial and a couple of our step-by-step feature tutorials. The tutorials within contain deeper information relvevant to building Adobe XD plugins. First, we recommend scanning each advanced concept tutorial so you're aware of where things are. Chances are, you won't read these tutorials from top to bottom, especially on the first pass. They are here to be a useful store of knowledge to review periodically throughout the development of your plugin. Our advance concept tutorials are divided into these main areas: JavaScript and XD plugin APIs Adobe XD concepts User interface concepts XD plugin experience guidelines (XDPEGs) Chances are you'll find yourself revisiting these advanced concept tutorials as you progress in building your plugin! "},"reference/javascript/":{"url":"reference/javascript/","title":"JavaScript and XD plugin APIs","keywords":"","body":"JavaScript and XD Plugin APIs XD plugins are written in JavaScript, the language of the web which is also frequently used for servers, OS scripting, and more. If JavaScript is new to you, we recommend trying an introductory JavaScript tutorial elsewhere. You certainly don't need to know everything about JavaScript to build useful XD plugins; once you have a grasp on the basics of the language, you can learn as you create! If you're familiar with JavaScript, you'll find that many of your skills apply to creating XD plugins. There are some special rules of the road you'll want to know, and that's what this advanced concepts section is all about. In this section, we'll talk about JavaScript topics that are specific to XD plugin APIs. Topics include: JavaScript version and feature support Sync and Async The API environment "},"reference/javascript/javascript-support.html":{"url":"reference/javascript/javascript-support.html","title":"JavaScript support","keywords":"","body":"JavaScript version and feature support XD plugin APIs support \"modern JavaScript\"... but what does that mean exactly? This is the place to find out! Can I use ES5 features? Yes! This means you can use Array#map, Array#reduce, and numerous other language features introduced with ES5. In fact, you can write your whole plugin in ES5 if you so choose. What ES2015+ (ES6) features can I use? XD plugin APIs support most of ES2015 and beyond. You can use features such as: Template literals Classes Block-scoped variables ( let , const ) Object destructuring Default parameters Spread and Rest ( ... ) Arrow functions Asynchronous functions ( async / await ) Promises Can I use require? Yes, you can use require to import additional files. Note that require in XD does not follow Node.js-style resolution. You can only require files in your plugin directory relative to your file location, but not outside of your plugin directory. There is no lookup in a package.json or a node_modules directory. For example, the following works: const aFile = require(\"./aFile\"); const someJSON = require(\"./someJSON.json\"); const anotherFile = require(\"./path/to/file/file\"); const someLib = require(\"./node_modules/somelib\"); However, the following will not: const someLib = require(\"somelib\"); // no package.json lookup Can I use npm packages or Node.js APIs? You may be able to use some npm packages without modification, but chances are good that you’ll need to use webpack or rollup in order to generate a bundle. Node.js APIs themselves are not supported. "},"reference/javascript/sync-async.html":{"url":"reference/javascript/sync-async.html","title":"Sync and async","keywords":"","body":"Sync and Async XD plugin APIs support both synchronous and asynchronous code (commonly referred to as sync and async). Below, we'll talk a little about the difference, and what it means for your XD plugins. Note: \"Sync vs async\" is a topic frequently covered in JavaScript tutorials and articles around the web. For a broader introduction, consult your favorite search engine. Synchronous code When you write synchronous code, your code is executed line by line. Here's an example: const newElement = new Rectangle(); newElement.width = 100; newElement.height = 50; newElement.fill = new Color(\"Purple\"); Asynchronous code XD plugins also support asynchronous code with both Promises and async/await. Some XD plugin APIs are asynchronous in nature. You can also create your own Promises as you would in any JavaScript environment. Here's an example using the File API and Promise syntax: function sayHello(selection, documentRoot) { return fs.getFileForSaving().then(file => { return file.write(\"Hello, world!\"); }); } Here's that same example using async/await syntax: async function sayHello(selection, documentRoot) { let file = await fs.getFileForSaving(); file.write(\"Hello, world!\"); } We recommend async/await syntax over Promises. "},"reference/javascript/environment.html":{"url":"reference/javascript/environment.html","title":"API environment","keywords":"","body":"The API environment If you're used to writing JavaScript for web pages or Node.js servers, there are some things to know about the JavaScript environment when creating XD plugins. Not a browser and not Node.js While it may feel like it, the XD plugin API environment is not a browser, nor is it Node.js. This means that you shouldn't make assumptions about what APIs are available based on your experience in other JavaScript environments. However, we do follow standards for API surfaces where appropriate. For example, you'll find our implementation of XMLHttpRequest to work as you would expect. In some cases, we follow standards, but only support a subset of features you might expect in a browser. As an example, see our document on CSS support. Accessing global APIs Supported APIs that you would expect as window globals in other enviroments are also available as globals in XD. Examples include XMLHttpRequest , fetch, WebSocket , document, and more. Example: let req = new XMLHttpRequest(); APIs that are specific to XD are reachable via the require method. Examples include scenegraph, application, uxp, and more. Example: const { Text, Color } = require(\"scenegraph\"); "},"reference/core/":{"url":"reference/core/","title":"XD concepts","keywords":"","body":"XD concepts Since your plugin code will run within XD, it's important to understand some concepts that are specific to the application. Scenegraph Edit context rules Coordinate spaces & units Properties with object values Automatic cleanups APIs "},"reference/core/scenegraph.html":{"url":"reference/core/scenegraph.html","title":"The scenegraph","keywords":"","body":"Scenegraph The XD document is represented as a hierarchical tree of nodes called the scenegraph. Some scenenodes may contain children (e.g. a Group or Artboard), while others are leaf nodes (e.g. a Rectangle or Text node). Typically, you access scenegraph nodes via the selection argument that is passed to your plugin command. You can modify properties on any scenenodes within the current edit context (see below), and you can add leaf nodes to the edit context, but you cannot make structural changes directly to the scenegraph tree - e.g. reordering nodes or changing nesting. To do this, instead use commands. "},"reference/core/edit-context.html":{"url":"reference/core/edit-context.html","title":"The edit context","keywords":"","body":"Edit context rules The edit context is the scope in which selection and edit operations must occur: If the user has drilled down into a container node, that container is the current edit context and only its immediate children are in scope for selection/editing. If the user hasn't drilled into any container nodes, then XD is in the root edit context, and its scope includes all immediate children of the pasteboard (including Artboards), and all immediate children of all those Artboards. Like nearly all edit operations in XD, your plugin is limited to making changes inside the scope of the current edit context. Simple changes can be made directly to the scenegraph nodes that are in scope: Change a property Delete a node Add a new leaf node (basic shape node) Structural changes cannot be made directly, since their impact extends to nodes outside the edit context's scope. You can make structural changes by scripting XD commands: Ungroup (or break apart other container types) - use the ungroup() command Create new Groups (add a whole tree of new nodes) - use the group() command Rearrange Z order - use commands such as bringToFront() If a plugin breaks any of these rules, its entire edit operation will be reverted to protect the user's document from corruption. "},"reference/core/coordinate-spaces-and-units.html":{"url":"reference/core/coordinate-spaces-and-units.html","title":"Coordinate spaces & units","keywords":"","body":"Coordinate spaces & units Sizes and distances in XD are specified in DPI-independent pixels, equivalent to pixels on a 1x display. This is similar to the \"CSS pixels\" used in web design. Each layer of the scenegraph tree can apply a transform (rotation and/or translation), creating a hierarchy of nested coordinate spaces. Due to rotation, the X and Y axes of different coordinate spaces might point in different directions. Take the example of a rotated rectangle that is inside an artboard: The top-left corner of a node is not always located at (0,0) in its own local coordinate space. Use localBounds to get the true top-left of a node. For example, the baseline of a Point Text node is at Y=0 in its local coordinates, so its upper-left corner is at a negative Y value. Similarly, centered or right-aligned text will start at a negative X value in local coordinates. Here are some examples of nodes where the local origin is not the node's visual top-left corner: Typically, when discussing the bounds of a node we are referring to the bounds of its path outline – the hairline \"spine\" that its fill fits within and that the thickness of its stroke is anchored to. Nodes may have visible pixels that extend outside the path outline bounds. For example, a center or outside stroke protrudes beyond the path outline, as does the dropshadow and parts of the \"Object Blur\" effect: If you need a bounding box that encompasses all visible pixels of an object, use globalDrawBounds. The draw bounds are the bounds used when exporting a bitmap image, for example. However, in most other cases (including align/snapping), XD uses the path outline bounds. "},"reference/core/properties-with-object-values.html":{"url":"reference/core/properties-with-object-values.html","title":"Properties with object values","keywords":"","body":"Properties with object values Some scenegraph properties have values that are not simple primitive types (e.g. numbers), but rather are objects with sub-properties of their own. In order to update the document with changes, you must invoke the top-level setter on the scenenode object itself – changing properties on the object value \"inline\" will not result in an update. For example: // Right: let color = node.fill; color.r = 0x80; node.fill = color; // update fill in the scenegraph by kicking the node's setter // Wrong - document will not update: node.color.r = 0x80; "},"reference/core/automatic-cleanups.html":{"url":"reference/core/automatic-cleanups.html","title":"Automatic cleanups","keywords":"","body":"Automatic cleanups To make writing your plugin simpler, XD performs a number of automated cleanups after each plugin command finishes: Artboard reparenting - If a node is changed to overlap an Artboard, it will automatically become a child of the artboard when the command finishes, and vice versa if a node no longer overlaps an Artboard. Selection - Deleted nodes are removed from the selection when the command finishes. Empty containers - If deleting node(s) has caused the parent container to become empty, it is automatically deleted as well after the command finishes. Symbol / Repeat Grid syncing - Most changes you make inside a Symbol are automatically mirrored to all other copies of that Symbol, and most changes you make inside a Repeat Grid cell are automatically mirrored to all its other cells. The only exceptions are certain properties such as text and images which XD permits to vary between Symbol instances or grid cells. "},"reference/core/apis.html":{"url":"reference/core/apis.html","title":"APIs","keywords":"","body":"Available APIs Adobe XD provides several APIs to you, via the require method. You can also import your own modules and files using require. Principal API modules selection - Indicates the selected nodes and related context This object is passed as an argument to your command handler function (see above) scenegraph - APIs available on document nodes Normally you can use these APIs by simply accessing the arguments passed to your command's handler function (selection and documentRoot). To create new nodes in the document, load this module explicitly to access the constructor functions:let Rectangle = require(\"scenegraph\").Rectangle; let node = new Rectangle(); commands - Invoke commands to change the document structure and perform other complex operations. Load this module explicitly: let commands = require(\"commands\"); storage - Read and write files on disk Load this module explicitly: const fs = require(\"uxp\").storage.localFileSystem; Network - Use browser-style XMLHttpRequest , fetch(), and WebSocket APIs to access the network. These APIs are in the global namespace, so you can use them without any require() statements clipboard - Copy text to the clipboard. Load this module explicitly: let clipboard = require(\"clipboard\"); Helper classes SceneNodeList - This is the type of the children property on scenenodes "},"reference/ui/":{"url":"reference/ui/","title":"User interface concepts","keywords":"","body":"User Interface Concepts While plenty of XD plugins are perfectly suited to run like headless scripts, many plugin creators will want to offer the user a way to interact. XD plugins can display UI in the form of modal dialogs, built with JavaScript and a supported subset of HTML and CSS. The tutorials contained in this section will give you an in-depth look at UI features available to your plugin through the API. Insertion Points An insertion point is an area within XD that can accept custom user interface. The following insertion points are available: Modal Dialogs More insertion points will be coming in the future! User Interface Within an insertion point, you can create rich, custom user interfaces. Read the following for more information: Styles Layout Elements "},"reference/ui/styles/":{"url":"reference/ui/styles/","title":"Styles","keywords":"","body":"Styles XD supports rich styling options in your user interface through a combination of CSS and various classes that are defined for you. Color Typography Using CSS Advanced information For specifics on what is and isn't supported, please refer to: Supported HTML Elements Supported Styles "},"reference/ui/styles/color.html":{"url":"reference/ui/styles/color.html","title":"Color","keywords":"","body":"Color Color is a very important part of your user interface. It can highlight important information or warn users about destructive actions. SemanticsExample (macOS)Example (Windows)HTMLThere are four classes of semantic colors beyond the normal standard text color.elements and text with informative semantics are colored blue. elements and text with positive semantics are colored green. elements and text intended to provide cautionary notice are colored orange. elements and text that provide warnings (negative semantics) are colored red. .bright { color: white; } .row div { flex: 1 1 auto; } .row div p { border-width: 2px; border-style: none; border-radius: 4px;} .row div p.border { border-style: solid; } Color SUFFIX red orange green blue color-* Negative Notice Positive Informative background-* Negative Notice Positive Informative border-* Negative Notice Positive Informative Usage By default, text is rendered using a dark gray color on a light background. The specific values differ by platform. You can attach classes to your content in order to use one of the semantic color classes, however. Color Text Color Background Color Border Color blue color-blue background-blue border-blue green color-green background-green border-green orange color-orange background-orange border-orange red color-red background-red border-red For example, if you want to render text with negative semantic, you could use the following HTML: This action is not reversible! When using the background-% classes, be sure to set the text color to white in order to ensure that the text is readable. Guidelines Communicating with Color Don't use color alone to convey intent. Instead add additional context in the form of icons or text. "},"reference/ui/styles/typography.html":{"url":"reference/ui/styles/typography.html","title":"Typography","keywords":"","body":"Typography Typography is an important aspect of user interface design. XD offers several tags and classes to make it easy to render typographically consistent designs. Fonts In general you should avoid specifying specific font families. Instead, allow your text to use the font provided by Adobe XD (which is typically the system font). If you do need to use a different font, ensure that: the font is available on the user's system by picking a safe, commonly installed font. avoid using more than two different fonts within a single dialog. The default font size is dependent upon the platform. macOS tends to render slightly smaller than Windows. Headings Headings are used to provide a very distinct, visual statement. These are most often used at the top of dialogs, but can be used within a dialog as well in order to help define areas using a visual hierarchy. Example (macOS)Example (Windows)HTMLheadings Heading Level One Heading Level Two HEADING LEVEL THREE In general, the following heading levels are used as follows: is used at the top of a dialog, and is typically immediately followed by a horizontal rule (). is used within a dialog to separate content. is used within a dialog to group content, and is typically capitalized. Text Size Typically you'll not need to override the basic text size. However, when rendering paragraph content, you may need additional options. There are three different sizes of paragraph text. Example (macOS)Example (Windows)HTMLBody Text Large text Go from concept to prototype with Adobe XD, the all-in-one UX/UI solution for designing websites, mobile apps, and more. Regular text Go from concept to prototype with Adobe XD, the all-in-one UX/UI solution for designing websites, mobile apps, and more. Small text Go from concept to prototype with Adobe XD, the all-in-one UX/UI solution for designing websites, mobile apps, and more. Each size class is for tags only. If you want to render large body text, you can do so using . For small text, use . Guidelines Italics Use italics for emphasis or for image captions. Underlines Use underlines for linkable content (that is, links that would open a web browser). Don't use underlines for emphasis. Paragraph Width Readability can be drastically reduced when paragraphs are too narrow or too wide. Avoid paragraphs that are narrower than 50 characters (on average) and wider than 120 characters. Paragraph Length Keep your content short and to the point to ensure that users don't have difficulty reading and understanding the text. Indentation Don't indent paragraphs. "},"reference/ui/styles/using-css.html":{"url":"reference/ui/styles/using-css.html","title":"Using CSS","keywords":"","body":"Supported Styles In order to customize the style of your user interface, you can use CSS style rules. For example, you can indicate that a DIV should have a red border with single pixel thickness by applying the style border: 1px solid red;. Styles can be applied in numerous ways. Styles can be applied by using JavaScript by changing properties on the style dictionary. someElement.style.backgroundColor=\"red\"; Styles can be applied using stylesheets. Stylesheets apply rules based on selectors — these are used to control which elements receive which styles. Styles can be imported using various methods (such as webpack), but they can also be added using a STYLE tag. When using innerHTML, you can define styles using the STYLE tag: #button { border: 1px solid red; } Hello There are several categories of styles, and each HTML element supports only certain styles. Some styles can be applied to just about every element, while other elements only have limited styling support. See the available styles for more information on what is supported. Not every element supports every style — especially interactive elements. Supported Selectors XD understands the following CSS selectors: id #anId { /* style */ } class .aClass { /* style */ } tag div { /* style */ } asterisk (universal selector) * { /* style */ } Descendant selector div > p { /* style */ } Group of selectors .aClass, #anID { /* style */ } Child selector div p { /* style */ } Sibling selector div + p { /* style */ } Attribute selector input[type=text] { /* style */ } Pseudo classes div:hover { /* style */ } Only hover is supported as a pseudoclass. "},"reference/ui/layout/":{"url":"reference/ui/layout/","title":"Layout","keywords":"","body":"Supported Layout The XD user interface APIs support three layout modes: Block layout is the default layout mode. Each element is given the entire width of its container, and elements in sequence are stacked vertically — like blocks! Flexbox layout is the most flexible layout mode. Elements can be positioned within containers using a wide variety of rules, including rules that specify how elements can grow and shrink, and how elements should be aligned with respect to each other. Relative and absolute positioning provides the most pixel-perfect control over where elements are positioned. When the other modes don't suffice, you can use relative and absolute positioning, but you'll be in full control over where the element is positioned (for better or worse). "},"reference/ui/layout/block.html":{"url":"reference/ui/layout/block.html","title":"Block layout","keywords":"","body":"Block Layout The default layout system used by the XD User Interface API is block layout. This just means that elements are stacked vertically on top of each other, just like a stack of blocks. Each element will also stretch to fill up the available width in its container. Where the layout may surprise you is when dealing with elements that would typically receive inline layout semantics. This layout is essentially textual layout; that is, inline elements are laid out as if they were text on a page, flowing and wrapping along. In XD, all elements use block layout by default. This includes text-based elements like span, a, button, and all others. This can be a little surprising at first, but if the inline element is desired, one can use the Flexbox layout system to simulate some inline aspects. Let's consider the following HTML: .border { border: 1px solid red; padding: 4px; width: 300px; } .border * { border: 1px solid blue; padding: 4px; text-align: center; } Block, DIVs ABC Block, SPANs ABC Block, Ps ABC If you were thinking like a web browser, the first and third div containers would render their contents vertically, but the middle div would render its contents horizontally, essentially treating each span as a letter. XD, however, will render as follows: The middle block is rendered vertically as well, even though span elements are inline elements. This is definitely not how a typical web browser would work, but then again, XD isn't a web browser! "},"reference/ui/layout/flex.html":{"url":"reference/ui/layout/flex.html","title":"Flexbox layout","keywords":"","body":"Flexbox Layout The flexible box layout module is a layout system provided in CSS, which is significantly more flexible than using block layout. The layout module provides the ability for elements to shrink and grow based on available space, and also provides methods for specifying how much space to provide around elements. The flexible box module specification is quite large, and covering the entire specification is out-of-scope for this reference. If you want all the details, please refer to the following documentation: A Complete Guide to Flexbox Basic concepts of flexbox CSS Flexible Box Layout CSS Flexible Box Layout Module Level 1 (W3C Specification) Enabling flexible layout There are two types of elements when using flexible layout. First, there is the containing element — this is called the \"flex container\". Then there is the element that is being positioned within the flex container which are called \"flex items\". To turn an element into a flex container, one applies display: flex to the element. The orientation of the element defaults to the horizontal or row orientation, but can be overridden by specifying flex-direction: row | column | row-reverse | column-reverse. Whether or not wrapping should be allowed is controlled with flex-wrap (which defaults to nowrap, but can be set to wrap and wrap-reverse). All direct descendants within a flex container are flex items automatically. The spacing and positioning of these elements is controlled using the following styles: justify-content: indicates the rules to apply to spacing on the main axis; defaults to flex-start align-content: indicates the rules to apply to spacing on the cross axis; defaults to stretch align-items: defaults to stretch align-self: defaults to auto How items stretch and position themselves is determined by the item's flex properties: flex-basis: indicates the size of the flex item (defaults to auto) flex-grow: indicates the growth factor of the flex item (in comparison to other flex items; defaults to 0) flex-shrink: indicates the shrink factor of the flex item (in comparison to other flex items; defaults to 1) It might help to visualize the above with some diagrams. First, let's look at the flex properties. In the following image, each box is being given a flex: 1 1 auto (or flex: 2 2 auto, depending on the number). As you can see, the items that received flex: 2 2 auto are larger than the flex: 1 1 auto counterparts. And the last item has a fixed flex-basis supplied, which override the default size calculation. Now, consider the following HTML and styles: .border { border: 1px solid red; padding: 4px; width: 300px; } .flex { display: flex; flex-direction: row; } .between { justify-content: space-between; } .around { justify-content: space-around; } .start { justify-content: flex-start; } .end { justify-content: flex-end; } .center { justify-content: center; } .border * { border: 1px solid blue; padding: 4px; margin: 0 4px; } FLEX, SPACE-BETWEEN ABC FLEX, SPACE-AROUND ABC FLEX, FLEX-START ABC FLEX, FLEX-END ABC FLEX, CENTER ABC Given the above, XD will generate the following rendition: As you can see, the spacing between flex items can also be controlled. Combined, the flexible size and spacing of items can enable very complex layout with only a little CSS. That said, it's important not to overuse flexbox layout. The calculations are significantly more complex than both block layout and relative or absolute positioning, and if you have a lot of elements rendered, performance may suffer. If you know the size of the flex item, you can speed up the calculations by using a non-auto value for flex-basis Unsupported styles and values The following values are unsupported for each style: Style Rule Unsupported Values justify-content start end left right space-evenly safe unsafe normal stretch align-content start end space-evenly safe unsafe normal baseline first last align-items start end self-start self-end safe unsafe normal baseline (*) first last align-self start end self-start self-end safe unsafe normal baseline (*) first last place-content No support gap No support column-gap No support row-gap No support flex-flow shorthand No support; use flex-direction and flex-wrap "},"reference/ui/layout/positioning.html":{"url":"reference/ui/layout/positioning.html","title":"Positioning","keywords":"","body":"Relative and Absolute Positioning You can use relative and absolute positioning to indicate exactly where elements are to be positioned. Relative positioning allows you to shift an element from its originally calculated position whereas absolute positioning takes the element out of the layout flow entirely, and allows you to position the element anywhere. Relative Positioning Relative positioning is enabled by specifying the position: relative style on an element. On its own, nothing much will happen (although it does have impacts on other positioned elements as we'll see). When combined with top, right, bottom and left styles, you can shift an element around. For example: .border { border: 1px solid red; padding: 4px; width: 300px; } .border * { border: 1px solid blue; padding: 4px; text-align: center; } .relative { position: relative; } .move { top: -12px; left: 12px; } A B C The following will be rendered: Element A is positioned normally. By default this is static positioning, meaning that it follows the regular layout rules. Element B is positioned relatively, but notice that it's in the same place you'd expect it to be in. This is because no offset has been applied. Element C, on the other hand, is positioned relatively and shifted up and left by twelve pixels. As you can see, C is free to overlap B. Also of import is the fact that the layout flow is otherwise undisturbed — the same amount of space will be reserved for C regardless of how much it is shifted out of its original position. Absolute Positioning Positioning an element absolutely with position: absolute immediately takes the element out of the regular layout flow. The layout will act as if the element simply doesn't exist. Instead, the element will be positioned relatively to its nearest positioned ancestor, and can be moved around using top, right, bottom, and left. If \"nearest positioned ancestor\" doesn't immediately make sense, that's OK. All it means it that an absolutely positioned element's (0, 0) coordinate is based on whichever element in its ancestry (parent, grandparent, etc.) is also positioned. If no elements are positioned, then (0, 0) is the upper left corner of the viewport. Absolute positioning is one of the fastest positioning methods, but is also the least flexible. Let's take a look at absolute positioning in action: .border { border: 1px solid red; padding: 4px; width: 300px; } .border * { border: 1px solid blue; padding: 4px; text-align: center; } .relative { position: relative; } .absolute { position: absolute; top: 0; left: 0; } .pos { top: 10px; left: 10px; } A B C D EF This will render as so: Notice that both A and B are still where we'd expect. But look at C and D — they're off in the upper left corner! That's because they have no positioned ancestors and so (0,0) refers to the top left corner. E is another relatively positioned element, so it makes sense that it would be below B, but notice: there's no extra space between B and E to account for C and D. As mentioned above, this is because absolutely positioned elements are taken out of the normal layout flow. Lastly, let's look at F – it's sitting at (10,10), but relative to E. This is what is meant by an element being positioned relative to its nearest positioned ancestor. In this case E is positioned (relatively), and so F's (0, 0) point is the top left corner of E. "},"reference/ui/layout/utility-classes.html":{"url":"reference/ui/layout/utility-classes.html","title":"Utility classes","keywords":"","body":"Utility Classes To assist with layout, there are two utility classes that are provided to you. row The row class will render the elements within in a row using the flexbox layout module. When building input fields with labels to the left (instead of above), consider adding align-items: center to the styles. .field { align-items: center; } Label column The column class will render the elements within in a column using the flexbox layout module. "},"reference/ui/elements/":{"url":"reference/ui/elements/","title":"Elements","keywords":"","body":"Elements Elements (or elements) are fundamental to your user interface. Buttons are used to invoke actions or dismiss dialogs. Buttons come in many different semantic styles, so it's easy to use the right button for the right occasion. Checkboxes provide the user with the ability to mark certain interface elements as selected. Dropdowns allow the user to select a single item from a list of items. Links will open the user's default web browser with the specified web address. Rules are used to visually segment your user interface. Sliders allow the user to pick a value from a finite range of values. Text fields enable the user to enter custom data. Tooltips are used to assist the user when an element's purpose may not be obvious. "},"reference/ui/elements/buttons.html":{"url":"reference/ui/elements/buttons.html","title":"Buttons","keywords":"","body":"Buttons Buttons can be clicked or tapped in order to initiate an action, trigger a command, or disclose previously hidden parts of the user interface. Buttons come in two flavors: pill buttons and action buttons. The pill buttons contain text, whereas the action buttons are typically used for icons and cases where you need to indicate the selected state of an icon. Buttons have multiple degrees of loudness (depending on your button's need for attention in the context of your user interface) and several variants for various uses (such as warnings or calls to action). Anatomy StandardQuietVariations (macOS)Variations (Windows) Usage You can render a button using the following: HTMLJSReactClick Me const button = document.createElement(\"button\"); button.textContent = \"Click Me\"; function render() { return ( Click Me ); } Variants There are several variants that you can specify by setting the uxp-variant attribute. Call To ActionPrimarySecondaryWarningAction ButtonThe \"call to action\" variant is intended to call out the action in the dialog that the user is encouraged to take. There should only ever be one of these in a dialog.There is no quiet variant of this button, since the intent of a call-to-action is to be obvious and draw the user's attention.Yes A primary button is used in place of a call-to-action button when the action itself is less prominent, or if there are multiple buttons with the same level of importance within the dialog. This variant supports a quieter (borderless) version.Create Create A secondary button is used in conjunction with other button variants to make other less prominent actions visible to the user. This variant supports a quieter (borderless) version.Cancel Cancel Warning buttons are used when the action is considered destructive. This variant supports a quiet (borderless) version.Warning buttons should never be the default buttons on a form (that is, the action that is invoked when the user presses ENTER to dismiss a dialog).Delete Delete Action buttons can be used to trigger actions within the dialog. These come in different variations and can include icons. Quiet (borderless) options are also available. Action buttons can also be \"selected\" when clicked. When used as a group, this ability to be selected can be used to indicate grid and list views, for example.Action buttons are often used to render icons. You should ideally have your icon as a 28x28 PNG file (for high DPI displays; use 14x14 for lower density displays). If you use a different size, Action buttons will resize, but the results may not be desirable. Note that XD will attempt to automatically use any available high DPI variants of an icon (i.e., it will automatically use @2x and @3x files automatically).Repeat Grid Repeat Grid Repeat Grid Layout How buttons are rendered will depend upon the layout of their container. Consider the following HTML and resulting rendering. HTMLmacOSWindows .wrap { flex-wrap: wrap; } BLOCK LAYOUT BUTTONS (Avoid) Hello BUTTONS IN FLEX HelloThere BUTTONS VARIANT IN FLEX Click me Click me Click me Click me QUIET BUTTONS VARIANT IN FLEX Click me Click me Click me BUTTONS VARIABLE WIDTHS, WRAPPING OK Short Medium Text Really long click button As you can see, buttons are, by default rendered in block layout. This results in very wide buttons, which aren't ideal. The remainder of the buttons are rendered in flex containers (see Flexbox layout). When rendered within flex containers, buttons will respect the stretching and positioning, but by default buttons will shrink to fit their textual content. If you need a specific width, you can assign a width style, but it is important to be aware that elements render with different metrics on macOS and Windows. Guidelines When using buttons, you should consider your user's experience and utilize the variants and loudness options to ensure your user knows what to expect when they click or tap on a button. Pill Button Guidelines Which Button Variant Should I Use? Avoid combining more than two different variants within a single dialog. The primary button should be a \"call to action\" button (uxp-variant=\"cta\"), a primary button (uxp-variant=\"primary\"), or a warning button (uxp-variant=\"warning\"). Other, lower promiment actions should use buttons of a similar lower variation (so, \"secondary\" or a quiet version). If there are multiple buttons within a dialog, there should be only one \"call to action\" button. This button is intended to attract the user's attention, and as such, it should be used for the primary action. Don't choose button types randomly; apply some thought to the user's experience when they use your dialog. Do give prominence to the main action by using a \"call to action\" button. Don't use more than two button variations in a group. Button Order You should prefer the button order that the platform your plugin is running on utilizes. macOS and Windows utilize different button orders. macOS, for example, will place the primary action in the lower right corner of a dialog, whereas on Windows, the same location is typically reserved for a cancel button. On XD, button order is determined automatically when placed within a element. The element assumes that your button order is in the macOS order, and will reverse the order when the plugin is running on Windows. This works well when there are only one or two buttons in a dialog footer, but doesn't work for all situations. In that case, you'll need to override the button order. Show me how to override the button order.import React from \"react\"; const platform = require(\"os\").platform(); const isWindows = platform.toLowerCase().substr(0,3) === \"win\"; function render() { return ( { isWindows ? ( Save Don't Save Cancel ) : ( Don't Save Cancel Save ) } ); } Follow Capitalization Rules Button text should be in title case. Don't use all capital letters to call attention to a button. (e.g., \"EXPORT ARTBOARD\") Don't use all lowercase letters. (e.g., \"export artboard\") Don't use sentence case. (e.g., \"Export artboard\") Do use title case. (e.g., \"Export Artboard\") Be Concise Your users should be able to infer the button's intent quickly. Button text should usually be one or two words long, and no more than four words. Don't use punctuation. Don't use punctuation in your buttons. (e.g., \"Export Artboard Now!\") Don't use long text. (e.g., \"Export Artboard To Your Storage Device\") Do keep the text short. (e.g., \"Export Artboard\") Use Clear Text Don't make your user guess as to what the button will do when they tap or click it. Avoid ambiguous phrasing like \"Yes\", \"Ok\", etc. Don't use ambiguous wording such as \"Yes\", \"No\", \"Ok\", etc. Do use clear, concise wording such as \"Save\", \"Don't Save\", \"Create\", etc. Button Width Buttons should be only slightly wider than the text within them (unless the text is extremely short). Don't fill a dialog with a button that stretches across the dialog. Don't stretch or apply width to a button. Button Icons Pill buttons don't support icons. In-Dialog Button Alignment Buttons should be aligned to the lower right corner of dialogs. Don't center or left-align your buttons in a dialog. Do align your buttons to the lower right corner in a dialog. Buttons with Context Menus (Popovers) Buttons that display a popover (context) menu should be the beginning of an action phrase. For example, if a button can create multiple types of shapes, the button itself could be named \"Create\" and the items in the popover could be \"Rectangle\", \"Circle\", etc. Action Button Guidelines Icon-only Action Buttons When only icons are used in an action button, the user can be left guessing as to what the button actually does. Consider using a tooltip to allow the user some insight into what the button will do before the user commits to clicking it. Show me how to add a tooltip to an icon-only action button. Isolated Action Buttons If you have an icon-only or text-only action button that is isolated from other buttons in your dialog, consider using the standard (non-quiet) version so that it's obvious that the control is indeed a button. Keyboard Interaction Key Action SPACE Clicks the button. ENTER Clicks the button. TAB Moves to the next focusable element. SHIFT+TAB Moves to the previous focusable element. Event Handling When clicked, buttons will fire the click event. You can listen to this in a couple of ways: Assign a handler to the onclick property. Call HTMLButtonElement#addEventListener to register a handler for the click event. JSReactconst button = document.createElement(\"button\"); button.textContent = \"Click Me\"; button.addEventListener(\"click\", evt => { // handle the button click here console.log(\"Clicked!\"); // if you need to cancel the default action, call evt.preventDefault() }); const React = require(\"react\"); function clickHandler(evt) { // handle the button click console.log(\"Clicked!\"); // if you need to cancel the default action, call evt.preventDefault() } render() { return ( Click Me ); } When a button of type=\"submit\" or uxp-variant=\"cta\" is present in a form, its click handler will be called if the user presses ENTER when not already focused on a button. Styling Buttons accept a limited amount of styling. You cannot change the following styles: Height Font family, weight, or text color Padding of text Color of the border around the button, or the color of the icon inside Attributes Supported Attributes disabled type: submit, reset, button uxp-variant: action, cta, primary, secondary, warning uxp-quiet: true uxp-selected: true autofocus: autofocus Unsupported Attributes autocomplete form formaction formenctype formmethod formnovalidate formtarget name value Known Issues At this point, XD does not support rendering buttons as input tags. All of the following are unsupported, and will render as regular text input fields: Buttons do not receive keyboard or pointer events. "},"reference/ui/elements/checkboxes.html":{"url":"reference/ui/elements/checkboxes.html","title":"Checkboxes","keywords":"","body":"Checkboxes Checkboxes allow a user to select one or more items from a group (or toggle an individual item on and off). Unlike some other controls, checkboxes only come in a standard variety. Anatomy StandardExample (macOS)Example (Windows) Usage You can render a checkbox using the following: HTMLJSReact .row { align-items: center; } Preserve aspect ratio Preserve aspect ratio const labelWrapper = document.createElement(\"label\"); labelWrapper.className = \"row\"; labelWrapper.style.alignItems = \"center\"; const checkbox = document.createElement(\"input\"); checkbox.setAttribute(\"type\", \"checkbox\"); checkbox.checked = true; const label = document.createElement(\"span\"); labelWrapper.appendChild(checkbox); labelWrapper.appendChild(label); function render() { return ( Preserve aspect ratio Preserve aspect ratio ); } Indeterminacy Checkboxes can be in an indeterminate state. This can be set only via the indeterminate property (not an attribute). If set to true, the checkbox will display with a dash instead of a checkmark (or lack thereof). Indeterminacy is orthogonal to the checkbox's checked state. Changing the checkbox's state will not change the controls indeterminate state. Keyboard Key Action SPACE Toggles the checkbox ENTER Toggles the checkbox TAB Navigates to the next focusable control SHIFT+TAB Navigates to the previous focusable control Styling Checkboxes accept a limited amount of styling. You cannot change the following styles: Height Color of the checkmark or checkbox Attributes Supported Attributes disabled type: checkbox checked: true autofocus: autofocus Unsupported Attributes autocomplete form formaction formenctype formmethod formnovalidate formtarget name value Supported Events change click Known Issues Checkboxes do not receive keyboard or pointer events. Checkboxes may fail to render correctly if in a scrollable container. To work around this issue, make sure the containing element has a background color. (transparent does not count; macOS only.) It is not currently possible to set a checkbox to checked without also passing a value to the attribute. This means will fail to render a checked checkbox. Instead you must use In React, checkboxes do not trigger change events. You can use a ref instead to assign an event handler. return ( el && el.addEventListener(\"change\", e => this.onchecked(e))} /> ); "},"reference/ui/elements/dropdowns.html":{"url":"reference/ui/elements/dropdowns.html","title":"Dropdowns","keywords":"","body":"Dropdowns Dropdowns (or select lists) allow the user to select an item from a dropdown list. There are various loudness options available. Anatomy Standard and QuietExample (macOS)Example (Windows)HTML .row { align-items: center; } Select First value Second value Last value Select First value Second value Last value Select First value Second value Last value Select First value Second value Last value Usage You can render a typical dropdown using the following: HTMLJSReact Target Artboard Icon Thumbnail Preview Target Artboard Icon Thumbnail Preview const labelWrapper = document.createElement(\"label\"); const label = document.createElement(\"span\"); label.textContent = \"Target Artboard\"; const select = document.createElement(\"select\"); select.uxpQuiet = true; // if you want a quiet dropdown const options = [ [\"artboard-1\", \"Icon\"], [\"artboard-2\", \"Thumbnail\"], [\"artboard-3\", \"Preview\"] ].map(([val, text]) => { const el = document.createElement(\"option\"); el.setAttribute(\"value\", val); el.textContent = text; return el; }); options.forEach(opt => select.appendChild(opt)); labelWrapper.appendChild(label); labelWrapper.appendChild(select); function render() { return ( Target Artboard Icon Thumbnail Preview Target Artboard Icon Thumbnail Preview ); } Guidelines Include a Label Dropdowns should always have a label — otherwise the dropdown can be ambiguous. There are occasions where context may make what the dropdown does obvious (for example, a sort-by dropdown). Label Position Ensure that the label is rendered above or to the left of the dropdown. When rendering labels to the left, you can use code like the following: .row { align-items: center; } Order ... Truncation Avoid truncating items by ensuring that the dropdown is wide enough for the longest item. Capitalization The dropdown's label should use title case, while the items themselves should use sentence case. Keyboard Key Action SPACE Displays the dropdown (if closed) or selects the highlighted item UP ARROW Displays the dropdown (if closed) or selects the previous item in the select list DOWN ARROW Displays the dropdown (if closed) or selects the next item in the select list ENTER Submits the active form (if dropdown is closed) or selects the highlighted item TAB Navigates to the next focusable control SHIFT+TAB Navigates to the previous focusable control Styling Dropdowns accept a limited amount of styling. You cannot change the following styles: Minimum width Font family, color, or weight Height Position of the chevron Color of the dropdown's border or chevron Background color Attributes Supported Attributes disabled value autofocus: autofocus uxp-quiet: true Unsupported Attributes autocomplete form formaction formenctype formmethod formnovalidate formtarget name Supported Events change Known Issues Dropdowns do not receive keyboard or pointer events. does not show the value as selected. Instead, get a reference to the element and call setAttribute(\"value\", …). tags must have a value attribute, or referencing the select's value property will return undefined. tags do not support selected or disabled attributes. "},"reference/ui/elements/links.html":{"url":"reference/ui/elements/links.html","title":"Links","keywords":"","body":"Links Links are used to open the user's default web browser to the specified web address. Links should be short and concise while also avoiding ambiguity. Example (macOS)Example (Windows)HTMLGo from concept to prototype with Adobe XD, the all-in-one UX/UI solution for designing websites, mobile apps, and more. Learn more about Adobe XD. Guidelines Where to Use Links Don't put links inside of headers. Note that because XD doesn't support inline layout, it isn't possible to put links inline with other content. If you do so, the link will render as a block element. Provide Context Don't just use link text like \"click here\". Give the user some context as to what your link will do. "},"reference/ui/elements/rules.html":{"url":"reference/ui/elements/rules.html","title":"Rules","keywords":"","body":"Rules Rules are used to visually segment your user interface. There are three variations of rules. Example (macOS)Example (Windows)HTMLLarge Rule Normal Rule Small Rule Usage The standard sized rule is created whenever you use the tag: You can control the size of a rule by using the small and large classes. Guidelines Using Rules with Titles Place rules below titles, not above them. A large rule should always be accompanied with text, although the other rule sizes can be on their own. Don't Overuse Rules Too many rules can be visually confusing. Keep it simple by restricting the number of rules you use. "},"reference/ui/elements/sliders.html":{"url":"reference/ui/elements/sliders.html","title":"Sliders","keywords":"","body":"Sliders Sliders allow the user to pick from a continuum of values between a minimum and maximum value. Slider values are continuous by default, but may be discrete if desired (using the step attribute). Consider using text areas when the range of values is very wide, or when typing a value will be more precise than dragging a handle. Anatomy StandardExample (macOS)Example (Windows)HTML .colorrow { display: flex; flex-direction: row; align-items: center; } .colorrow span { flex: 0 0 32px; } .colorrow input[type=text] { flex: 0 0 64px; } .colorrow input[type=range] { flex: 1 1 auto; } .spread { justify-content: space-between; } Opacity 50% Heading Level 3 PICK A COLOR R G B Usage You can render a typical dropdown using the following: HTMLJSReact .spread { justify-content: space-between; } Opacity 50% const labelWrapper = document.createElement(\"label\"); const label = document.createElement(\"span\"); label.textContent = \"Opacity\"; const displayValue = document.createElement(\"span\"); displayValue.textContent = \"50%\"; const labelAndDisplay = document.createElement(\"div\"); labelAndDisplay.className = \"row\"; labelAndDisplay.style.justifyContent = \"space-between\"; labelAndDisplay.appendChild(label); labelAndDisplay.appendChild(displayValue); const slider = document.createElement(\"input\"); slider.setAttribute(\"type\", \"range\"); slider.setAttribute(\"min\", \"0\"); slider.setAttribute(\"max\", \"100\"); slider.setAttribute(\"value\", \"50\"); labelWrapper.appendChild(labelAndDisplay); labelWrapper.appendChild(slider); function render() { return ( Opacity 50% ); } Guidelines Include a Label and a Value Sliders should always have a label and value. The value may be simple text, or it may be an editable text field (such as in a color picker). Label and Value Position Ensure that the label is rendered above or to the left of the dropdown. When rendering labels to the left, render the value to the right. Value Units Be sure to include the appropriate unit (such as a percent sign or \"px\", \"in\", etc.), unless rendering the value in a text field. Positive and Negative Values Be sure to include the sign on all values. When using a text-only display, add a space between the sign and the value for readability (e.g., \"- 32%\" or \"+ 64%\"). When using a text field, display the sign, but there's no need for an intervening space. Capitalization The slider's label should use title case. Keyboard Key Action UP ARROW Increases the slider's value (the amount is platform-dependent) RIGHT ARROW Increases the slider's value (the amount is platform-dependent) LEFT ARROW Decreases the slider's value (the amount is platform-dependent) DOWN ARROW Decreases the slider's value (the amount is platform-dependent) ENTER Submits the active form TAB Navigates to the next focusable control SHIFT+TAB Navigates to the previous focusable control Styling Sliders accept a limited amount of styling. You cannot change the following styles: Height Color of the slider's track, fill, or handle Attributes Supported Attributes disabled value min: the minimum value max: the maximum value step: if specified, the slider will return discrete values snapped to this value autofocus: autofocus Unsupported Attributes autocomplete form formaction formenctype formmethod formnovalidate formtarget name Supported Events change Known Issues Sliders do not receive keyboard or pointer events. "},"reference/ui/elements/textfields.html":{"url":"reference/ui/elements/textfields.html","title":"Text fields","keywords":"","body":"Text Fields Text fields allow user input for custom values. Text fields can be single or multi-line input fields, and come in various degrees of loudness. Anatomy StandardExample (macOS)Example (Windows)HTML Usage You can render a typical single-line textfield using the following: HTMLJSReact Layer Name const labelWrapper = document.createElement(\"label\"); const label = document.createElement(\"span\"); label.textContent = \"Layer Name\"; const textfield = document.createElement(\"input\"); textfield.setAttribute(\"type\", \"text\"); textfield.setAttribute(\"placeholder\", \"Enter a layer name\"); labelWrapper.appendChild(label); labelWrapper.appendChild(textfield); function render() { return ( Layer Name ); } Variations and Loudness Text fields have a standard rendition (with borders) and a quiet rendition (with a border at the bottom of the control). This is controlled with the uxp-quiet attribute. If uxp-quiet is omitted, the text field will draw with a border around the entire control. If uxp-quiet is true, the text field will draw with only a border at the bottom of the control. Single line text fields are created using the input type=\"text\" tag. Multiline text fields are created using the textarea tag, like so: Default text value here HTML5 allows you to specify the width and height of a textarea element using the rows and cols attributes. XD only uses the width and height styles. .top { align-items: flex-start; } textarea { height: 64px; } Text Hello Text Hello Text Hello Text Hello --> Guidelines Include a Label Text fields should always have labels, otherwise it is difficult for the user to discern what the field expects. Label Position Typically, labels should be above the text field and positioned to the left. You can also position labels directly to the left if you need. Left-positioned label example .field { align-items: center; } Layer Name Minimum Width Text fields should not be sized so much smaller than the typically expected value. Narrow text fields require a lot of user scrolling, and can lead to user confusion because the entire value may not be visible. Capitalization The text field labels should be in title case. Placeholder text should be in sentence case. Keyboard Key Action ENTER Submits the active form TAB Navigates to the next focusable control SHIFT+TAB Navigates to the previous focusable control Styling Text fields accept a limited amount of styling. You cannot change the following styles: Color of the border or the background color The font family, weight, or size The padding within the text area Attributes Supported Attributes autofocus: autofocus disabled: disabled readonly: readonly value Unsupported Attributes autocomplete form formaction formenctype formmethod formnovalidate formtarget name defaultValue minlength maxlength capture inputmode list min max multiple pattern required size spellcheck step tabindex usemap Supported Events change Known Issues Text fields do not receive pointer events. Validation is not currently supported. The following input type values are not supported, and will render as a regular text field: button, color, date*, email, file, hidden, month, number, password, radio, reset, search, submit, tel, time, url, week "},"reference/ui/elements/tooltips.html":{"url":"reference/ui/elements/tooltips.html","title":"Tooltips","keywords":"","body":"Tooltips Tooltips are used to provide additional context or help about an element. They appear when the user hovers over the item with their mouse for a short period o time. Tooltips are automatically enabled when you use the title attribute with an element. For example: Guidelines When to Use Tooltips Don't use tooltips when the context or intent is already clear. For example, a \"Print\" button doesn't need a tooltip. Use tooltips when iconography is present without corresponding visual text. For example, a warning icon could have a tooltip that indicates that a field is invalid. Maximum Size Tooltips should be as short and concise as possible. Keep tooltips to a few words. "},"reference/ui/dialogs/":{"url":"reference/ui/dialogs/","title":"Modal dialogs","keywords":"","body":"Dialogs A modal dialog is used to display important information and ask for user input. XD Plugins can display user interface in the form of modal dialogs. Dialogs appear over the XD document, and prevent further interaction with the underlying document. Dialogs are dismissed in any one of the following manners: The user presses the ESC key The user presses ENTER (assuming the plugin supplies an onsubmit handler) The user clicks or touches a button designed to dismiss the dialog. Dialogs are highly intrusive, and should only be used when absolutely necessary. Anatomy DialogmacOSWindows Usage When it comes to building the user interface, XD exposes an API surface that looks and feels a lot like what you would get in a web browser, namely: HTML5 DOM (Document Object Model) API CSS JavaScript These APIs and standards can be used to create compelling user interfaces, even inside modal dialogs. The above example is a typical modal dialog. Modal dialogs consist of: A dialog element () that is added to the DOM and contains everything that follows A form element () that wraps around the content of the dialog A heading (), which may also display the plugin's icon A horizontal rule () Some body content A footer () with one or more buttons () The margins and padding that surround the structure are provided automatically. There is generally no need to specify or override these margins in your own user interface, unless you want to do so. Building Modal Dialogs You can build modal dialogs using any method that creates an HTML5 DOM structure. This means you can use document.createElement, innerHTML, jQuery, React, and other frameworks. Let's examine a simple dialog and how we might create it. SampleHTMLJSReact #dialog form { width: 360px; } .h1 { align-items: center; justify-content: space-between; display: flex; flex-direction: row; } .icon { border-radius: 4px; width: 24px; height: 24px; overflow: hidden; } Create Shape Please enter the kind of shape you'd like to create. You can also include additional options by separating them with spaces. Shape Cancel Create let ourDialog; function showOurDialog() { if (!ourDialog) { ourDialog = document.createElement(\"dialog\"); ourDialog.innerHTML = ` form { width: 360px; } .h1 { align-items: center; justify-content: space-between; display: flex; flex-direction: row; } .icon { border-radius: 4px; width: 24px; height: 24px; overflow: hidden; } Create Shape Please enter the kind of shape you'd like to create. You can also include additional options by separating them with spaces. Shape Cancel Create `; } return ourDialog.showModal(); } const React = require(\"react\"); const ReactDOM = require(\"react-dom\"); function Form() { const styles = { form: { width: 360; }, h1: { alignItems: \"center\"; justifyContent: \"space-between\"; display: \"flex\"; flexDirection: \"row\"; }, icon: { borderRadius: 4; width: 24; height: 24; overflow: \"hidden\"; } }; return ( Create Shape Please enter the kind of shape you'd like to create. You can also include additional options by separating them with spaces. Shape Cancel Create ); } let ourDialog; function showOurDialog() { if (!ourDialog) { ourDialog = document.createElement(\"dialog\"); } ReactDOM.render(, ourDialog); return ourDialog.showModal(); } function render() { return ( Click Me ); } Once a dialog is built, you will need to manage its lifecycle: Showing a Modal Dialog Dismissing a Modal Dialog Variations Alert A simple \"alert\" can be used to display a message along with a Close button. You can customize the content of the title and message, but you cannot customize the button itself. E## Error An error \"alert\" (with a red heading). These are useful for rendering error messages. Just like regular alerts, you cannot customize the button itself. Confirmation Confirmation dialogs display a message and two buttons. The user is free to pick which of the buttons they wish to invoke. Do not use confirmation dialogs for destructive actions. Warning Warning dialogs display a message and two buttons, one of which is destructive. Pressing ENTER in this case should not invoke the destructive action. Otherwise it is the same as a confirmation dialog. Prompt Prompts display a single line text field in addition to a message and two buttons. Guidelines You should always strive to provide a good user experience with a modal dialog. That means providing easy access to dismissive buttons, avoiding dark patterns, and ensuring that your dialog doesn't block the user from forward progress in their work. You should definitely read up on the experience guidelines to learn more about what to do and what not to do. When to Use Dialogs Dialogs are very intrusive to the user's workflow. As such, you should consider their use very carefully. Don't display a \"success\" dialog when the result of the plugin is obvious to the user. Do display a \"success\" dialog when the result of the plugin is not obvious to the user (such as data being sent to a remote endpoint.) Don't fail silently — let the user know what went wrong and how they can fix it by showing a modal dialog. No Nested Dialogs You should avoid nesting dialogs within other dialogs. The only exception to this guideline is when displaying file or folder pickers. Three Buttons In general, try to strive to avoid dialogs with lots of buttons in the footer. You should try to use up to three buttons in the footer. Dismissive Buttons Dismissive dialog buttons live within a footer element. Within the footer, you can have any number of buttons, but you should follow these guidelines when defining variants (which you can use to indicate if a button is the default or is destructive): uxp-variant=\"cta\" indicates that the button is a \"call to action\". This is typically used for the default action. You should only have one of these buttons in a dialog. uxp-variant=\"primary\" indicates the button is a \"primary\" button. This is the default if uxp-variant is not specified. uxp-variant=\"secondary\" indicates the button is a \"secondary\" button. It receives a lighter color than primary buttons. uxp-variant=\"warning\" indicates that the button will trigger a destructive action. This button should not be the default action. Dismissive buttons should always be visible on screen without scrolling. If a dismissive button isn't visible, the user may think they are trapped in the dialog. Dismissal by other means You should avoid dismissing a dialog using other means, including action buttons, checkboxes, etc. Keyboard Interaction Key Action ENTER Submits the dialog's form ESC Cancels the dialog TAB Moves to the next focusable element. SHIFT+TAB Moves to the previous focusable element. Known Issues Large dialogs on small screens (or in small windows) do not scroll automatically and will clip. You should apply a fixed height to your dialogs. Dialogs are neither movable nor resizable. It is not possible to show multiple dialogs at once, except for file and folder pickers. It is not possible to intercept the ESC gesture when dismissing a dialog. Dialogs are always dismissible using ESC. When TABing in Windows 10, the focus border may appear incorrectly on some elements. On Windows 10, the tab order in a dialog's footer may be reversed. The background color is different on Windows and macOS. On macOS, it is #F5F5F5, and on Windows it is #FFFFFF. "},"reference/ui/dialogs/showing.html":{"url":"reference/ui/dialogs/showing.html","title":"Showing dialogs","keywords":"","body":"Showing a Modal Dialog Dialogs are shown using the HTMLDialogElement#showModal method. This method will render the dialog. The method will return a Promise, which you can use to easily wait for the dialog to be dismissed. dialog.showModal() .then(result => { // handle dialog result // if canceled by ESC, will be \"reasonCanceled\" }); The dialog element must be present in the DOM before showing it. If it isn't, the method will throw an exception. It's important to note that you can only show one dialog at once. You should always close or dismiss a dialog first and then wait for the dialog's promise to resolve before showing another one. "},"reference/ui/dialogs/dismissal.html":{"url":"reference/ui/dialogs/dismissal.html","title":"Dismissing dialogs","keywords":"","body":"Dialog Dismissal Dialogs can be dismissed in the following ways: Manually, by the user pressing the ESC key Programmatically, by calling HTMLDialogElement#close with an optional return value. You can listen for the default gesture (typically [ENTER]) by registering for the submit event on the form: function onsubmit(e) { dialog.close(\"ok\"); e.preventDefault(); } form.onsubmit = onsubmit; You should also register a click handler for your \"OK\" and \"Cancel\" buttons: const cancelButton = document.querySelector(\"#cancel\"); cancelButton.addEventListener(\"click\", () => dialog.close(\"reasonCanceled\")); const okButton = document.querySelector(\"#ok\"); okButton.addEventListener(\"click\", e => { onsubmit(); e.preventDefault(); }); You can listen for the dialog's dismissal using the close event on the dialog: dialog.addEventListener(\"close\", () => { // dialog is closed at this point }); Preventing Dialog Dismissal You can, in some cases, prevent a dialog dismissal. If the form calls preventDefault on the submit event, the dialog will fail to dismiss. It is not possible to cancel a dismissal triggered by the ESC gesture. "},"xdpegs/":{"url":"xdpegs/","title":"XD Plugin Experience Guidelines","keywords":"","body":"XD Plugin Experience Guidelines Providing a great experience for users of your plugin is important, especially because the audience is comprised of discriminating experience designers around the world. The XD Plugin Experience Guidelines (or XDPEGs) are here to help set you up for success in providing a plugin experience that rises to the high expectations of XD users. Introduction 1.0 Performance 2.0 Working with the Scenegraph 3.0 Network I/O 4.0 File I/O 5.0 User Interface "},"xdpegs/intro.html":{"url":"xdpegs/intro.html","title":"Introduction","keywords":"","body":"XD Plugin Experience Guidelines The XD Plugin Experience Guidelines (XDPEGs) can be used to ensure that your plugin is functional in a variety of edge cases and provides a good experience to your end users. While it’s not a hard-and-fast requirement that you follow the XDPEGs when submitting your plugin for review to the Plugin Manager, it is highly suggested that you try to follow the guidelines when and where it makes sense. Doing so ensures that your users have a good experience with both your plugin and Adobe XD itself. You aren’t required to follow the XDPEGs when building plugins for you, your team, or your enterprise. It’s still suggested that you do follow them when sharing your plugin, however, because we’ve tried to identify the common guidelines that ensure for a good user experience. "},"xdpegs/1-performance.html":{"url":"xdpegs/1-performance.html","title":"1.0 Performance","keywords":"","body":"1.0 Performance One of Adobe XD's core tenants is performance. As such, your plugin should be as performant as possible, and should avoid introducing bottlenecks or impediments to your user's workflow. 1.1 Startup Adobe XD executes your plugin’s main JavaScript file whenever it is launched or a new document is opened or created. This is done to determine the various entry points and handlers your plugin provides. As part of this process, your plugin could conceivably perform other work at startup. You should avoid running arbitrary code at startup because this slows down loading all of the user’s plugins. (1.1.1) Test creating a blank document with your plugin installed. Ensure that creating a new document is as fast as it was when no plugins were installed. (1.1.2) If your plugin has a lot of code, parsing that code may take more than 10ms. Consider using a bundler to minify and split your code, using lazy loading as appropriate. You should also avoid displaying any user interface or launching an external URL during startup. (1.1.3) Never render a modal dialog during startup. (1.1.4) Never open a URL during startup. While performing I/O is a great way to load user preferences, ping a backend server, etc., this can cause delays during startup. Instead, handle your I/O tasks lazily — only performing the I/O when needed. For example, when loading user preferences, load them on the first invocation of your plugin, rather than at startup. (1.1.5) Avoid performing I/O at startup. 1.2 While Idle It is possible to execute your code asynchronously, and as such, you could schedule actions to occur in the future. It is important, then, not to throw up obstacles or impediments to the user's workflow unless they have explicitly initiated an action that results in such a behavior. (1.2.1) Never open a modal dialog when the user has not triggered a plugin action using a menu item or other method. (1.2.2) Never open a URL when the user has not triggered a plugin action using a menu item or other method. (1.2.3) Never put the user's machine into a hard loop while idle. This can waste battery life, slow down XD and other plugins, and cause other disturbances. 1.3 While Executing Your plugin should strive to perform its tasks as quickly as possible. What this means depends largely upon your plugin, but you should avoid blocking the user for a significant period of time without providing some means of cancellation. There are also two modes of execution: synchronous (blocking) and asynchronous. You should avoid running synchronous (blocking) code for more than any longer than necessary, since the user can't interact with your plugin or their document while your plugin is processing. (1.3.1) Avoid blocking the user for more than a couple seconds. (1.3.2) If your plugin needs several seconds to work, provide the user a way to cancel the operation. (1.3.3) If your plugin is going to take some time to complete, consider providing a progress indicator. "},"xdpegs/2-scenegraph.html":{"url":"xdpegs/2-scenegraph.html","title":"2.0 Scenegraph","keywords":"","body":"2.0 Interacting with the Scenegraph The scenegraph is a tree structure that represents the user’s document. You can use XD’s scenegraph module to manipulate the scenegraph. However, while doing so, there are some important guidelines to consider. 2.1 Don’t be destructive without permission Your plugin shouldn’t remove content from the scenegraph without the user’s permission. If an action is destructive, always ask for permission using a modal dialog first, and ensure that the button you use is a warning variant. (2.1.1) Ensure that your plugin is never destructive without permission (2.1.2) When using buttons that are destructive, always use the warning variant. 2.2 Handle selections (or lack thereof) properly Your plugin may be invoked in a variety of conditions. Your plugin should never fail silently — this gives the user the impression that they weren’t “heard” or “understood,” and will likely trigger the invocation again. The user may become confused as to why the plugin works in certain conditions and fails in others and blame your plugin, XD, or even blame the combination of installed plugins. (2.2.1) Your plugin should never fail silently if there is no active selection. Inform the user what the plugin expects via a modal dialog. (2.2.2) Your plugin should never fail silently if the active selection isn’t what your plugin expects. Inform the user what the plugin expects to be selected via a modal dialog. (2.2.3) Your plugin should be able to handle one or more selected items. How your plugin handles multiple items will depend upon what the plugin does. If it applies a style, for example, it should apply the same style to each selected item. (2.2.4) Your plugin should ignore selected items it can’t process. If that is representative of the entire selection, your plugin should tell the user that it found no items to process using a modal dialog. It’s also possible that your plugin can modify the user’s selection. (For example, commands.group). Your plugin should not do this unless it is something the user will expect. (2.2.5) Don’t modify the user’s selection unexpectedly. Finally, there may be cases where the selection changes between asynchronous execution phases in your plugin. You should ensure that you capture the initial selection separately and then compare the current selection before making changes. (2.2.6) Capture the initial user selection (selection.items.map(i => i)) (2.2.7) Compare the initial selection before doing any work after an asynchronous operation. If the selection differs from what you expect, fail and display a message like “Could not complete operation due to change of selection” to the user. (2.2.8) Never modify the document after an unexpected selection change. 2.3 Working with Artboards (or lack thereof) Your plugin should be able to handle the condition where there is no artboard, one artboard, or multiple artboards present in the document. (2.3.1) Your plugin should never fail silently if there is no artboard present. It can create an artboard if needed, or prompt the user to do so using a modal dialog. (2.3.2) Your plugin should never fail if there is an artboard present. (2.3.3) Your plugin should never fail if there are multiple artboards present. (2.3.4) Your plugin should never fail if there are multiple artboards selected. (2.3.5) When adding content to an artboard, the content should remain within the artboard’s bounds. Be sure to test in a document with only one artboard and in another document with two or more artboards. 2.4 Working with the Edit Context The edit context is the editable context within the scenegraph. Editing nodes outside the edit context will throw an exception. Your plugin should handle these exceptions if they occur. (2.4.1) Ensure your plugin never makes edits outside of the current edit context (2.4.2) If your plugin attempts to make edits outside of the current edit context, it must always handle the resulting error, and must never simply fail silently. (2.4.3) It is not suggested that you ungroup and regroup items in order to work around the edit context limitations. Doing so can lose various settings, including whether or not an item is marked for export and other metadata. This is a violation of guideline 2.0.1. 2.5 Handle gradients and other fills When working with shapes, it may be tempting to extract the color values without checking the type of fill. Doing so may cause your plugin to fail silently. What you do with non-solid colors is up to you, but your plugin shouldn't fail silently. (2.5.1) Handle shapes filled with bitmap data (2.5.2) Handle shapes filled with a linear gradient (2.5.3) Handle shapes filled with a radial gradient 2.9 Know when to use asynchronous logic If your plugin can execute quickly and has no need of I/O or UI, then you can modify the scenegraph synchronously. This is the easiest way to build a plugin. However, if your plugin takes a considerable amount of time to operate or uses any asynchronous API (and then needs to work with the scenegraph), you’ll need to use XD’s asynchronous scenegraph handling. (2.9.1) Synchronous plugins should execute quickly (less than 2s). If this is not possible, throw up a dialog indicating that the operation will take some time, and provide some indication of progress. (2.9.2) Modifying the scenegraph after any I/O or UI is displayed must always be asynchronous. (2.9.3) Your plugin should never fail with the error “Plugin id is not permitted to make changes from the background. Return a Promise to continue execution asynchronously.\" "},"xdpegs/3-network-io.html":{"url":"xdpegs/3-network-io.html","title":"3.0 Network I/O","keywords":"","body":"3.0 Network I/O Interacting with the network is a useful feature — you can communicate with remote or local servers to transmit data, images, and more. However, this can be an area with a lot of edge cases, error conditions, and more, so it is wise to be diligent with your logic. 3.1 Always use SSL/TLS when communicating with remote endpoints You should never transmit data in the clear. This means that your plugin should only ever target https:// or wss:// endpoints. (3.1.1) Your plugin must always use https or wss when communicating with remote endpoints. 3.2 Correctly handle online/offline and failure states If your plugin requires network access in order to function, you should be sure that your plugin works correctly if there is no route to your remote endpoint, or if the network is flaky or down for some reason. (3.2.1) Network requests must always have reasonable timeouts in case of network issues. (3.2.2) Your plugin should never assume that your host is available just because the network appears to be online. The user may be on a network without outside access. (3.2.3) If your plugin requires access to a remote host in order to function, the plugin should always notify the user upon invocation when there is no route present to the host rather than failing silently. (3.2.4) If a network request fails, your plugin should always attempt to recover gracefully (perhaps including retrying the attempt). If no recovery is possible, always inform the user instead of failing silently. 3.3 Handle long network requests If you expect that your plugin may make a network request that takes a considerable amount of time, don’t leave your user in doubt! Keep them up-to-date with your plugin’s progress, and provide a way to cancel the operation. (3.3.1) If a network request may take a considerable amount of time, display a progress UI. (3.3.2) Allow network requests to be cancellable. 3.9 Privacy Implications Sending the user’s data or analytics information to a remote endpoint has a whole host of privacy implications in today’s world, especially with the recent introduction of GDPR in Europe. (3.9.1) If your plugin sends data of any sort to a remote endpoint, your plugin should have a privacy statement. Where this is displayed is up to you (website, plugin’s “about” screen, etc.) (3.9.2) Plugin analytics should be configurable and opt-in. "},"xdpegs/4-file-io.html":{"url":"xdpegs/4-file-io.html","title":"4.0 File I/O","keywords":"","body":"4.0 File I/O In many cases, your plugin may need to create, read, and write files on the user’s persistent storage mediums. Your plugin should be respectful of the fact that it has access to a lot of potentially privileged information and should respect the user’s privacy. The plugin should also be mindful of not wasting a lot of space. 4.1 Handle I/O Exceptions There may well be cases when your File I/O attempt will fail. Your plugin should always handle the exceptions gracefully. (4.1.1) An exception encountered during a File I/O operation should never cause the plugin to fail silently. The plugin should attempt to recover if possible. If no recovery is possible, always inform the user via a modal dialog. (4.1.2) Don’t use “programmer-speak” when showing File I/O error messages. For example, if the user is out of disk space, give the user some options instead of throwing up a terse error message instead. For example, “You’re out of disk space. This plugin requires more disk space in order to complete its operation. Try removing temporary or unneeded files and then try again.” 4.2 Respect the user’s disk space (4.2.1) Don’t store unnecessary data in the plugin’s data folder. (4.2.2) Don’t expect data stored in the plugin’s temporary folder to persist for any considerable length of time. (4.2.3) Clean up after yourself — delete files stored in temporary or persistent storage when they are no longer needed. 4.3 Don’t store sensitive information on the user’s disk Although plugin’s can’t access other plugin data without the user first giving permission, the files that you store are themselves accessible to other applications running on your user’s machine. This means that if you were to save a user’s password to the file system, that password would now be accessible to any other application running on the machine. (4.3.1) Never store sensitive information (like passwords) to the user’s storage. (4.3.2) Request sensitive information each time it is needed (either from the user, or from a remote endpoint). (4.3.3) You can cache sensitive information in memory for the life of the current document. (4.3.4) Use time-limited, revokable tokens instead of passwords. 4.4 Never access user files without permission Although the File I/O API surface makes it difficult to access files outside of the plugin data folder and temporary folder without the user first providing some sort of permission using a file picker, it is incumbent upon your plugin to ensure that it doesn’t circumvent the user’s permissions to do so. (4.4.1) Always invoke a picker once per document session when accessing a user file (excludes temporary and plugin data). (4.4.2) Your plugin can cache access to a file for the lifetime of the document session. (4.4.3) Never ask for access to the root folder of the user’s storage volume. (4.4.4) Avoid asking for access to the user’s “Documents” folder (and other similar files.) (4.4.5) Never ask for permission to access files in another plugin’s folder. "},"xdpegs/5-ui.html":{"url":"xdpegs/5-ui.html","title":"5.0 User interface","keywords":"","body":"5.0 User Interface Not all plugins will require any user interface, but many will need to at least render error messages and such. Be sure to review the guidelines in this section to ensure that you’re providing a good user experience in your user interfaces. 5.1 Insertion Points Use the correct insertion point for your user interface. Right now, this means that your plugin’s UI must be rendered within a Modal Dialog. (5.1.1) Render error messages using modal dialogs. (5.1.2) Render configuration options using modal dialogs. (5.1.3) Avoid displaying “success” messages at all, unless your plugin’s success is not visible to the user. (5.1.4) Render validation messages inline — don’t display another dialog. 5.2 Modal Dialog Etiquette (5.2.1) Always provide at least one button that can close the dialog without performing an action. Your user can always press ESC, but not all users are familiar with keyboard shortcuts. (5.2.2) Buttons that close the dialog (whether the intent is to cancel or start an operation, called dismissive buttons) should always be visible in the dialog without scrolling. (5.2.3) Dismissive buttons should be in the lower right corner of the dialog. (5.2.4) Dismissive buttons should respect platform-specific button order. For “Cancel/Submit”-style button arrangements, this is handled automatically. (TODO) On Windows, the order of buttons is “Submit”, then “Cancel” On macOS, the order of buttons is “Cancel”, then “Submit” (5.2.5) Don’t show more than one dialog at once. The only exception to this rule is if your dialog needs to trigger a file or folder picker. (5.2.6) Don’t show multiple dialogs in sequence for wizard-like flows. Use one dialog and dynamically update the content. (5.2.7) ENTER will submit your dialog — ensure that the response to this is never destructive. (5.2.8) Reuse dialogs instead of recreating them. There are some exceptions here, such as error/success messages. (5.2.9) Validate user input before dismissal. Don’t display a second dialog indicating validation failures. 5.3 Alerts Alerts are currently handled using modal dialogs, and as such, are extremely invasive to the user’s workflow. Use them sparingly and only when necessary. (5.3.1) Error conditions from which the plugin can’t recover should always be presented to the user in human-readable language. Plugins should never fail silently! (5.3.2) Success conditions should not be displayed unless there is no other obvious indication of success. (5.3.3) Alerts should never trigger destructive actions if ENTER or ESC is pressed, since the user may have reacted out of instinct instead of fully processing the intent of the alert. (5.3.4) Keep alerts short and sweet, but don’t delve into “programmer-speak”. (5.3.5) Provide options and steps the user can take in the event of an error condition. 5.4 Pill Buttons Pill buttons are interactive, clickable buttons within your plugin’s user interface. These can have a variety of styles, including: cta — call to action (there should only ever be one present; see 5.4.1) primary — primary (default) secondary — secondary buttons warning — used to indicate destructive actions Buttons can also have a border (default) or be quiet (less visually intrusive). (5.4.1) There should never be more than one cta button in a dialog at once time. (5.4.2) The cta button should usually be the default action (if ENTER is pressed). (5.4.3) A warning button must never **be triggered if ENTER** is pressed. (5.4.4) Use quiet buttons sparingly. The lack of border makes it more difficult for the user to recognize the button as a button. (5.4.5) Don’t overuse buttons. The number of buttons on your dialog should be kept to a minimum. (5.4.6) Use meaningful button labels. Avoid labels like “Yes”, “No”, “OK”, especially when it isn’t obvious to what those labels refer to. Instead use labels like “Don’t save”, “Export selection”, etc. (5.4.7) Buttons in the footer should respect the platform’s button order. “Cancel/Submit” button order is handled automatically. (See 5.2.4) 5.5 Action Buttons Action buttons are icon or text buttons that are used to trigger actions within the plugin’s UI. They are never used to dismiss a dialog. Use cases include a button that triggers a search for stock photos, a button that adds an item to a list, adding or removing tags, and more. Action buttons come in two flavors: standard (default, with a border) and quiet (no border). Action buttons can also be used to indicate a selected view or option — for example, two action buttons could be used to indicate if the user is viewing data in grid mode or list mode. (5.5.1) Never use action buttons to dismiss a dialog. Use pill buttons instead. (5.5.2) Action button images should be 14x14 points. Any other size may not be aligned correctly. 5.6 Text Fields Text fields are a great way to get user input and change the behavior of your plugin based on user feedback. There are two types of text fields: single-line and multi-line. (5.6.1) Don’t use single-line text fields for paragraph-type data entry. (5.6.2) Don’t use multi-line text fields for short text entry. (5.6.3) Text fields should be large enough to view the typical amount of data without scrolling. (5.6.4) Never listen for ENTER and use it to advance the user’s focus. Allow the user to TAB instead. (5.6.5) Text field labels should be to the left or top of the text field itself. 5.7 Checkboxes Checkboxes are a great way to provide on/off options to the user. (5.7.1) Never use checkboxes to trigger actions or dismiss dialogs. (5.7.2) Checkbox labels should be rendered to the right of the checkbox itself. (5.7.3) Checkbox groups should be clearly indicated with layout (5.7.4) Checkboxes must always be changeable using their associated label 5.8 Dropdowns Dropdowns provide a way for the user to select one item form a list of many using a compact form. (5.8.1) Never use dropdowns to trigger additional actions or dismiss dialogs. (5.8.2) Keep lists short; don't use dropdowns when other controls (like sliders or text fields) would be more appropriate. 5.9 Sliders Sliders provide a way for the user to specify a numeric value by indicating the value on a ranged control. (5.9.1) Use sliders where appropriate. If there are only a few options, you might consider using a dropdown instead. If the range is very wide, it might be easier for the user if the control was a text field instead. (5.9.2) Don't use sliders to indicate progress. (5.9.3) When using sliders, you should provide some other mechanism for input. (5.9.4) Always display the slider value in some way, so that the user doesn't have to guess at the value of the slider. 5.10 Images Images should be as crisp as possible for the user’s display. The runtime environment will typically try to select the best option if there are “@1x”, “@2x”, “@3x” options available locally, however this does not necessarily apply to remote images. (5.10.1) Ensure icons are provided in 1x and 2x resolutions (at least) (5.10.2) Icons for use in action buttons should be 14x14 points. (5.10.3) Avoid rescaling large images (this can cause poor performance) (5.10.4) Avoid using images in lieu of other more suitable elements 5.11 Links Links can be used to launch web pages in the user's system browser. (5.11.1) Don't link to malicious content. (5.11.2) Prefer secure websites. 5.12 Layout (5.12.1) Don’t rely on the size of the default elements when creating your layout. Instead, your layout should be responsive. (5.12.2) Don’t assume that a modal dialog will be as wide or high as you expect. Design your layout responsively. (5.12.3) If your layout is complex and takes more than a few milliseconds to build, consider deferring some of the layout until after you show your UI. (5.12.4) Respect the layout conventions of the platform. On Windows, layout is on a 16px grid. On macOS, it is on a 12px grid. However, you should refrain from hard-coding these units, as the grid sizes may change in the future. 5.13 Menus (5.13.1) Menu items should be short and succinct. If menu items are too long, they will be truncated. (5.13.2) Menu items should use “…” whenever the operation will require additional information from the user. Good: “Insert stock photo…” (if a dialog of stock photos will appear, requiring further interaction) Good: “Mirror selection” (no further options required) Bad: “Mirror selection…” (if no further options required) (5.13.3) Menu items should clearly identify the action. (5.13.4) When plugins provide multiple actions, consider using submenus. (5.13.5) Menu items that trigger an action should generally be action-oriented. For example: Good: \"Insert stock photo...\" Good: \"Export selected artboards...\" (5.13.6) When using submenus, the parent menu should be easily identified with the plugin itself. Unless there is a compelling reason otherwise, your parent menu and plugin name in the Plugin Manager should match. (5.13.7) When using submenus, never use ellipses in the parent menu title. 5.14 Onboarding (5.14.1) Plugins should provide sufficient onboarding guidance for users who may be unfamiliar with the expected use. (5.14.2) Consider linking to a help or support page in your plugin's error messages. (5.14.3) Consider using animated GIFs to explain how to use the plugin. (5.14.4) Consider having an \"About\" menu item (if your plugin uses submenus or has UI). "},"distribution/packaging.html":{"url":"distribution/packaging.html","title":"Packaging your plugin","keywords":"","body":"Packaging your plugin Before you share your plugin, you'll need to package it up. This tutorial describes how to package the files of an XD plugin. It's a simple process that can be summarized in three words: compress, rename, and verify. Prerequisite A code-complete plugin (if you don't have one yet, try our Quick Start Tutorial) Workflow 1. Compress your files as a .ZIP file Select all files within your plugin's parent folder. On both macOS and Windows you can right-click to compress: Platform Menu item macOS Right-click > Compress # items Windows Right-click > Send to > Compressed (zipped) folder If you plan to distribute via the XD plugin manager, your .ZIP file must be less than 25MB in size. You'll only be able to submit for review if your file is under the size limit. You should not compress the plugin's parent folder. Instead, compress the contents of the parent folder. Failure to do so will likely cause a rejection when submitting to the I/O Console. 2. Rename the .ZIP extension to .XDX Adobe XD recognizes the .XDX file extension as an XD plugin. By using this file extension, your plugin automatically gets the \"double-click to install\" feature, meaning that if you share your plugin directly to users, all they have to do is double-click to install the plugin to Adobe XD. If you plan to submit your plugin for distribution via the XD plugin manager, renaming your .ZIP to .XDX is required. 3. Verify the packaging worked Try double-clicking your .XDX file. It should prompt you to install the plugin: Click install: You'll get a success message upon installation, after which the plugin will show up in XD. Next steps You've packaged your plugin! Now you're ready to distribute your plugin. Learn about your options for distributing XD plugins to users. "},"distribution/options.html":{"url":"distribution/options.html","title":"Distribution options","keywords":"","body":"Distribution options Once you have a packaged plugin, you're ready to distribute. You can make your plugin available to users through the XD in-app plugin manager or via direct distribution. Prerequisite A packaged plugin The XD plugin manager The XD plugin manager lets users discover and install XD plugin right from within the app. Installation is as easy as a single click. To learn how to publish your plugin on the XD plugin manager, see our publishing tutorial. Direct distribution Direct distribution lets you choose how to provide users with access to your plugin. Your website? Email? Cloud file share? It's up to you! If you distribute a .XDX file, installation is as simple as one double-click. Note that attaching a .XDX file directly to an email might cause the email to get blocked. Outlook fails silently; the message disappears into the void, without being delivered to the recipient. Gmail notifies the sender that the message will be blocked. Next steps If you plan to publish on the XD plugin manager, see our publishing tutorial No matter how you plan to distribute, be sure to see our plugin marketing tutorial "},"distribution/how-to-submit-to-plugin-manager.html":{"url":"distribution/how-to-submit-to-plugin-manager.html","title":"Publishing your plugin","keywords":"","body":"Publishing your plugin The simplest way for Adobe XD users to discover and install plugins is through the XD in-app plugin manager. The XD plugin manager is accessed through the Plugins menu in the app: go to Plugins > Discover Plugins... to open it: In order to make your plugin available in the XD plugin manager, you'll need to go through our submission and review process. Prerequisite A packaged plugin Pre-submission checklist Before you submit, be sure to go through this checklist of common reasons for rejection. Doing so now might save you an extra step or two on your way to publishing. Checklist Does the plugin ID in your manifest.json file match the plugin ID assigned to you on the I/O Console? Learn more here. Does your plugin name in your manifest.json file match the plugin name you created on the I/O Console? Learn more here. Is the plugin version number format correct in your manifest.json file? Learn more here. Have you increased the version number in your manifest.json file? Learn more here. You must increment your version number each time you submit your plugin for review. Is the plugin host.minVersion number and (optionally) host.maxVersion number format correct in your manifest.json file? Learn more here. When packaging your plugin, did you make sure to compress the files (and not the parent folder)? Learn more here. Is the .XDX file less than 25MB in size? Did you verify the .XDX installs when you double-click it? After installing, did you verify that the plugin runs when you select it's command(s) from XD's Plugins menu? Answering \"no\" to any of these questions will get your submission rejected, requiring you to submit again. Submit your plugin You can submit your plugin for review through the I/O Console, where you can provide your packaged plugin, a description of your plugin, plugin icons, and release notes. We'll walk you through the workflow below. It's best to compose any copy (like plugin description and release notes) in your favorite text editor, and save it to your machine. Composing copy in a web form always runs the risk of loss, and you never know when you might need your copy later. 1. Read the submission guidelines All plugins are reviewed by our CC Integrations Review team. Please make sure to read our Creative Cloud Developer Submission Guidelines before submitting to ensure a smooth path to publishing your plugin. Plugins violating the guidelines may be rejected. 2. Begin your submission To begin the submission for your plugin, visit the I/O Console and select your plugin from the plugins list. This will take you to your plugin's Console page, which shows your plugin ID, a download link for your starter project, and a nice blue button that says \"Submit For Review\". Click \"Submit For Review\". 3. Upload your XD plugin On this page you can: Verify that the plugin ID in your plugin's manifest matches the one you see in the I/O Console Upload your packaged plugin Note that your .XDX file size must be under 25MB to upload it for submission. The plugin name you see on this screen is the plugin name that users will see in the plugin manager. This name is not changeable. If you've decided to change the name of your plugin, before you submit you'll need to create a new plugin on the I/O Console, get the new plugin ID that you are issued, add that plugin ID to your plugin's manifest, and repackage the plugin. 4. Tell us about your XD plugin On this page you can provide: Your publisher name Your support URL or email A description of your plugin An icon for your plugin All information entered on this page will be user-facing, visible in the XD plugin manager. The support page you link must include information on how to get support. There should be a link to support, filing an issue, etc. Note: For Github repositories, you should link to a README.md file or other markdown file that describes how to file an issue or directly to a new issue submission form. Do not link directly to your repo's list of issues. 5. Enter your release notes On this page you can enter optionally release notes for your plugin. Release notes help both users and the CC Integrations Review team know what's new or fixed in your plugin. Once you're ready to initiate the plugin review, click \"Submit\". Congratulations! CC Integrations Review After you submit, the CC Integrations Review team will review your plugin. Depending on current submission volume, it can take up to 10 business days before you hear a response. Thank you for being patient with us. Once your submission has been reviewed, we’ll reach out letting you know if it has been approved or rejected, and provide any next steps. Next steps No matter how you plan to distribute, be sure to see our plugin marketing tutorial to learn about the ins and outs of marketing an Adobe XD plugin. "},"distribution/marketing.html":{"url":"distribution/marketing.html","title":"Marketing your plugin","keywords":"","body":"Marketing your plugin No matter how you plan to distribute your XD plugin, your marketing must follow Adobe's branding guidelines. We want you to be able to promote your plugin while protecting Adobe's corporate and product brands and trademarks. For details, make sure to read the Adobe Creative Cloud Developer Brand Guide. The brand tutorial includes best practices for brand assets in marketing, press releases, and social media, and is the best spot to get our most up to date assets. You’ll also find information for how to publicize and promote your plugin once it’s approved. "},"community.html":{"url":"community.html","title":"Help, feedback, & discussion","keywords":"","body":"Join the developer community Don't build it alone! We've got an awesome community that you can interact with during your journey to creating your XD plugin. Whether you're looking for help, community discussion, or want to give us feedback, you've come to the right place! Give and get help FAQ: Browse our FAQ on the forums for quick answers to common issues and questions. Adobe XD Platform Forums: Open discussion, Q&A, and support with community experts and Adobe staff on anything related to building XD plugins. Jump in and say hi (we'll say hi back)! Stackoverflow: You can also ask questions to the broader developer community on Stackoverflow. Use the adobe-xd tag when asking questions. Give us feedback API bug reports and feature requests: Got an API bug or feature request that you want us to consider? Bring it to the API Feedback forum for community voting and discussion. Application feedback: Want to file a bug report or feature request for XD itself (not API-specific)? Tell us on UserVoice. Get the latest news Adobe Tech Blog: Developer-focused news from across Adobe. We post about API updates, how-tos, events, and more on this blog. Be sure to follow us for regular updates that matter to you. CC Developer Newsletter: CC Ecosystem updates delivered directly to your inbox. We cover topics ranging from API announcements to go-to-market tips. Sign up for the newsletter to stay in the loop on the latest from across the ecosystem. Open source XD repos: See our GitHub repos for opportunities to contribute. Each repo has a Code of Conduct and Contributing file that you should review before getting started. Your repos: Open sourcing something that you think would benefit the broader developer community? Consider submitting it for addition to the xd-awesome repo. "},"CODE_OF_CONDUCT.html":{"url":"CODE_OF_CONDUCT.html","title":"Code of conduct","keywords":"","body":"Adobe Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at Grp-opensourceoffice@adobe.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at http://contributor-covenant.org/version/1/4 "},"CONTRIBUTING.html":{"url":"CONTRIBUTING.html","title":"How to contribute","keywords":"","body":"Contributing Thanks for choosing to contribute! The following are a set of guidelines to follow when contributing to this project. Code Of Conduct This project adheres to the Adobe code of conduct. By participating, you are expected to uphold this code. Please report unacceptable behavior to Grp-opensourceoffice@adobe.com. Have A Question? Start by filing an issue. The existing committers on this project work to reach consensus around project direction and issue solutions within issue threads (when appropriate). Please note the following: Pull Requests to the plugin-docs repository will be rejected; please file an issue for incorrect documentation instead. This is because we need to ensure that the issue is corrected in the internal source code. Pull Requests to the plugin-samples repository and other repositories in the AdobeXD organization are welcome. Please file an issue first so that your contribution can be discussed. Contributor License Agreement All third-party contributions to this project and associated repositories must be accompanied by a signed contributor license agreement. This gives Adobe permission to redistribute your contributions as part of the project. Sign our CLA. You only need to submit an Adobe CLA one time, so if you have submitted one previously, you are good to go! Security Issues Security issues shouldn't be reported on this issue tracker. Instead, file an issue to our security experts. "},"reference/how-to-read.html":{"url":"reference/how-to-read.html","title":"API references","keywords":"","body":"How to read the reference documentation Please take a moment to familiarize yourself with the types of symbols you'll see throughout the technical documentation. Type Annotations This shorthand is used to indicate the types of arguments, return values, and object properties. Annotation Meaning [day] The parameter is optional. If it is not supplied, it will be undefined. [day=\"Monday\"] The parameter is optional, but will be supplied a default value if not provided. ?Array Type can be an Array OR null. !Array Type must be an Array; cannot be null. Primitive types (string, number, boolean) imply ! unless explicitly denoted otherwise with ?. string|number Type can be either string or number. {foo:number, bar:string} Type is an object with two properties: foo, which is type number; and bar, which is type string. string[] Type is an array of strings. Array Type is an array of strings. Promise Type is a Promise that is asynchronously fulfilled with a string. * Can be any type. NOTE: In this early stage, * is sometimes used as a placeholder for incomplete documentation. "},"reference/application.html":{"url":"reference/application.html","title":"application","keywords":"","body":" application The application module exposes useful information about XD's state, along with APIs for exporting content. Example // Generate PNG rendition of the selected node let application = require(\"application\"); let fs = require(\"uxp\").storage.localFileSystem; let file = await fs.getFileForSaving(); let shape = selection.items[0]; let renditions = [{ node: shape, outputFile: file, type: application.RenditionType.PNG, scale: 2 }]; application.createRenditions(renditions).then(function (results) { // ...do something with outputFiles on disk... }); Example let application = require(\"application\"); console.log(\"Version:\", application.version); // e.g. \"13.0.21.3\" console.log(\"XD locale:\", application.appLanguage); // e.g. \"en\" console.log(\"OS locale:\", application.systemLocale); // e.g. \"en_US\" application .createRenditions(renditions) ⇒ Promise .version : string .appLanguage : string .systemLocale : string application.createRenditions(renditions) Generate renditions of nodes in the document in a batch. Overwrites any existing files without warning. A single createRenditions() call can generate any number of renditions, including multiple renditions of the same node (with different output settings) or renditions of multiple different nodes. Only one createRenditions() call can be executing at any given time, so wait for the Promise it returns before calling it again. Kind: static method of applicationReturns: Promise, string> - Promise which is fulfilled with an array of RenditionResults (pointing to the same outputFiles that were originally passed in, or rejected with an error string if one or more renditions failed for any reason. Param Type Description renditions Array List of renditions to generate Typedef RenditionSettings All rendition settings fields are required (for a given rendition type) unless otherwise specified. Property Type Description node !SceneNode Root of scenegraph subtree to render. This may be any node in the scenegraph, regardless of the current edit context. outputFile !uxp.storage.File File to save the rendition to (overwritten without warning if it already exists) type string File type: RenditionType.PNG, JPG, PDF, or SVG scale number (PNG & JPG renditions) DPI multipler in the range [0.1, 100], e.g. 2.0 for @2x DPI. quality number (JPG renditions) Compression quality in the range [1, 100]. background ?Color (PNG & JPEG renditions) Alpha component ignored for JPG. Optional: defaults to transparent for PNG, solid white for JPG. minify boolean (SVG renditions) If true, SVG code is minified. embedImages boolean (SVG renditions) If true, bitmap images are stored as base64 data inside the SVG file. If false, bitmap images are saved as separate files linked from the SVG code. Typedef RenditionResult Property Type Description outputFile !uxp.storage.File File the rendition was written to (equal to outputFile in RenditionSettings) application.version : string Adobe XD version number in the form \"major.minor.patch.build\" Kind: static property of applicationRead only: true application.appLanguage : string Current language the application UI is using. This may not equal the user's OS locale setting: it is the closest locale supported by XD - use this when you want your plugin's UI to be consistent with XD's UI. Specifies language only, with no region info (e.g. \"fr\", not \"fr_FR\"). Kind: static property of applicationRead only: true application.systemLocale : string User's OS-wide locale setting. May not match the XD UI, since XD does not support all world languages. Includes both language and region (e.g. \"fr_CA\" or \"en_US\"). Kind: static property of applicationRead only: true "},"reference/clipboard.html":{"url":"reference/clipboard.html","title":"clipboard","keywords":"","body":" clipboard This module lets you copy text to the clipboard. It is not yet possible to copy other content types, or to handle paste events. Example // Copy the layer name of the selected item to the clipboard let clipboard = require(\"clipboard\"); clipboard.copyText(selection.items[0].name); clipboard .copyText() clipboard.copyText() Write plain text to the clipboard. Kind: static method of clipboard Param Type Description text string Will be automatically converted to string if a different type is passed "},"reference/cloud.html":{"url":"reference/cloud.html","title":"cloud","keywords":"","body":" cloud The cloud module lets you get information about shared prototypes and design specs. Example // Get prototypes data var sharedArtifacts = cloud.getSharedArtifacts(); var prototypes = sharedArtifacts.filter(artifact => (artifact.type === cloud.ArtifactType.PROTOTYPE)); prototypes.forEach(artifact => { console.log(\"Prototype URL: \", artifact.url); }); Example // Get design specs data var sharedArtifacts = cloud.getSharedArtifacts(); var specs = sharedArtifacts.filter(artifact => (artifact.type === cloud.ArtifactType.SPECS)); specs.forEach(artifact => { console.log(\"Design Spec URL: \", artifact.url); }); Since: XD 14 cloud .getSharedArtifacts() ⇒ !Array. Enums ArtifactType : PROTOTYPE, SPECS - Type of shared artifact: interactive prototype or developer-focused specs view TargetPlatform : WEB, IOS, ANDROID - Target platform for published design specs AccessLevel : LINKABLE, PASSWORD_PROTECTED, INVITE_ONLY - Access level of the shared link: accessible to anyone with the link, anyone with the link + password, or only specific Creative Cloud user accounts cloud.getSharedArtifacts() Get a list of recently shared artifacts generated from this document. Older artifacts may not be included even if the shared links are still live. Shared links that have been deleted from the server (File > Manage Published Links) may still be listed here, as this API only provides a record of recent share actions from XD - not what the links' current status on the server may be. The list may contain a mix of PrototypeArtifact and/or SpecsArtifact, and items are listed in no particular order. If nothing has been shared from this document, an empty array is returned. Kind: static method of cloud Returns: !Array. Typedef BaseSharedArtifact Properties common to both types. Property Type Description type ArtifactType Set to ArtifactType.PROTOTYPE url string URL to view in browser name string Name of shared artifact (often, but not always, matches the document name) accessLevel AccessLevel Level of access protection allowComments boolean True if stakeholders can post comments on this artifact Typedef PrototypeArtifact Interactive prototype view generated via \"Share for Review.\" Property Type Description embedURL string URL for embedding a view of the prototype inside an iframe (compact view with minimal surrounding UI) embedWidth number iframe width needed to display embedURL. May include room for navigation UI in addition to the prototype's content itself. embedHeight number iframe height needed to display embedURL. May include room for navigation UI in addition to the prototype's content itself. fullscreenInPage boolean True if prototype defaults to a view that fills the entire page, with no surrounding UI visible for navigation, commenting, etc. hotspotHints boolean True if clicking in non-interactive parts of the prototype flashes visual hints indicating the interactive spots Typedef SpecsArtifact Developer-oriented specs view generated via \"Share for Development.\" Property Type Description targetPlatform PlatformType Target platform. Determines which information and measurement units are shown by default. "},"reference/commands.html":{"url":"reference/commands.html","title":"commands","keywords":"","body":" commands You can make structural changes to the scenegraph, and perform other complex operations, by programmatically invoking the same commands as XD users have access to in the UI. Because structural changes have many nuanced rules and behaviors in XD, these calls function more like automating the UI than like low-level APIs. For example, these methods do not take arguments. Instead, set the selection to the objects you want the command to target, then invoke the command. Commands may also change the selection when run - for example, group() selects the newly created Group node. Example let commands = require(\"commands\"); selection.items = [shape1, shape2, maskShape]; commands.createMaskGroup(); console.log(selection.items); // [Group] commands .group() .ungroup() .createMaskGroup() .convertToPath() .duplicate() .bringToFront() .bringForward() .sendToBack() .sendBackward() .alignLeft() .alignRight() .alignHorizontalCenter() .alignTop() .alignBottom() .alignVerticalCenter() .distributeHorizontal() .distributeVertical() .alignToPixelGrid() commands.group() Wraps the selected objects in a Group, leaving the Group selected afterward. Equivalent to Object > Group in the UI. Kind: static method of commands Example let shape1 = new Rectangle(); // ...configure Rectangle size & appearance... let label = new Text(); // ...configure Text content & appearance... // Add both nodes to the current edit context first selection.insertionParent.addChild(shape1); selection.insertionParent.addChild(label); // Select both shapes, then run the group() command selection.items = [shape1, label]; commands.group(); let group = selection.items[0]; // the new Group node is what's selected afterward commands.ungroup() Ungroups any of the selected objects that are ungroupable containers (Groups, Symbols, Repeat Grids, etc.). Equivalent to Object > Ungroup. Kind: static method of commands commands.createMaskGroup() Creates a masked Group from the selected objects, using the object that is highest in the z order as the mask shape. The mask shape must be a leaf node or Boolean Group. Equivalent to Object > Mask With Shape. Kind: static method of commands Example let shape1 = new Rectangle(), shape2 = new Ellipse(); // ...configure shapes' size & appearance... let maskShape = new Ellipse(); // ...configure mask shape's size... // Create a Masked Group: add all nodes to the current edit context, select them, then run the createMaskGroup() command selection.insertionParent.addChild(shape1); selection.insertionParent.addChild(shape2); selection.insertionParent.addChild(maskShape); // added last: topmost in z order selection.items = [shape1, shape2, maskShape]; // order of selection array does not matter commands.createMaskGroup(); let maskedGroup = selection.items[0]; commands.convertToPath() Converts each selected object to a Path with the exact same visual appearance. Only applies to leaf nodes and Boolean Groups. Equivalent to Object > Path > Convert to Path. Kind: static method of commands commands.duplicate() Duplicates all selected objects, leaving the duplicates selected afterward. If the objects are artboards, the duplicates are positioned to not overlap any more artboards, and are placed at the top of the artboard z order. If normal objects, each duplicate is in the exact same position as the original, and just above it in the z order (duplicates of a multiple selection will not be contiguous in the z order if the originals were not). Interactions triggered from the selected objects are only duplicated if the user is currently in the Prototype workspace. Equivalent to Edit > Duplicate. Kind: static method of commands commands.bringToFront() Brings selected objects to the front of the z order. Equivalent to Object > Arrange > Bring to Front. Kind: static method of commands commands.bringForward() Brings each selected object one step closer to the front of the z order. Equivalent to Object > Arrange > Bring Forward. Kind: static method of commands commands.sendToBack() Sends selected objects to the back of the z order. Equivalent to Object > Arrange > Send to Back. Kind: static method of commands commands.sendBackward() Sends each selected object one step closer to the back of the z order. Equivalent to Object > Arrange > Send Backward. Kind: static method of commands commands.alignLeft() Aligns all selected objects flush left. Equivalent to Object > Align > Left. Kind: static method of commands commands.alignRight() Aligns all selected objects flush right. Equivalent to Object > Align > Right. Kind: static method of commands commands.alignHorizontalCenter() Aligns all selected objects along their horizontal centerlines. Equivalent to Object > Align > Center (Horizontally). Kind: static method of commands commands.alignTop() Aligns all selected objects flush top. Equivalent to Object > Align > Top. Kind: static method of commands commands.alignBottom() Aligns all selected objects flush bottom. Equivalent to Object > Align > Bottom. Kind: static method of commands commands.alignVerticalCenter() Aligns all selected objects along their vertical centerlines. Equivalent to Object > Align > Center (Vertically). Kind: static method of commands commands.distributeHorizontal() Distributes all selected objects evenly along the X axis. Equivalent to Object > Distribute > Horizontally. Kind: static method of commands commands.distributeVertical() Distributes all selected objects evenly along the Y axis. Equivalent to Object > Distribute > Vertically. Kind: static method of commands commands.alignToPixelGrid() Shifts all selected objects and their content so they align crisply with the pixel grid. Equivalent to Object > Align to Pixel Grid. Kind: static method of commands "},"reference/scenegraph.html":{"url":"reference/scenegraph.html","title":"scenegraph","keywords":"","body":" scenegraph The scenegraph is a node tree which represents the structure of the XD document. It closely matches the hierarchy seen in the Layers panel inside XD. Some scenenodes may contain children (e.g., a Group or Artboard), while others are leaf nodes (e.g., a Rectangle or Text node). The root of the scenegraph contains all Artboards that exist in the document, as well as all pasteboard content (nodes that are not contained by any artboard). You can modify properties on any scenenodes within the current edit context, and add leaf nodes to the current edit context, but you cannot make structural changes directly to the scenegraph tree. Instead, use commands. Typically, you access scenegraph nodes via the selection argument that is passed to your plugin command, or by traversing the entire document tree using the documentRoot argument that is passed to your plugin command. These objects are also accessible on the scenegraph module for convenience. Example function myCommand(selection) { let node = selection.items[0]; console.log(\"The selected node is a: \" + node.constructor.name); // Print out types of all child nodes (if any) node.children.forEach(function (childNode, i) { console.log(\"Child \" + i + \" is a \" + childNode.constructor.name); }); } To create new scenenodes, load this scenegraph module directly and use the node constructor functions: Example let scenegraph = require(\"scenegraph\"); function myCommand(selection) { let newShape = new scenegraph.Rectangle(); newShape.width = 100; newShape.height = 50; newShape.fill = new Color(\"red\"); selection.insertionParent.addChild(newShape); } Class hierarchy SceneNode GraphicNode Artboard Rectangle Ellipse Line Path BooleanGroup Text Group SymbolInstance RepeatGrid LinkedGraphic RootNode Typedefs Point : !{x:number, y:number} Bounds : !{x:number, y:number, width:number, height:number} Related classes These classes are not scenenode types, but are used extensively in the scenegraph API: Color - Value object for fill, stroke, and other properties ImageFill - Value object for fill property LinearGradientFill - Value object for fill property Matrix - Value object for transform property Shadow - Value object for shadow property Blur - Value object for blur property Other module members selection : !Selection root : !RootNode scenegraph.selection : !Selection Object representing the current selection state and edit context. Also available as the first argument passed to your plugin command handler function. Kind: static property of scenegraph Read only: true Since: XD 14 scenegraph.root : !RootNode Root node of the current document's scenegraph. Also available as the second argument passed to your plugin command handler function. Kind: static property of scenegraph Read only: true Since: XD 14 SceneNode Kind: abstract class Base class of all scenegraph nodes. Nodes will always be an instance of some subclass of SceneNode. SceneNode .guid : string .parent : SceneNode .children : !SceneNodeList .isInArtworkTree : boolean .isContainer : boolean .selected : boolean .visible : boolean .opacity : number .transform : !Matrix .translation : !{x:number, y:number} .rotation : number .globalBounds : !Bounds .localBounds : !Bounds .boundsInParent : !Bounds .topLeftInParent : !Point .localCenterPoint : !Point .globalDrawBounds : !Bounds .name : string .hasDefaultName : boolean .locked : boolean .markedForExport : boolean .hasLinkedContent : boolean .pluginData : * .removeFromParent() .moveInParentCoordinates(deltaX, deltaY) .placeInParentCoordinates(registrationPoint, parentPoint) .rotateAround(deltaAngle, rotationCenter) .resize(width, height) sceneNode.guid : string Returns a unique identifier for this node that stays the same when the file is closed & reopened, or if the node is moved to a different part of the document. Cut-Paste will result in a new guid, however. Kind: instance property of SceneNode Read only: true sceneNode.parent : SceneNode Returns the parent node. Null if this is the root node, or a freshly constructed node which has not been added to a parent yet. Kind: instance property of SceneNode Read only: true sceneNode.children : !SceneNodeList Returns a list of this node's children. List is length 0 if the node has no children. The first child is lowest in the z order. This list is not an Array, so you must use at(i) instead of [i] to access children by index. It has a number of Array-like methods such as forEach() for convenience, however. The list is immutable. Use removeFromParent and addChild to add/remove child nodes. Kind: instance property of SceneNode Read only: true Example let node = ...; console.log(\"Node has \" + node.children.length + \" children\"); console.log(\"First child: \" + node.children.at(0)); // do not use `[0]` - it will not work! node.children.forEach(function (childNode, i) { console.log(\"Child \" + i + \" is a \" + childNode.constructor.name); }); sceneNode.isInArtworkTree : boolean True if the node's parent chain connects back to the document root node. Kind: instance property of SceneNode Read only: true sceneNode.isContainer : boolean True if this node is a type that could have children (e.g. an Artboard, Group, Boolean Group, etc.). Kind: instance property of SceneNode Read only: true sceneNode.selected : boolean True if this node is part of the current selection. To get a list of all selected nodes or change which nodes are selected, use selection. Kind: instance property of SceneNode Read only: true See: selection sceneNode.visible : boolean False if this node has been hidden by the user (eyeball toggle in Layers panel). If true, the node may still be invisible for other reasons: a parent or grandparent has visible=false, the node has opacity=0%, the node is clipped by a mask, etc. Kind: instance property of SceneNode sceneNode.opacity : number (0.0 - 1.0) Node's opacity setting. The overall visual opacity seen in the document is determined by combining this value with the opacities of the node's entire parent chain, as well as the opacity settings of its fill/stroke properties if this is a leaf node. Kind: instance property of SceneNode sceneNode.transform : !Matrix Affine transform matrix that converts from the node's local coordinate space to its parent's coordinate space. The matrix never has skew or scale components, and if this node is an Artboard the matrix never has rotation either. Rather than reading the raw matrix values directly, it may be easier to use the translation and rotation properties. To move or resize a node, use the translation property or APIs like placeInParentCoordinates() or rotateAround(). Setting the entire transform matrix directly is not allowed. To resize a node, use resize(). For an overview of node transforms & coordinate systems, see Coordinate spaces. This getter returns a fresh Matrix each time, so its fields can be mutated by the caller without interfering with the node's state. Kind: instance property of SceneNode Read only: true See translation rotation moveInParentCoordinates placeInParentCoordinates rotateAround globalBounds localBounds boundsInParent topLeftInParent sceneNode.translation : !{x:number, y:number} The translate component of this node's transform. Since translation is applied after any rotation in the transform Matrix, translation occurs along the parent's X/Y axes, not the node's own local X/Y axes. This is equivalent to the e & f fields in the transform Matrix. For an overview of node positioning & coordinate systems, see Coordinate spaces. Kind: instance property of SceneNode See moveInParentCoordinates placeInParentCoordinates topLeftInParent sceneNode.rotation : number The rotation component of this node's transform, in clockwise degrees. For an overview of node transforms & coordinate systems, see Coordinate spaces. Kind: instance property of SceneNode Read only: true See: rotateAround sceneNode.globalBounds : !Bounds The node's path bounds in document-global coordinate space (represented by a bounding box aligned with global X/Y axes). Path bounds match the selection outline seen in the XD, but exclude some visual parts of the node (outer stroke, drop shadow / blur, etc.). For an overview of node bounding boxes & coordinate systems, see Coordinate spaces. Kind: instance property of SceneNode Read only: true See globalDrawBounds localBounds boundsInParent sceneNode.localBounds : !Bounds The node's path bounds in its own local coordinate space. This coordinate space may be rotated and translated relative to the parent's coordinate space. Path bounds match the selection outline seen in XD, but exclude some visual parts of the node (outerstroke, drop shadow / blur, etc.). The visual top-left of a node's path bounds is located at (localBounds.x, localBounds.y). This value is not necessarily (0,0) in the local coordinate space: for example, a text node's baseline is at y=0 in local coordinates, so the top of the text has a negative y value. For an overview of node bounding boxes & coordinate systems, see Coordinate spaces. Kind: instance property of SceneNode Read only: true See globalBounds boundsInParent sceneNode.boundsInParent : !Bounds The node's path bounds in its parent's coordinate space (represented by a bounding box aligned with the parent's X/Y axes - so if the node has rotation, the top-left of the node is not necessarily located at the top-left of boundsInParent). Path bounds match the selection outline seen in XD, but exclude some visual parts of the node (outer stroke, drop shadow / blur, etc.). For an overview of node bounding boxes & coordinate systems, see Coordinate spaces. Kind: instance property of SceneNode Read only: true See globalBounds localBounds topLeftInParent sceneNode.topLeftInParent : !Point The position of the node's upper-left corner (localBounds.x, localBounds.y) in its parent's coordinate space. If the node is rotated, this is not the same as the top-left corner of boundsInParent. This is a shortcut for node.transform.transformPoint({x: node.localBounds.x, y: node.localBounds.y}) For an overview of node bounding boxes & coordinate systems, see Coordinate spaces. Kind: instance property of SceneNode Read only: true See boundsInParent localBounds sceneNode.localCenterPoint : !Point The position of the node's centerpoint in its own local coordinate space. Useful as an argument to rotateAround. This is a shortcut for {x: localBounds.x + localBounds.width/2, y: localBounds.y + localBounds.height/2}) For an overview of node bounding boxes & coordinate systems, see Coordinate spaces. Kind: instance property of SceneNode Read only: true See: localBounds sceneNode.globalDrawBounds : !Bounds The node's draw bounds in document-global coordinate space. Draw bounds are larger than the selection outline seen in XD, including outer stroke, drop shadow / blur, etc. - every visible pixel of the node is encompassed by these bounds. This matches the image dimensions if the node is exported as a PNG/JPEG bitmap. For an overview of node bounding boxes & coordinate systems, see Coordinate spaces. Kind: instance property of SceneNode Read only: true See globalBounds sceneNode.name : string Node name as seen in the Layers panel. Also used as filename during Export. Kind: instance property of SceneNode sceneNode.hasDefaultName : boolean True if name is a generic, auto-generated string (e.g. \"Rectangle 5\"). False if name has been explicitly set. Kind: instance property of SceneNode Read only: true sceneNode.locked : boolean True if the node is locked, meaning it cannot normally be selected. Kind: instance property of SceneNode sceneNode.markedForExport : boolean True if the node should be included in the output of File > Export > Batch and other bulk-export workflows. Kind: instance property of SceneNode sceneNode.hasLinkedContent : boolean True if the node's appearance comes from a link to an external resource, such as Creative Cloud Libraries or a separate XD document (in the case of a Linked Symbol instance). Kind: instance property of SceneNode Read only: true sceneNode.pluginData : * Since: XD 14 Metadata specific to your plugin. Must be a value which can be converted to a JSON string, or undefined to clear the stored metadata on this node. Metadata is persisted with the document when it is saved. Duplicating a node (including across documents, via copy-paste) will duplicate the metadata with it. If the node lies within a Symbol or Repeat Grid, all instances of the node will have identical metadata (changes in one copy will automatically be synced to the other copy). Metadata stored by this plugin cannot be accessed by other plugins - each plugin has its own isolated metadata storage. To store general metadata for the document overall, set pluginData on the root node of the scenegraph. Metadata on the root node can be changed from any edit context. Kind: instance property of SceneNode sceneNode.removeFromParent() Remove this node from its parent, effectively deleting it from the document. Kind: instance method of SceneNode sceneNode.moveInParentCoordinates(deltaX, deltaY) Move the node by the given number of pixels along the parent's X/Y axes (if this node has no rotation, this is identical to moving the node along its own local X/Y axes). This is equivalent to modifying the value returned by 'translation' and then setting it back. For an overview of node positioning & coordinate systems, see Coordinate spaces. Kind: instance method of SceneNode See placeInParentCoordinates translation Param Type deltaX number deltaY number sceneNode.placeInParentCoordinates(registrationPoint, parentPoint) Move the node so the given point in its local coordinates is placed at the given point in its parent's coordinates (taking into account any rotation on this node, etc.). For an overview of node positioning & coordinate systems, see Coordinate spaces. Kind: instance method of SceneNode Param Type Description registrationPoint !Point Point in this node's local coordinate space to align with parentPoint parentPoint !Point Point in this node's parent's coordinate space to move registrationPoint to Example // Place this node's top-left corner at the centerpoint of its parent let parentCenter = node.parent.localCenterPoint; // parent's center in parent's coordinates let nodeBounds = node.localBounds; // node's bounds in its own local coordinates let nodeTopLeft = {x: nodeBounds.x, y: nodeBounds.y}; // node's top left corner in its own local coordinates node.placeInParentCoordinates(nodeTopLeft, parentCenter); sceneNode.rotateAround(deltaAngle, rotationCenter) Rotate the node clockwise by the given number of degrees around the given point in the plugin's local coordinate space. If this node already has nonzero rotation, this operation adds to its existing angle. For an overview of node transforms & coordinate systems, see Coordinate spaces. Kind: instance method of SceneNode See: rotation Param Type Description deltaAngle number In degrees. rotationCenter Point Point to rotate around, in node's local coordinates. Example // Rotate the node 45 degrees clockwise around its centerpoint node.rotateAround(45, node.localCenterPoint); // Ignoring the node's previous angle, set its rotation to exactly 180 degrees let rotationDelta = 180 - node.rotation; node.rotateAround(rotationDelta, node.localCenterPoint); sceneNode.resize(width, height) Attempts to change localBounds.width & height to match the specified sizes. The result is not guaranteed to match your requested size, since some nodes have limits on their ability to resize. Note that resizing is different from simply rescaling the content: Styles like stroke weight and corner radius stay the same size, so the ratio of their size relative to the resized shape will change. If this node is a Group, resizing may invoke XD's Responsive Resize feature, which rearranges items using a fluid layout and may change only the position (not size) of some children. Some content cannot be resized at all, or cannot stretch to change its aspect ratio. Rescaling, by contrast, is the effect seen when you zoom in on the view in XD, or when you export a node at a higher DPI multiplier. Note: Currenty this function does not respect the \"aspect ratio lock\" setting in XD's Properties panel. This may be changed/fixed later. Kind: instance method of SceneNode Param Type width number height number Example // Double the width of this node let originalBounds = node.localBounds; node.resize(originalBounds.width * 2, originalBounds.height); RootNode Kind: class Extends: SceneNode Class representing the root node of the document. All Artboards are children of this node, as well as any pasteboard content that does not lie within an Artboard. Artboards must be grouped contiguously at the bottom of this node's z order. The root node has no visual appearance of its own. RootNode .addChild(node, index) .addChildAfter(node, relativeTo) .addChildBefore(node, relativeTo) .removeAllChildren() Group Kind: class Extends: SceneNode Group nodes represent two types of simple containers in XD: Plain Groups, created by the Object > Group command Masked Groups, created by the Object > Mask With Shape command You can determine whether a group is masked by checking the mask property. Groups and other containers cannot be created directly using scenenode constructors, since you can't add a populated Group to the scenegraph (you can't add subtrees all at once) nor can you add an empty Group and then add children to it (can't add nodes outside the scope of the current edit context). Instead, to create Groups and other nested structures, use commands. In a Mask Group, the mask shape is included in the group's children list, at the top of the z order. It is not visible - only its path outline is used, for clipping the group. Example let commands = require(\"commands\"); // Newly created shape nodes let shape1 = ..., shape2 = ...; // Add both nodes to the current edit context first selection.insertionParent.addChild(shape1); selection.insertionParent.addChild(shape2); // Select both shapes, then run the Group command selection.items = [shape1, shape2]; commands.group(); let group = selection.items[0]; // selection has been set to the new Group node afterward Group .addChild(node, index) .addChildAfter(node, relativeTo) .addChildBefore(node, relativeTo) .removeAllChildren() .mask : ?SceneNode group.addChild(node, index) Adds a child node to this container node. You can only add leaf nodes this way; to create structured subtrees of content, use commands. Kind: instance method of Group and other container nodes Param Type Description node !SceneNode Child to add index ?number Optional: index to insert child at. Child is appended to end of children list (top of z order) otherwise. group.addChildAfter(node, relativeTo) Inserts a child node after the given reference node. Kind: instance method of Group and other container nodes Param Type Description node !SceneNode Child to add relativeTo !SceneNode New child is added immediately after this existing child group.addChildBefore(node, relativeTo) Inserts a child node before the given reference node. Kind: instance method of Group and other container nodes Param Type Description node !SceneNode Child to add relativeTo !SceneNode New child is added immediately before this existing child group.removeAllChildren() Removes all children from this node. Equivalent to calling removeFromParent() on each child in turn, but faster. Kind: instance method of Group and other container nodes group.mask : ?SceneNode The mask shape applied to this group, if any. This object is also present in the group's children list. Though it has no direct visual appearance of its own, the mask affects the entire group's appearance by clipping all its other content. Kind: instance property of Group Read only: true Example let group = ...; console.log(\"Type of group is: \" + (group.mask ? \"Masked Group\" : \"Plain Group\")); To create a Masked Group, use commands.createMaskGroup instead of commands.group. GraphicNode Kind: abstract class Extends: SceneNode Base class for nodes that have a stroke and/or fill. This includes leaf nodes such as Rectangle, as well as BooleanGroup which is a container node. If you create a shape node, it will not be visible unless you explicitly give it either a stroke or a fill. GraphicNode .fill : ?Color or LinearGradientFill or RadialGradientFill or ImageFill .fillEnabled : boolean .stroke : ?Color .strokeEnabled : boolean .strokeWidth : number .strokePosition : string .strokeEndCaps : string .strokeJoins : string .strokeMiterLimit : number .strokeDashArray : !Array .strokeDashOffset : number .shadow : ?Shadow .blur : ?Blur .pathData : string .hasLinkedGraphicFill : boolean graphicNode.fill : ?Color or LinearGradientFill or RadialGradientFill or ImageFill Default: null The fill applied to this shape, if any. If this property is null or fillEnabled is false, no fill is drawn. Freshly created nodes have no fill by default. For Line nodes, fill is ignored. For Text nodes, only solid Color fill values are allowed. For Artboard nodes, image fill values are not allowed. Kind: instance property of GraphicNode Example ellipse.fill = new Color(\"red\"); To modify an existing fill, always be sure to re-invoke the fill setter rather than just changing the fill object's properties inline. See \"Properties with object values\". The RadialGradientFill type is not documented and its API may change. Plugins currently cannot modify or otherwise work with radial gradients. graphicNode.fillEnabled : boolean Default: true If false, the fill is not rendered. The user can toggle this via a checkbox in the Properties panel. Kind: instance property of GraphicNode graphicNode.stroke : ?Color Default: null The stroke color applied to this shape, if any. If this property is null or strokeEnabled is false, no stroke is drawn. Freshly created nodes have no stroke by default. Artboard objects ignore stroke settings. Depending on the strokeWidth and strokePosition, the path outline of a node may need to be positioned on fractional pixels in order for the stroke itself to be crisply aligned to the pixel grid. For example, if a horizontal line uses a 1px center stroke, the line's y should end in .5 to keep the stroke on-pixel. Kind: instance property of GraphicNode Example ellipse.stroke = new Color(\"red\"); To modify an existing stroke, always be sure to re-invoke the stroke setter rather than just changing the Color object's properties inline. See \"Properties with object values\". graphicNode.strokeEnabled : boolean Default: false If false, the stroke is not rendered. The user can toggle this via a checkbox in the Properties panel. Kind: instance property of GraphicNode graphicNode.strokeWidth : number >= 0 Default: 1.0 Thickness in pixels of the stroke. Kind: instance property of GraphicNode graphicNode.strokePosition : string Default: CENTER_STROKE for most shapes, INNER_STROKE for Rectangle & Ellipse Position of the stroke relative to the shape's path outline: GraphicNode.INNER_STROKE, OUTER_STROKE, or CENTER_STROKE. Ignored by Text and Line, which always render using CENTER_STROKE. Kind: instance property of GraphicNode graphicNode.strokeEndCaps : string Default: STROKE_CAP_SQUARE For Lines and non-closed Paths, how the dangling ends of the stroke are rendered: GraphicNode.STROKE_CAP_NONE, STROKE_CAP_SQUARE, or STROKE_CAP_ROUND. Kind: instance property of GraphicNode graphicNode.strokeJoins : string Default: STROKE_JOIN_MITER How sharp corners in the shape are rendered: GraphicNode.STROKE_JOIN_BEVEL, STROKE_JOIN_ROUND, or STROKE_JOIN_MITER. Kind: instance property of GraphicNode graphicNode.strokeMiterLimit : number >= 0 Default: 4 Kind: instance property of GraphicNode graphicNode.strokeDashArray : !Array Default: [] Empty array indicates a solid stroke. If non-empty, values represent the lengths of rendered and blank segments of the stroke's dash pattern, repeated along the length of the stroke. The first value is the length of the first solid segment. If the array is odd length, the items are copied to double the array length. For example, [3] produces the same effect as [3, 3]. The appearance of each segment's start/end follows the strokeEndCaps setting. Kind: instance property of GraphicNode graphicNode.strokeDashOffset : number Default: 0 Ignored unless strokeDashArray is non-empty. Shifts the \"phase\" of the repeating dash pattern along the length of the stroke. Kind: instance property of GraphicNode graphicNode.shadow : ?Shadow Default: null The node's drop shadow, if any. If there is no shadow applied, this property may be null or shadow.visible may be false. Kind: instance property of GraphicNode graphicNode.blur : ?Blur Default: null The node's object blur or background blur settings, if applicable (a node may not have both types of blur at once). If there is no blur effect applied, this property may be null or blur.visible may be false. Kind: instance property of GraphicNode graphicNode.pathData : string Returns a representation of the node's outline in SVG syntax. Note that only nodes with strokePosition == GraphicNode.CENTER_STROKE can be faithfully rendered in actual SVG using the exact pathData shown here. Kind: instance property of GraphicNode Read only: true graphicNode.hasLinkedGraphicFill : boolean True if the node has an image fill that comes from a link to an external resource, such as Creative Cloud Libraries. Equivalent to the expression: node.fill && node.fill.linked. Kind: instance property of GraphicNode Read only: true Rectangle Kind: class Extends: GraphicNode Rectangle leaf node shape, with or without rounded corners. Like all shape nodes, has no fill or stroke by default unless you set one. Example let rect = new Rectangle(); rect.width = 100; rect.height = 25; rect.fill = new Color(\"red\"); selection.insertionParent.addChild(rect); selection.items = [rect]; Rectangle .width : number .height : number .cornerRadii : !{topLeft:number, topRight:number, bottomRight:number, bottomLeft:number} .setAllCornerRadii(radius) .effectiveCornerRadii : !{topLeft:number, topRight:number, bottomRight:number, bottomLeft:number} rectangle.width : number > 0 Kind: instance property of Rectangle rectangle.height : number > 0 Kind: instance property of Rectangle rectangle.cornerRadii : !{topLeft:number, topRight:number, bottomRight:number, bottomLeft:number} (all numbers >= 0) Default: {topLeft:0, topRight:0, bottomRight:0, bottomLeft:0} The actual corner radius that is rendered is capped based on the size of the rectangle even if the radius value set here is higher (see effectiveCornerRadii. To set all corners to the same value, use setAllCornerRadii. Kind: instance property of Rectangle rectangle.hasRoundedCorners : boolean True if any of the Rectangle's four corners is rounded (corner radius > 0). Kind: instance property of Rectangle Read only: true rectangle.setAllCornerRadii(radius) Set the rounding radius of all four corners of the Rectangle to the same value. The actual corner radius that is rendered is capped based on the size of the rectangle even if the radius value set here is higher (see effectiveCornerRadii. To set the corners to different radius values, use cornerRadii. Kind: instance method of Rectangle Param Type radius number rectangle.effectiveCornerRadii : !{topLeft:number, topRight:number, bottomRight:number, bottomLeft:number} The actual corner radius that is rendered may be capped by the size of the rectangle. Returns the actual radii that are currently in effect, which may be smaller than the cornerRadii values as a result. Kind: instance property of Rectangle Artboard Kind: class Extends: GraphicNode Artboard container node. All Artboards must be children of the root node (they cannot be nested), and they must be placed below all pasteboard content in the z order. Artboards can have a background fill, but the stroke, shadow, and blur settings are all ignored. Artboards cannot be locked or hidden, or have opacity Generally, all nodes that overlap an Artboard are children of that artboard, and nodes that don't overlap any Artboard are children of the root (pasteboard). XD ensures this automatically: if a node is modified in any way that changes whether it overlaps an Artboard, its parent will automatically be changed accordingly after the edit operation finishes. Artboard .width : number .height : number .viewportHeight : ?number .addChild(node, index) .addChildAfter(node, relativeTo) .addChildBefore(node, relativeTo) .removeAllChildren() artboard.width : number > 0 Kind: instance property of Artboard artboard.height : number > 0 For scrollable Artboards, this is the total height encompassing all content - not just the viewport size (i.e. screen height). Kind: instance property of Artboard See: viewportHeight artboard.viewportHeight : ?number If Artboard is scrollable, this is the height of the viewport (e.g. mobile device screen size). Null if Artboard isn't scrollable. Kind: instance property of Artboard See: height Ellipse Kind: class Extends: GraphicNode Ellipse leaf node shape. Ellipse .radiusX : number .radiusY : number .isCircle : boolean ellipse.radiusX : number Kind: instance property of Ellipse ellipse.radiusY : number Kind: instance property of Ellipse ellipse.isCircle : boolean True if the Ellipse is a circle (i.e., has a 1:1 aspect ratio). Kind: instance property of Ellipse Read only: true Line Kind: class Extends: GraphicNode Line leaf node shape. Lines have a stroke but no fill. Line .start : !Point .end : !Point .setStartEnd(startX, startY, endX, endY) line.start : !Point Start point of the Line in local coordinate space. To change the start point, use setStartEnd. Kind: instance property of Line Read only: true line.end : !Point Endpoint of the Line in local coordinate space. To change the endpoint, use setStartEnd. Kind: instance property of Line Read only: true line.setStartEnd(startX, startY, endX, endY) Set the start and end points of the Line in local coordinate space. The values may be normalized by this setter, shifting the node's translation and counter-shifting the start/end points. So the start/end getters may return values different from the values you passed this setter, even though the line's visual bounds and appearance are the same. Kind: instance method of Line Param Type startX number startY number endX number endY number Path Kind: class Extends: GraphicNode Arbitrary vector Path leaf node shape. Paths can be open or closed, and a Path may include multiple disjoint sections (aka a \"compound path\"). Even open Paths may have a fill - the fill is drawn as if the Path were closed with a final \"Z\" segment. The path may not start at (0,0) in local coordinates, for example if it starts with a move (\"M\") segment. Path .pathData : string path.pathData : string Representation of the path outline in SVG syntax. Unlike other node types, pathData is writable here. Syntax is automatically normalized, so the getter may return a slightly different string than what you passed to the setter. Kind: instance property of Path BooleanGroup Kind: class Extends: GraphicNode BooleanGroup container node - although it has fill/stroke/etc. properties like a leaf shape node, it is a container with children. Its visual appearance is determined by generating a path via a nondestructive boolean operation on all its children's paths. It is not currently possible for plugins to create a new BooleanGroup node, aside from using commands.duplicate to clone existing BooleanGroups. BooleanGroup .pathOp : string .addChild(node, index) .addChildAfter(node, relativeTo) .addChildBefore(node, relativeTo) .removeAllChildren() booleanGroup.pathOp : string Which boolean operation is used to generate the path: BooleanGroup.PATH_OP_ADD, PATH_OP_SUBTRACT, PATH_OP_INTERSECT, or PATH_OP_EXCLUDE_OVERLAP. Kind: instance property of BooleanGroup Read only: true Text Kind: class Extends: GraphicNode Text leaf node shape. Text can have a fill and/or stroke, but only a solid-color fill is allowed (gradient or image fill will be rejected). There are two types of Text nodes: Point Text - Expands to fit the full width of the text content. Only uses multiple lines if the text content contains hard line breaks (\"\\n\"). Area Text - Fixed width and height. Text is automatically wrapped (soft line wrapping) to fit the width. If it does not fit the height, any remaining text is clipped. Check whether areaBox is null to determine the type of a Text node. Text bounds and layout work differently depending on the type of text: Point Text - The baseline is at y=0 in the node's local coordinate system. Horizontally, local x=0 is the anchor point that the text grows from / shrinks toward when edited. This anchor depends on the justification: for example, if the text is centered, x=0 is the horizontal centerpoint of the text. The bounding box leaves enough space for descenders, uppercase letters, and accent marks, even if the current string does not contain any of those characters. This makes aligning text based on its bounds behave more consistently. Area Text - The baseline is at a positive y value in local coordinates, and its local (0, 0) is the top left of the areaBox. Text always flows to the right and down from this local origin regardless of justification. Text .text : string .styleRanges : !Array .fontFamily : string .fontStyle : string .fontSize : number .fill : Color .charSpacing : number .underline : boolean .flipY : boolean .textAlign : string .lineSpacing : number .paragraphSpacing : number .areaBox : ?{width:number, height:number} .clippedByArea : boolean text.text : string Default: \" \" (a single space character) The plaintext content of the node, including any hard line breaks but excluding soft line wrap breaks. Setting text does not change styleRanges, so styles aligned with the old text's string indices will continue to be applied to the new string's indices unless you explicitly change styleRanges as well. Kind: instance property of Text text.styleRanges : !ArrayColor, charSpacing:number, underline:boolean}> Array of text ranges and their character style settings. Each range covers a set number of characters in the text content. Ranges are contiguous, with each one starting immediately after the previous one. Any characters past the end of the last range use the same style as the last range. When setting styleRanges, any fields missing from a given range default to the existing values from the last range in the old value of styleRanges. The styleRanges getter always returns fully realized range objects with all fields specified. Kind: instance property of Text text.fontFamily : string Since: XD 14 Set the font family across all style ranges, or get the font family of the last style range (font family of all the text if one range covers all the text). Plugins should not assume any particular default value for fontFamily. Kind: instance property of Text text.fontStyle : string Default: non-italic normal weight style Since: XD 14 Set the font style across all style ranges, or get the font style of the last style range (font style of all the text if one range covers all the text). Kind: instance property of Text text.fontSize : number > 0 Since: XD 14 Font size in document pixels. Set the font size across all style ranges, or get the font size of the last style range (font size of all the text if one range covers all the text). Plugins should not assume any particular default value for fontSize. Kind: instance property of Text text.fill : ?Color Default: null Set the text color across all style ranges, or get the color of the last style range (color of all the text if one range covers all the text). Unlike most other nodes, text only allows a solid color fill - gradients and image fills are not supported. Kind: instance property of Text text.charSpacing : number Default: 0 Since: XD 14 Character spacing in increments of 1/1000th of the fontSize, in addition to the font's default character kerning. May be negative. Set the character spacing across all style ranges, or get the character spacing of the last style range (character spacing of all the text if one range covers all the text). Kind: instance property of Text text.underline : boolean Default: false Since: XD 14 Set underline across all style ranges, or get the underline of the last style range (underline of all the text if one range covers all the text). Kind: instance property of Text text.flipY : boolean If true, the text is drawn upside down. Kind: instance property of Text text.textAlign : string Default: ALIGN_LEFT Horizontal alignment: Text.ALIGN_LEFT, ALIGN_CENTER, or ALIGN_RIGHT. This setting affects the layout of multiline text, and for point text it also affects how the text is positioned relative to its anchor point (x=0 in local coordinates) and what direction the text grows when edited by the user. Changing textAlign on existing point text will cause it to shift horizontally. To change textAlign while keeping the text in a fixed position, shift the text horizontally (moving its anchor point) to compensate: Example let originalBounds = textNode.localBounds; textNode.textAlign = newAlignValue; let newBounds = textNode.localBounds; textNode.moveInParentCoordinates(originalBounds.x - newBounds.x, 0); Kind: instance property of Text text.lineSpacing : number > 0, or 0 for default spacing Default: 0 Distance between baselines in multiline text, in document pixels. The special value 0 causes XD to use the default line spacing defined by the font given the current font size & style. This property is not automatically adjusted when fontSize changes, if line spacing is not set to 0, the line spacing will stay fixed while the font size changes, shifting the spacing's proportional relationship to font size. If the value is 0, then the rendered line spacing will change to match the new font size, since 0 means the spacing is dynamically calculated from the current font settings. Kind: instance property of Text text.paragraphSpacing : number >= 0 Default: 0 Since: XD 14 Additional distance between paragraphs, in document pixels, added to the lineSpacing amount (soft line breaks in area text are separated only by lineSpacing, while hard line breaks are separated by lineSpacing + paragraphSpacing). Unlike lineSpacing, 0 is not a special value; it just means no added spacing. Similar to lineSpacing, this property is not automatically adjusted when fontSize changes. The paragraph spacing amount will stay fixed while the font size changes, shifting the spacing's proportional relationship to font size. Kind: instance property of Text text.areaBox : ?{width:number, height:number} Null for point text. For area text, specifies the size of the rectangle within which text is wrapped and clipped. Changing point text to area text or vice versa will change the origin / anchor point of the text, thus changing its localBounds, but it will also automatically change the node's transform so its globalBounds and boundsInParent origins remain unchanged. Changing area text to point text will also automatically insert hard line breaks (\"\\n\") into the text to match the previous line wrapping's appearance exactly. Kind: instance property of Text text.clippedByArea : boolean Always false for point text. For area text, true if the text does not fit in the content box and its bottom is being clipped. Kind: instance property of Text Read only: true SymbolInstance Kind: class Extends: SceneNode Container node representing one instance of a Symbol. Changes made within a symbol instance are automatically synced to all other other instances of the symbol - with certain exceptions, called \"overrides.\" It is not currently possible for plugins to create a new Symbol definition or a new SymbolInstance node, aside from using commands.duplicate to clone existing SymbolInstances. SymbolInstance .symbolId : string .addChild(node, index) .addChildAfter(node, relativeTo) .addChildBefore(node, relativeTo) .removeAllChildren() symbolInstance.symbolId : string An identifier unique within this document that is shared by all instances of the same Symbol. Kind: instance property of SymbolInstance Read only: true RepeatGrid Kind: class Extends: SceneNode Repeat Grid container node containing multiple grid cells, each one a child Group. Changes within one cell are automatically synced to all the other cells - with certain exceptions, called \"overrides.\" A Repeat Grid also defines a rectangular clipping mask which determines how may cells are visible (new cells are automatically generated as needed if the Repeat Grid is resized larger). Each grid cell is a Group that is an immediate child of the RepeatGrid. These groups are automatically created and destroyed as needed when the RepeatGrid is resized. It is not currently possible for plugins to create a new RepeatGrid node, aside from using commands.duplicate to clone existing RepeatGrids. RepeatGrid .width : number .height : number .numColumns : number .numRows : number .paddingX : number .paddingY : number .cellSize : !{width: number, height: number} .attachTextDataSeries(textNode, textValues) .attachImageDataSeries(shapeNode, images) .addChild(node, index) .addChildAfter(node, relativeTo) .addChildBefore(node, relativeTo) .removeAllChildren() repeatGrid.width : number Defines size of the RepeatGrid. Cells are created and destroyed as necessary to fill the current size. Cells that only partially fit will be clipped. Kind: instance property of RepeatGrid repeatGrid.height : number Defines size of the RepeatGrid. Cells are created and destroyed as necessary to fill the current size. Cells that only partially fit will be clipped. Kind: instance property of RepeatGrid repeatGrid.numColumns : number Number of grid columns Kind: instance property of RepeatGrid repeatGrid.numRows : number Number of grid rows Kind: instance property of RepeatGrid repeatGrid.paddingX : number Horizontal spacing between grid cells/columns Kind: instance property of RepeatGrid repeatGrid.paddingY : number Vertical spacing between grid cells/rows Kind: instance property of RepeatGrid repeatGrid.cellSize : !{width: number, height: number} The size of each grid cell. The size of each cell's content can vary slightly due to text overrides; the cell size is always set to the width of the widest cell content and the height of the tallest cell content. Kind: instance property of RepeatGrid repeatGrid.attachTextDataSeries(textNode, textValues) Attach a sequence of text values to the instances of a given text node across all the cells of a Repeat Grid. The sequence is repeated as necessary to cover all the grid cells. This is a persistent data binding, so if the Repeat Grid is resized later to increase the number of grid cells, items from this sequence will be used to fill the text values of the new cells. You can call this API from either of two different edit contexts: Edit context is the parent node of this RepeatGrid (i.e. a context where the RepeatGrid could be selected) Edit context is the RepeatGrid cell which is the parent of textNode (i.e. a context where textNode could be selected) Kind: instance method of RepeatGrid Param Type Description textNode !Text A Text node exemplar that is an immediate child of one of this RepeatGrid's cells. The data series will be bound to this text node and all corresponding copies of it in the other grid cells. textValues !Array Array of one or more strings. Empty strings are ignored. repeatGrid.attachImageDataSeries(shapeNode, images) Attach a sequence of image fills to the instances of a given shape node across all the cells of a Repeat Grid. The sequence is repeated as necessary to cover all the grid cells. This is a persistent data binding, so if the Repeat Grid is resized later to increase the number of grid cells, items from this sequence will be used to set the image fill in the new cells. You can call this API from either of two different edit contexts: Edit context is the parent node of this RepeatGrid (i.e. a context where the RepeatGrid could be selected) Edit context is the RepeatGrid cell which is the parent of shapeNode (i.e. a context where shapeNode could be selected) Kind: instance method of RepeatGrid Param Type Description shapeNode !GraphicNode A shape node exemplar that is an immediate child of one of this RepeatGrid's cells. The image series will be bound to this node and all corresponding copies of it in the other grid cells. Must be a node type that supports image fills (e.g. Rectangle, but not Text or Line). images !Array Array of one or more ImageFills. LinkedGraphic Kind: class Extends: SceneNode Container node whose content is linked to an external resource, such as Creative Cloud Libraries. It cannot be edited except by first ungrouping it, breaking this link. "},"reference/SceneNodeList.html":{"url":"reference/SceneNodeList.html","title":"SceneNodeList","keywords":"","body":" SceneNodeList Represents the children of a scenenode. Typically accessed via the SceneNode.children property. This is not an Array, so you must use at(i) instead of [i] to access children by index. It has a number of Array-like methods such as forEach for convenience, however. Ordered from lowest z order to highest. Kind: class Example let node = ...; console.log(\"Node has \" + node.children.length + \" children\"); console.log(\"First child: \" + node.children.at(0)); // do not use `[0]` - it will not work! node.children.forEach(function (childNode, i) { ... }); See: SceneNode.children SceneNodeList .length : number .forEach(callback, thisArg) ⇒ void .forEachRight(callback, thisArg) ⇒ void .filter(callback, thisArg) ⇒ Array. .map(callback, thisArg) ⇒ Array. .some(callback, thisArg) ⇒ boolean .at() ⇒ SceneNode sceneNodeList.length : number Number of children in the list. Kind: instance property of SceneNodeListRead only: true sceneNodeList.forEach(callback, thisArg) ⇒ void Iterate all children in the list. Kind: instance method of SceneNodeList Param Type Description callback !function(!SceneNode, number) Callback, passed each child node and its index. thisArg ?Object Optional value for this when executing the callback. sceneNodeList.forEachRight(callback, thisArg) ⇒ void Iterate all children in the list, in reverse order (highest z order to lowest). Kind: instance method of SceneNodeList Param Type Description callback !function(!SceneNode, number) Callback, passed each child node and its index. thisArg ?Object Optional value for this when executing the callback. sceneNodeList.filter(callback, thisArg) ⇒ Array. Iterates all children and returns an array of just the children that passed the filter function's test. Kind: instance method of SceneNodeList Param Type Description callback !function(!SceneNode, number): boolean Filter function, passed each child node and its index. thisArg ?Object Optional value for this when executing the callback. sceneNodeList.map(callback, thisArg) ⇒ Array. Iterates all children and returns an array of the map function's result value for each child node. Kind: instance method of SceneNodeList Param Type Description callback !function(!SceneNode, number): * Map function, passed each child node and its index. thisArg ?Object Optional value for this when executing the callback. sceneNodeList.some(callback, thisArg) ⇒ boolean Iterates children until the test returns true for at least one child. Kind: instance method of SceneNodeListReturns: boolean - True if the test function returned true for at least one child. Param Type Description callback !function(!SceneNode, number): boolean Test function, passed each child node and its index. thisArg ?Object Optional value for this when executing the callback. sceneNodeList.at() ⇒ SceneNode Kind: instance method of SceneNodeListReturns: ?SceneNode - Child node at the specified index in the list, or null if index is out of bounds. Param Type index number "},"reference/Color.html":{"url":"reference/Color.html","title":"Color","keywords":"","body":" Color Kind: class Color new Color(value, opacity) .a : number .r : number .g : number .b : number .toRgba() ⇒ !{r:number, g:number, b:number, a:number} .toHex(forceSixDigits) ⇒ string .clone() ⇒ !Color new Color(value, opacity) Create a new color instance. Param Type Description value ! string | number | {r:number, g:number, b:number, a:?number}` One of:String in CSS color format (hex, rgb, rgba, hsl, hsla, hsv, hsva, or color name)ARGB numeric value (unsigned 32-bit integer)Object with `r`, `g`, `b`, `a` keys all set to integers from 0 - 255 (if `a` is omitted, 255 is used) opacity ?number Optional, floating-point value from 0 - 1. Use when value parameter doesn't specify an opacity and you don't want the default 1.0 (100%) opacity. color.a : number Integer 0-255. Get/set the alpha channel value. Kind: instance property of Color color.r : number Integer 0-255. Get/set the red channel value. Kind: instance property of Color color.g : number Integer 0-255. Get/set the green channel value. Kind: instance property of Color color.b : number Integer 0-255. Get/set the blue channel value. Kind: instance property of Color color.toRgba() Convert to an object with r, g, b, a keys where r, g, b, a range from 0 - 255. Kind: instance method of ColorReturns: !{r:number, g:number, b:number, a:number} color.toHex(forceSixDigits) ⇒ string Convert to hex string with \"#\" prefix. Ignores the Color's alpha value. Returns a 3-digit string if possible, otherwise returns a 6-digit string. Kind: instance method of ColorReturns: string - Hex color string in the form #123 or #456ABC. Param Type Description forceSixDigits boolean True if you want the result to always have 6 digits. color.clone() ⇒ !Color Returns a clone of the current color object Kind: instance method of Color "},"reference/ImageFill.html":{"url":"reference/ImageFill.html","title":"ImageFill","keywords":"","body":" ImageFill Kind: class ImageFill represents a bitmap (raster) image that can be used as the fill property of any shape node (but not Artboards). The supported image encodings are: PNG, JPEG, and GIF. Example // User picks an image file const storage = require(\"uxp\").storage; const fs = storage.localFileSystem; let imageFile = await fs.getFileForOpening({ types: storage.fileTypes.images }); // Create ImageFill for this image const ImageFill = require(\"scenegraph\").ImageFill; let fill = new ImageFill(imageFile); // Set fill of first selected item selection.items[0].fill = fill; ImageFill new ImageFill(fileOrDataURI) .clone() ⇒ !ImageFill .scaleBehavior : string .naturalWidth : number .naturalHeight : number .mimeType : string .isLinkedContent : boolean ImageFill() Param Type Description fileOrDataURI !uxp.storage.File or string File object pointing to an image file; or a string containing a data: URI with a base-64 encoded image. imageFill.clone() ⇒ !ImageFill Returns a new copy of this ImageFill. Kind: instance method of ImageFill Returns: !ImageFill imageFill.scaleBehavior : string Default: SCALE_COVER How the image is scaled when the aspect ratio of the shape does not match the aspect ratio of the image: ImageFill.SCALE_COVER - The image's aspect ratio is preserved and it is scaled to completely cover the area of the shape. This means on one axis the image's edges line up exactly with the edges of the shape, and on the other axis the image extends beyond the shape's bounds and is cropped. (Similar to object-fit: cover in CSS). ImageFill.SCALE_STRETCH - The image is stretched (distorting its aspect ratio) so its edges line up exactly with the edges of the shape. (Similar to object-fit: fill in CSS). Image size and scaling are also affected by cropping settings, but these are not yet exposed to plugins. Kind: instance property of ImageFill imageFill.naturalWidth : number Pixel dimensions of the underlying bitmap image data. Kind: instance property of ImageFill Read only: true imageFill.naturalHeight : number Pixel dimensions of the underlying bitmap image data. Kind: instance property of ImageFill Read only: true imageFill.mimeType : string Format the image data was originally encoded in, such as image/gif or image/jpeg. Kind: instance property of ImageFill Read only: true imageFill.isLinkedContent : boolean True if the image comes from a link to an external resource, such as Creative Cloud Libraries. Kind: instance property of ImageFill Read only: true "},"reference/LinearGradientFill.html":{"url":"reference/LinearGradientFill.html","title":"LinearGradientFill","keywords":"","body":" LinearGradientFill Kind: class In a linear gradient, colors blend smoothly along a straight line, extending out perpendicularly from that line. The gradient fills the entire area of the shape it is applied to. LinearGradientFill new LinearGradientFill() .clone() ⇒ !LinearGradientFill .colorStops : !Array .startX : number .startY : number .endX : number .endY : number .getEndPoints() ⇒ !Array .setEndPoints(startX, startY, endX, endY) new LinearGradientFill() Create a new LinearGradientFill instance. linearGradientFill.clone() ⇒ !LinearGradientFill Returns a copy of this instance. Kind: instance method of LinearGradientFill linearGradientFill.colorStops : !ArrayColor}> Array of objects representing each color and its position along the gradient line. The position (stop value) is a number 0.0 - 1.0. Kind: instance property of LinearGradientFill linearGradientFill.startX : number X position of the start of the gradient line, as a multiple of the object's bounding box: X=0 indicates the left edge of the bounding box and X=1 indicates the right edge. The gradient line may start or end outside the object's bounding box, so values may be 1. Kind: instance property of LinearGradientFill linearGradientFill.startY : number Y position of the start of the gradient line, as a multiple of the object's bounding box: Y=0 indicates the top edge of the bounding box and Y=1 indicates the bottom edge. The gradient line may start or end outside the object's bounding box, so values may be 1. Kind: instance property of LinearGradientFill linearGradientFill.endX : number X position of the end of the gradient line, as a multiple of the object's bounding box: X=0 indicates the left edge of the bounding box and X=1 indicates the right edge. The gradient line may start or end outside the object's bounding box, so values may be 1. Kind: instance property of LinearGradientFill linearGradientFill.endY : number Y position of the end of the gradient line, as a multiple of the object's bounding box: Y=0 indicates the top edge of the bounding box and Y=1 indicates the bottom edge. The gradient line may start or end outside the object's bounding box, so values may be 1. Kind: instance property of LinearGradientFill linearGradientFill.getEndPoints() ⇒ !Array Returns an array of [startX, startY, endX, endY]. Kind: instance method of LinearGradientFill *linearGradientFill.setEndPoints(startX, startY, endX, endY) Shorthand for setting all four start/endpoint properties. Kind: instance method of LinearGradientFill "},"reference/Matrix.html":{"url":"reference/Matrix.html","title":"Matrix","keywords":"","body":" Matrix Kind: class Matrix new Matrix(a, b, c, d, e, f) .setFrom(otherMatrix) .clone() ⇒ !Matrix .add(a, b, c, d, e, f) ⇒ !Matrix .multLeft(a, b, c, d, e, f) ⇒ !Matrix .invert() ⇒ !Matrix .translate(tx, ty) ⇒ !Matrix .scale(sx, sy, tx, ty) ⇒ !Matrix .rotate(a, x, y) ⇒ !Matrix .x(x, y) ⇒ number .y(x, y) ⇒ number .transformPoint(point) ⇒ !{x:number, y:number} .transformRect(rect) ⇒ !{x:number, y:number, width:number, height:number} .getTranslate() ⇒ !Array. .determinant() ⇒ number .split() ⇒ !{dx:number, dy:number, scaleX:number, scaleY:number, shear:number, rotate:number, isSimple:boolean} .scaleFactors([flipInfo]) ⇒ !{scaleX:number, scaleY:number} .removedScaleMatrix(scaleX, scaleY) ⇒ !Matrix .hasSkew() ⇒ boolean .getRotation() ⇒ number new Matrix(a, b, c, d, e, f) Creates a new transform matrix with the following structure: | a c e | | b d f | | 0 0 1 | Note: XD does not generally allow transform matrices with scale or shear (skew) components - only translate and rotate components are typically permitted. If no arguments, creates a new identity matrix by default. matrix.setFrom(otherMatrix) Copies another matrix's values into this matrix. Kind: instance method of Matrix Param Type Description otherMatrix !Matrix The matrix to copy values from. matrix.clone() Returns a copy of the matrix Kind: instance method of MatrixReturns: !Matrix matrix.add(aOrMatrix, b, c, d, e, f) ⇒ !Matrix Multiplies a passed affine transform to the right: this * M. The result effectively applies the transform of the passed in matrix first, followed by the transform of this matrix second. Modifies this matrix object and also returns it so calls can be chained. Kind: instance method of MatrixReturns: !Matrix - The current matrix after right multiply. Param Type Description aOrMatrix number !Matrix A Matrix or the a component of an affine transform. b ?number The b component of an affine transform. c ?number The c component of an affine transform. d ?number The d component of an affine transform. e ?number The e component of an affine transform. f ?number The f component of an affine transform. matrix.multLeft(aOrMatrix, b, c, d, e, f) ⇒ !Matrix Multiplies a passed affine transform to the left: M * this. The result effectively applies the transform of this matrix first, followed by the transform of the passed in matrix second. Modifies this matrix object and also returns it so calls can be chained. Kind: instance method of MatrixReturns: !Matrix - The current matrix after left multiply. Param Type Description aOrMatrix number !Matrix A Matrix or the a component of an affine transform. b ?number The b component of an affine transform. c ?number The c component of an affine transform. d ?number The d component of an affine transform. e ?number The e component of an affine transform. f ?number The f component of an affine transform. matrix.invert() ⇒ !Matrix Returns an inverted version of the matrix. Returns a brand new matrix - does not modify this matrix object. Kind: instance method of MatrixReturns: !Matrix matrix.translate(tx, ty) ⇒ !Matrix Applies translation before the current transform of this matrix, as if using the add() method. Modifies this matrix object and also returns it so calls can be chained. Kind: instance method of MatrixReturns: !Matrix Param Type Description tx number horizontal offset distance ty number vertical offset distance matrix.scale(sx, sy, cx, cy) ⇒ !Matrix Applies scaling before the current transform of this matrix, as if using the add() method. Modifies this matrix object and also returns it so calls can be chained. Note: scale transforms are not generally permitted in XD. Kind: instance method of MatrixReturns: !Matrix Param Type Description sx number amount to be scaled, with 1 resulting in no change sy ?number amount to scale along the vertical axis. (Otherwise sx applies to both axes.) cx ?number horizontal origin point from which to scale (if unspecified, scales from the local coordinates' origin point) cy ?number vertical origin point from which to scale matrix.rotate(angle, cx, cy) ⇒ !Matrix Applies clockwise rotation before the current transform of this matrix, as if using the add() method. Modifies this matrix object and also returns it so calls can be chained. Kind: instance method of MatrixReturns: !Matrix Param Type Description angle number angle of rotation, in degrees clockwise cx ?number horizontal origin point from which to rotate (if unspecified, scales from the local coordinates' origin point) cy ?number vertical origin point from which to rotate matrix.x(x, y) ⇒ number Returns x coordinate of the given point after transformation described by this matrix. See also Matrix.y and Matrix.transformPoint. Kind: instance method of MatrixReturns: number Param Type x number y number matrix.y(x, y) ⇒ number Returns y coordinate of the given point after transformation described by this matrix. See also Matrix.x and Matrix.transformPoint. Kind: instance method of MatrixReturns: number Param Type x number y number matrix.transformPoint(point) ⇒ !{x:number, y:number} Returns x & y coordinates of the given point after transformation described by this matrix. Kind: instance method of MatrixReturns: !{x:number, y:number} Param Type point !{x:number, y:number} matrix.transformRect(rect) ⇒ !{x:number, y:number, width:number, height:number} Transforms a rectangle using this matrix, returning the axis-aligned bounds of the resulting rectangle. If this matrix has rotation, then the result will have different width & height from the original rectangle, due to axis alignment. See \"Coordinate Spaces\" for some illustrations of this. Kind: instance method of MatrixReturns: !{x:number, y:number, width:number, height:number} Param Type rect !{x:number, y:number, width:number, height:number} matrix.getTranslate() ⇒ !Array. Kind: instance method of MatrixReturns: !Array. - The translation component of this matrix: [tx, ty]. Equals the e and f components of this matrix. matrix.scaleFactors() ⇒ !{scaleX:number, scaleY:number} Split the matrix into scale factors. This method assumes that there is no skew in the matrix. Kind: instance method of MatrixReturns: !{scaleX:number, scaleY:number} matrix.removedScaleMatrix(scaleX, scaleY) ⇒ !Matrix Returns a new matrix that contains only the translate and rotate components of the current matrix, with the given scale factors stripped out. Must be passed the exact scale factors returned by scaleFactors() for this matrix, and this matrix must have no skew/shear component. Returns a brand new matrix - does not modify this matrix object. Kind: instance method of MatrixReturns: !Matrix - The matrix without the passed scaling factors. Param Type Description scaleX number horrizontal scale component to remove scaleY number vertical scale component to remove matrix.hasSkew() ⇒ boolean Kind: instance method of MatrixReturns: boolean - true, if the matrix includes any skew (shear) "},"reference/Shadow.html":{"url":"reference/Shadow.html","title":"Shadow","keywords":"","body":" Shadow Kind: class Shadow new Shadow(x, y, blur, color, visible) .x : number .y : number .blur : number .color : !Color .visible : boolean new Shadow(x, y, blur, color, visible) Creates a drop shadow style object with the given properties. The visible argument is optional and defaults to true. Param Type x number y number blur number color !Color visible ?boolean shadow.x : number X offset of the shadow relative to the shape it is attached to, in global coordinates (i.e. independent of the shape's rotation or any parent's rotation). May be negative. Kind: instance property of Shadow shadow.y : number Y offset of the shadow relative to the shape it is attached to, in global coordinates (i.e. independent of the shape's rotation or any parent's rotation). May be negative. Kind: instance property of Shadow shadow.blur : number >= 0 Kind: instance property of Shadow shadow.color : !Color Kind: instance property of Shadow shadow.visible : boolean If false, the shadow is not rendered. The user can toggle this via a checkbox in the Properties panel. Kind: instance property of Shadow "},"reference/Blur.html":{"url":"reference/Blur.html","title":"Blur","keywords":"","body":" Blur Kind: class Blur new Blur(blurAmount, brightnessAmount, fillOpacity, visible, backgroundEffect) .blurAmount : number .brightnessAmount : number .fillOpacity : number .isBackgroundEffect : boolean .visible : boolean Blur() Creates an object blur or background blur effect object with the given properties. Param Type blurAmount number brightnessAmount number fillOpacity number [visible] boolean [isBackgroundEffect] boolean blur.blurAmount : number 0 - 50 Kind: instance property of Blur blur.brightnessAmount : number -50 - 50 For background blur effects, the amount to increase or decrease the brightness of the background. Ignored for object blur effects. Kind: instance property of Blur blur.fillOpacity : number 0.0 - 1.0 For background blur effects, the a multiplier on the opacity of the object's fill drawn over top of the blurred background. Useful to create a color tint on top of the blurred background. Does not affect stroke opacity. Ignored for object blur effects. Kind: instance property of Blur blur.isBackgroundEffect : boolean If true, renders a background blur effect: all objects beneath the shape are blurred (modulated by brightnessAmount), but the shape itself is still rendered with crisp edges (with its fill modulated by fillOpacity). If false, renders an object blur effect: the shape itself is blurred, and objects beneath it are unaffected. Kind: instance property of Blur blur.visible : boolean If false, the blur effect is not rendered. The user can toggle this via a checkbox in the Properties panel. Kind: instance property of Blur "},"reference/selection.html":{"url":"reference/selection.html","title":"selection","keywords":"","body":" selection The selection object represents the currently selected set of nodes in the UI. You can set the selection to use it as input for commands, or to determine what is left selected for the user when your plugin's edit operation completes. The current selection state is passed to your command handler function as an argument: function myCommand(selection, documentRoot) { console.log(selection.items.length + \" items are selected\"); } module.exports.commands = { myCommandId: myCommand }; You can also access this object from the scenegraph.selection property. The selection can only contain items within the current edit context: If the user has drilled down into a container node, the container is the current edit context and only its immediate children can be selected. If the user hasn't drilled into any container, the root of the document is the edit context, and the selection may contain any artboard or any combination of the pasteboard's immediate children and one or more artboards' immediate children. The selection cannot contain both artboards and non-artboards at the same time, however. Don't assume that all selected items have the same parent node: in the root edit context, the selection can contain items with differing parents (multiple different artboards, as well as the root node). Items that are locked cannot be in the selection. If the user or your plugin attempts to select any locked items, they are automatically filtered into a separate list (itemsIncludingLocked) which is generally only used by the Unlock command. Kind: object selection .items : !Array .itemsIncludingLocked : !Array .hasArtwork : boolean .hasArtboards : boolean .editContext : !SceneNode .insertionParent : !SceneNode .focusedArtboard : ?Artboard selection.items : !ArraySceneNode> Array representing the current selection. Empty array if nothing is selected (never null). Never includes locked nodes. May include items with different parents (for example, an item in an artboard plus an item on the pasteboard can be selected at the same time). Never mixes artboards with other nodes: a selection is either all artboards or all non-artboards. As a convenience, the setter also accepts a single node or null as valid input. However, the getter always returns an array. If the user selects nodes one-by-one, by Shift-clicking, this array lists the nodes in the order they were added to the selection. If the user selected by other means, e.g. dragging a marquee, the order has no meaning. Returns a fresh array each time, so this can be mutated by the caller without interfering with anything. Mutating the array does not change the selection - only invoking the 'items' setter changes selection. Kind: instance property of selectionExample console.log(\"There are \" + selection.items.length + \" nodes currently selected\"); selection.items = [rectangle, ellipse, path]; // select 3 nodes selection.items = rectangle; // select 1 node (convenience) selection.items = null; // deselect all (convenience) selection.itemsIncludingLocked : !ArraySceneNode> Array representing the current selection plus any locked items that the user has attempted to select. Kind: instance property of selectionRead only: trueExample let numUnlockedSelected = selection.items.length; let numLockedSelected = selection.itemsIncludingLocked.length - numUnlockedSelected; console.log(\"There are \" + numLockedSelected + \" locked nodes 'sort of' currently selected\"); selection.hasArtwork : boolean True if the selection isn’t empty and consists of one or more non-Artboards. Never true at the same time as hasArtboards. Kind: instance property of selectionRead only: true selection.hasArtboards : boolean True if the selection isn’t empty and consists of one or more Artboards. Never true at the same time as hasArtwork. Kind: instance property of selectionRead only: true selection.editContext : !SceneNode The context in which selection and edit operations must occur. If the user hasn't drilled into any container node, this value is the document root, and its scope includes all immediate children of the pasteboard (including Artboards), and all immediate children of all those Artboards. Kind: instance property of selectionRead only: true selection.insertionParent : !SceneNode The preferred parent to insert newly added content into. Takes into account the current edit context as well as the \"focused artboard\" if in the root context. Kind: instance property of selectionRead only: true selection.focusedArtboard : ?Artboard The artboard the user is currently most focused on (via recent selection or edit operations). May be null, for example if no artboards exist or if the user just deleted an artboard. Kind: instance property of selectionRead only: true "},"reference/viewport.html":{"url":"reference/viewport.html","title":"viewport","keywords":"","body":" viewport The viewport module represents the current UI view of the XD document's content. Example // Pan viewport to bring the region x:100, y:200, width:50, height:50 into view viewport.scrollIntoView(100, 200, 50, 50); // Pan view to the first selected object if (selection.items.length > 0) { viewport.scrollIntoView(selection.items[0]); } // Pan view to center the location x:100, y:200 viewport.scrollToCenter(100, 200); // Zoom & pan to show entire region x:100, y:200, width:50, height:50 viewport.zoomToRect(100, 200, 50, 50); console.log(\"Viewport at:\", viewport.bounds); // e.g. \"{ x:100, y:50, width:1400, height:900 }\" console.log(\"Zoom:\", viewport.zoomFactor); // e.g. \"0.66\" Since: XD 14 viewport .scrollIntoView(node) | (x, y, width, height) .scrollToCenter(x, y) .zoomToRect(node) | (x, y, width, height) .bounds : !{x:number, y:number, width:number, height:number} .zoomFactor : number viewport.scrollIntoView(node) | (x, y, width, height) Smoothly pan the viewport to bring the entire given region into view. If the region is already fully in view, does nothing. If the given region is too large to fit entirely in view, it is simply centered (zoom remains unchanged). The region can be defined by passing a SceneNode, or by explicitly specifying a rectangle in global coordinates. Kind: static method of viewport viewport.scrollIntoView(node) : Param Type node !SceneNode viewport.scrollIntoView(x, y, width, height) : Param Type x number y number width number height number viewport.scrollToCenter(x, y) Smoothly pan the viewport to center on a specific point in the document's global coordinates. Even if the point is already in view, the view pans until it is centered. Kind: static method of viewport Param Type x number y number viewport.zoomToRect(node) | (x, y, width, height) Zoom & pan the view as needed so the given region fills the viewport (with some padding). If the region is large, zooms out as needed so it fits entirely in view. If the region is smaller, zooms in so the region fills the entire viewport - may zoom in past 100% to achieve this. The region can be defined by passing a SceneNode, or by explicitly specifying a rectangle in global coordinates. Kind: static method of viewport viewport.zoomToRect(node) : Param Type node !SceneNode viewport.zoomToRect(x, y, width, height) : Param Type x number y number width number height number viewport.bounds : !{x:number, y:number, width:number, height:number} The current viewport bounds expressed in global coordinates. Kind: static property of viewport Read only: true viewport.zoomFactor : number The current viewport zoom factor (where 1.0 = 100% zoom, 0.5 = 50% zoom, etc.). Kind: static property of viewport Read only: true "},"reference/uxp/class/OS.html":{"url":"reference/uxp/class/OS.html","title":"OS","keywords":"","body":" OS Kind: global classAccess: publicSee: https://nodejs.org/api/os.html OS .platform() ⇒ string .release() ⇒ string oS.platform() ⇒ string Gets the platform we are running on (eg. \"win10\", \"darwin\") Kind: instance method of OSReturns: string - the string representing the platformAccess: public oS.release() ⇒ string Gets the release number of the os (eg. \"10.0.1.1032\") Kind: instance method of OSReturns: string - the string representing the releaseAccess: public "},"reference/uxp/storage-index.html":{"url":"reference/uxp/storage-index.html","title":"Storage APIs","keywords":"","body":"Storage Using the File API XD provides a simple, cross-platform API surface that makes it easy to read and write text and binary files. Three key things to note: Instead of working with string paths, you work with File and Folder objects. Access to the user's files requires showing a file picker UI, but you can access temporary files and any files packaged inside your plugin without needing any user interaction. If you have a File/Folder object, then you have access to the corresponding item on disk. File APIs are asynchronous, returning Promises which you can use with then() or the async/await keywords. Getting access to the local file system Start using the file system APIs by obtaining a FileSystemProvider object (shortened to fs in the code here): const fs = require(\"uxp\").storage.localFileSystem; You can use the fs object to access a temporary folder or your plugin's own folder immediately, or request access to user folders by showing a file picker: // These require no user interaction: const tempFolder = await fs.getTemporaryFolder(); const pluginFolder = await fs.getPluginFolder(); // read-only access to the plugin's install folder const pluginDataFolder = await fs.getDataFolder(); // folder to store settings // Display file/folder picker UI to access user files: const userFolder = await fs.getFolder(); // folder picker const aFile = await fs.getFileForOpening(); // \"Open\" file picker, suitable for reading contents const anotherFile = await fs.getFileForSaving(\"hello.txt\"); // \"Save\" file picker, suitable for writing contents If you have a Folder, you can use getEntries() to enumerate the folder's contents: const entries = await folder.getEntries(); entries.forEach(entry => console.log(entry.name)); If you have a File, you can read and write its contents like so: const contents = await aFile.read(); await anotherFile.write(contents); You can create new files inside a folder you have access to: const newFile = await folder.createEntry(\"examples.txt\", {overwrite: true}); newFile.write(\"Hello, world!\"); See the full reference. "},"reference/uxp/module/storage.html":{"url":"reference/uxp/module/storage.html","title":"Storage module","keywords":"","body":" storage storage .Entry .name : string .provider : FileSystemProvider .url : URL .nativePath : string .isEntry : boolean .isFile : boolean .isFolder : boolean .toString() ⇒ string .copyTo(folder, options) ⇒ Promise .moveTo(folder, options) ⇒ Promise .delete() ⇒ Promise .getMetadata() ⇒ Promise. .EntryMetadata .name : string .size : number .dateCreated : Date .dateModified : Date .isFile : boolean .isFolder : boolean .File .mode : Symbol .read(options) ⇒ Promise. .write(data, options) .FileSystemProvider .getFileForOpening(options) ⇒ Promise. or Promise.> .getFileForSaving(suggestedName, options) ⇒ Promise. .getFolder() ⇒ Promise. .getTemporaryFolder() ⇒ Promise. .getDataFolder() ⇒ Promise. .getPluginFolder() ⇒ Promise. .getFsUrl(entry) ⇒ URL .getNativePath(entry) ⇒ string .Folder ⇐ Entry .getEntries() ⇒ Promise.> .createFile(name, options) ⇒ Promise. .createFolder(name) ⇒ Folder .getEntry(filePath) ⇒ Promise. .renameEntry(entry, newName, options) ⇒ Promise .localFileSystem : LocalFileSystemProvider .errors : Errors .AbstractMethodInvocationError ⇐ Error .ProviderMismatchError ⇐ Error .EntryIsNotAnEntryError ⇐ Error .EntryIsNotAFolderError ⇐ Error .EntryIsNotAFileError ⇐ Error .NotAFileSystemError ⇐ Error .OutOfSpaceError ⇐ Error .PermissionDeniedError ⇐ Error .EntryExistsError ⇐ Error .FileIsReadOnlyError ⇐ Error .DomainNotSupportedError ⇐ Error .InvalidFileNameError ⇐ Error .fileTypes .text .images .all .formats .utf8 : Symbol .binary : Symbol .modes .readOnly : Symbol .readWrite : Symbol .types .file : Symbol .folder : Symbol storage.Entry An Entry is the base class for File and Folder. You'll never instantiate an Entry directly, but it provides the common fields and methods that both File and Folder share. Important: An Entry object may exist even if the corresponding file/folder on disk does not currently exist. It's possible for multiple Entry objects to represent the same item on disk, for example if the item was picked via multiple separate file picker invocations. Kind: static class of storage Since: XD 13 .Entry .name : string .provider : FileSystemProvider .url : URL .nativePath : string .isEntry : boolean .isFile : boolean .isFolder : boolean .toString() ⇒ string .copyTo(folder, options) ⇒ Promise .moveTo(folder, options) ⇒ Promise .delete() ⇒ Promise .getMetadata() ⇒ Promise. entry.name : string The name of this entry. Read-only. Kind: instance property of Entry Read only: true Since: XD 13 Example console.log(anEntry.name); entry.provider : FileSystemProvider The associated provider that services this entry. Read-only. Kind: instance property of Entry Read only: true Since: XD 13 Example if (entryOne.provider !== entryTwo.provider) { throw new Error(\"Providers are not the same\"); } entry.url : URL The url of this entry. You can use this url as the src attribute of an tag in the UI. Read-only. Kind: instance property of Entry Read only: true Since: XD 13 Example console.log(anEntry.url); entry.nativePath : string The platform native file-system path of this entry. Read-only Kind: instance property of Entry Read only: true Since: XD 13 Example console.log(anEntry.nativePath); entry.isEntry : boolean Indicates that this instance is an Entry. Useful for type-checking. Kind: instance property of Entry Example if (something.isEntry) { return something.getMetadata(); } entry.isFile : boolean Indicates that this instance is not a File. Useful for type- checking. Kind: instance property of Entry Read only: true Example if (!anEntry.isFile) { return \"This entry is not a file.\"; } entry.isFolder : boolean Indicates that this instance is not a folder. Useful for type- checking. Kind: instance property of Entry Read only: true Example if (!anEntry.isFolder) { return \"This entry is not a folder.\"; } entry.toString() ⇒ string Returns the details of the given entry like name, type and native path in a readable string format. Kind: instance method of Entry Since: XD 13 entry.copyTo(folder, options) ⇒ Promise Copies this entry to the specified folder. The Entry object passed to this function will continue to reference the original item - it is not updated to reference the copy. Kind: instance method of Entry Throws: EntryExists if the attempt would overwrite an entry and overwrite is false PermissionDenied if the underlying file system rejects the attempt OutOfSpace if the file system is out of storage space Since: XD 13 Param Type Default Description folder Folder the folder to which to copy this entry options * [options.overwrite] boolean false if true, allows overwriting existing entries Example await someFile.copyTo(someFolder); Example await someFile.copyTo(someFolder, {overwrite: true}); Example await someFolder.copyTo(anotherFolder, {overwrite: true}); entry.moveTo(folder, options) ⇒ Promise Moves this entry to the target folder, optionally specifying a new name. The Entry object passed to this function is automatically updated to reference the new location, however any other Entry objects referencing the original item will not be updated, and will thus no longer point to an item that exists on disk. Kind: instance method of Entry Since: XD 13 Param Type Default Description folder Folder the folder to which to move this entry options * [options.overwrite] boolean false If true allows the move to overwrite existing files [options.newName] string If specified, the entry is renamed to this name Example await someFile.moveTo(someFolder); Example await someFile.moveTo(someFolder, {overwrite: true}); Example await someFolder.moveTo(anotherFolder, {overwrite: true}); Example await someFile.moveTo(someFolder, {newName: 'masterpiece.txt'}) Example await someFile.moveTo(someFolder, {newName: 'novel.txt', {overwrite: true}) entry.delete() ⇒ Promise Removes this entry from the file system. If the entry is a folder, you must remove the files inside before removing the folder. Kind: instance method of Entry Since: XD 13 Example await aFile.delete(); entry.getMetadata() ⇒ Promise. Returns this entry's metadata. Kind: instance method of Entry Since: XD 13 Example const metadata = await aFile.getMetadata(); storage.EntryMetadata Metadata for an entry. It includes useful information such as: size of the file (if a file) date created date modified name You'll never instantiate an EntryMetadata directly; instead use getMetadata to get metadata for a specific File or Folder entry. Kind: static class of storage .EntryMetadata .name : string .size : number .dateCreated : Date .dateModified : Date .isFile : boolean .isFolder : boolean entryMetadata.name : string The name of the entry. Kind: instance property of EntryMetadata entryMetadata.size : number The size of the entry, if a file. Zero if a folder. Kind: instance property of EntryMetadata entryMetadata.dateCreated : Date The date this entry was created. Kind: instance property of EntryMetadata entryMetadata.dateModified : Date The date this entry was modified. Kind: instance property of EntryMetadata entryMetadata.isFile : boolean Indicates if the entry is a file Kind: instance property of EntryMetadata entryMetadata.isFolder : boolean Indicates if the entry is a folder Kind: instance property of EntryMetadata storage.File Represents a file on a file system. Provides methods for reading from and writing to the file. You'll never instantiate a File directly; instead you'll get access via a FileSystemProvider. method such as getFileForOpening(). Kind: static class of storage Since: XD 13 Important: A File object may exist even if the corresponding file on disk does not currently exist. It's possible for multiple File objects to represent the same file on disk, for example if the file was picked via multiple separate file picker invocations. .File .mode : Symbol .read(options) ⇒ Promise. .write(data, options) file.mode : Symbol Indicates whether this File object supports read-only or read-write access. See readOnly and readWrite. Kind: instance property of File Since: XD 13 Example if (aFile.mode === modes.readOnly) { throw new Error(\"Can't write to a file opened as read-only.\"); } file.read(options) ⇒ Promise. Reads data from the file and returns it. The file format can be specified with the format option. If a format is not supplied, the file is assumed to be a text file using UTF8 encoding. Kind: instance method of File Returns: Promise. - the contents of the file Since: XD 13 Param Type Default Description options Object [options.format] Symbol formats.utf8 Optional. Format to read: one of storage.formats.utf8 or storage.formats.binary. Example const text = await myNovel.read(); // 'text' is a string Example const data = await myNovel.read({format: formats.binary}); // 'data' is an ArrayBuffer console.log(\"File is \" + data.byteLength + \" bytes long.\"); file.write(data, options) Writes data to a file, appending if desired. The format of the file is controlled via the format option, and defaults to UTF8. Kind: instance method of File Throws: FileIsReadOnly if writing to a read-only file OutOfSpace If writing to the file causes the file system to exceed the available space (or quota) Since: XD 13 Param Type Default Description data string or ArrayBuffer Data to write to the file options Object [options.format] Symbol formats.utf8 Optional. Format to write: storage.formats.utf8 or storage.formats.binary. Example await myNovel.write(\"It was a dark and stormy night.\\n\"); Example const data = new Uint8Array([0xFF, 0xA1]); await aDataFile.write(data, {format: formats.binary}); // writes a 2-byte file storage.FileSystemProvider Provides access to files and folders on a file system. You don't instantiate this directly; instead you'll use an instance that has already been created for you. Kind: static class of storage Since: XD 13 .FileSystemProvider .getFileForOpening(options) ⇒ Promise. or Promise.> .getFileForSaving(suggestedName, options) ⇒ Promise. .getFolder() ⇒ Promise. .getTemporaryFolder() ⇒ Promise. .getDataFolder() ⇒ Promise. .getPluginFolder() ⇒ Promise. .getFsUrl(entry) ⇒ URL .getNativePath(entry) ⇒ string fileSystemProvider.getFileForOpening(options) ⇒ Promise. or Promise.> Gets a file (or files) suitable for reading by displaying an \"Open\" file picker dialog to the user. File entries returned by this API are read-only - use getFileForSaving to get a File entry you can write to. The user can select multiple files only if the allowMultiple option is true. Kind: instance method of FileSystemProvider Returns: Promise. or Promise.> - ?File if allowMultiple is false (null if picker canceled); or !Array if allowMultiple is true (length 0 if picker canceled) Since: XD 13 Param Type Default Description options Object [options.types] Array. ['*'] Optional. Allowed file extensions, with no \".\" prefix; use storage.fileTypes.all to allow any file to be picked [options.allowMultiple] boolean false Optional. If true, multiple files can be selected and this API returns Array.If false, only one file can be selected and this API returns a File directly. Example const file = await fs.getFileForOpening(); if (!file) { // file picker dialog was canceled return; } const text = await file.read(); Example const files = await fs.getFileForOpening({allowMultiple: true, types: fileTypes.images}); if (files.length === 0) { // no files selected } fileSystemProvider.getFileForSaving(suggestedName, options) ⇒ Promise. Gets a file reference suitable for read-write by displaying a \"Save\" file picker dialog to the user. If the act of writing to the file would overwrite it, the file picker will prompt the user to confirm before returning a result to you. Kind: instance method of FileSystemProvider Returns: Promise. - returns the selected file, or null if canceled Since: XD 13 Param Type Description suggestedName string Required. The file extension should match one of the options specified in the types option. options Object [options.types] Array. Required. Allowed file extensions, with no \".\" prefix. Example const file = await fs.getFileForSaving(\"output.txt\", { types: [ \"txt\" ]}); if (!file) { // file picker was cancelled return; } await file.write(\"It was a dark and stormy night\"); fileSystemProvider.getFolder() ⇒ Promise. Gets a folder from the file system via a folder picker dialog. The files and folders within can be accessed via getEntries. Any files within are read-write. If the user cancels the picker, null is returned instead. Kind: instance method of FileSystemProvider Returns: Promise. - the selected folder or null if picker is canceled. Since: XD 13 Example const folder = await fs.getFolder(); const myNovel = (await fs.getEntries()).find(entry => entry.name.includes('novel')); const text = await myNovel.read(); fileSystemProvider.getTemporaryFolder() ⇒ Promise. Returns a temporary folder. The contents of the folder may be lost when the host application is closed. Kind: instance method of FileSystemProvider Since: XD 13 Example const temp = await fs.getTemporaryFolder(); fileSystemProvider.getDataFolder() ⇒ Promise. Returns a folder that can be used for storing plugin-specific data without needing user interaction though a file picker. Its contents remain persistent when the host application is updated and when your plugin is updated. Kind: instance method of FileSystemProvider Since: XD 13 fileSystemProvider.getPluginFolder() ⇒ Promise. Returns an plugin's folder – this folder and everything within it are read only. This contains all the Plugin related packaged assets. Kind: instance method of FileSystemProvider Since: XD 13 fileSystemProvider.getFsUrl(entry) ⇒ URL Returns the fs url of given entry. Kind: instance method of FileSystemProvider Param Type entry Entry fileSystemProvider.getNativePath(entry) ⇒ string Returns the platform native file system path of given entry. Kind: instance method of FileSystemProvider Param Type entry Entry storage.Folder ⇐ Entry Represents a folder on a file system. You'll never instantiate this directly, but will get it by calling getTemporaryFolder, getFolder, or via getEntries. Important: A Folder object may exist even if the corresponding folder on disk does not currently exist. It's possible for multiple Folder objects to represent the same folder on disk, for example if the folder was picked via multiple separate folder picker invocations. Kind: static class of storage Extends: Entry Since: XD 13 .Folder ⇐ Entry .getEntries() ⇒ Promise.> .createFile(name, options) ⇒ Promise. .createFolder(name) ⇒ Folder .getEntry(filePath) ⇒ Promise. .renameEntry(entry, newName, options) ⇒ Promise folder.getEntries() ⇒ Promise.> Returns an array of entries contained within this folder. Kind: instance method of Folder Returns: Promise.> - The entries within the folder. Since: XD 13 Example const entries = await aFolder.getEntries(); const allFiles = entries.filter(entry => entry.isFile); folder.createFile(name, options) ⇒ Promise. Creates a File object within this folder, which need not correspond to a file that exists on disk yet. Important: If the file already exists on disk (and overwrite is true), creates a File object but does not modify the existing file on disk in any way. If the file does not exist yet, creates a File object but does not create the file on disk yet. You can then use write to create the file and give it content. Kind: instance method of Folder Returns: Promise. - the created file entry Since: XD 13 Param Type Default Description name string the name of the file to create. options Object [options.overwrite] boolean false If false, the call will fail if the file already exists. If true, the call will succeed regardless of whether the file currently exists on disk. Example const myNovelTxtFile = await aFolder.createFile(\"mynovel.txt\"); folder.createFolder(name) ⇒ Folder Creates a Folder object within this folder and creates the folder on disk. Unlike createFile(), this call does modify the disk, and it cannot be used if the folder already exists (use getEntry in that case). Important: If the folder already exists on disk, fails with an error. If the folder does not exist yet, immediately creates it on disk and then returns a Folder object for it. Kind: instance method of Folder Returns: Folder - the created folder entry object Since: XD 13 Param Type Description name string the name of the folder to create. Example const myCollectionsFolder = await aFolder.createFolder(\"collections\"); folder.getEntry(filePath) ⇒ Promise. Returns a File or Folder entry for an item that already exists on disk within this folder or its hierarchy of subfolders. Fails if no entry with the given name/path currently exists on disk. Kind: instance method of Folder Returns: Promise. - the fetched entry. Since: XD 13 Param Type Description filePath string Name, with optional relative path prefix, of an existing entry within this folder Example const myNovel = await aFolder.getEntry(\"mynovel.txt\"); folder.renameEntry(entry, newName, options) ⇒ Promise Renames an item on disk to a new name within the same folder. The Entry object passed to this function is automatically updated to reference the new name, however any other Entry objects referencing the original item will not be updated, and will thus no longer point to an item that exists on disk. Kind: instance method of Folder Since: XD 13 Param Type Default Description entry Entry entry to rename (File or Folder). Must exist. newName string the new name to assign options any [options.overwrite] boolean false if true, renaming can overwrite an existing entry Example await myNovels.rename(myNovel, \"myFantasticNovel.txt\"); storage.localFileSystem : LocalFileSystemProvider Kind: static property of storage storage.errors : Errors Kind: static property of storage .errors : Errors .AbstractMethodInvocationError ⇐ Error .ProviderMismatchError ⇐ Error .EntryIsNotAnEntryError ⇐ Error .EntryIsNotAFolderError ⇐ Error .EntryIsNotAFileError ⇐ Error .NotAFileSystemError ⇐ Error .OutOfSpaceError ⇐ Error .PermissionDeniedError ⇐ Error .EntryExistsError ⇐ Error .FileIsReadOnlyError ⇐ Error .DomainNotSupportedError ⇐ Error .InvalidFileNameError ⇐ Error errors.AbstractMethodInvocationError ⇐ Error Attempted to invoke an abstract method. Kind: static class of errors Extends: Error errors.ProviderMismatchError ⇐ Error Attempted to execute a command that required the providers of all entries to match. Kind: static class of errors Extends: Error errors.EntryIsNotAnEntryError ⇐ Error The object passed as an entry is not actually an Entry. Kind: static class of errors Extends: Error errors.EntryIsNotAFolderError ⇐ Error The entry is not a folder, but was expected to be a folder. Kind: static class of errors Extends: Error errors.EntryIsNotAFileError ⇐ Error The entry is not a file, but was expected to be. Kind: static class of errors Extends: Error errors.NotAFileSystemError ⇐ Error The instance was expected to be a file system, but wasn't. Kind: static class of errors Extends: Error errors.OutOfSpaceError ⇐ Error The file system is out of space (or quota has been exceeded) Kind: static class of errors Extends: Error errors.PermissionDeniedError ⇐ Error The file system revoked permission to complete the requested action. Kind: static class of errors Extends: Error errors.EntryExistsError ⇐ Error An attempt was made to overwrite an entry without indicating that it was safe to do so via overwrite: true. Kind: static class of errors Extends: Error errors.FileIsReadOnlyError ⇐ Error An attempt was made to write to a file that was opened as read-only. Kind: static class of errors Extends: Error errors.DomainNotSupportedError ⇐ Error Domain is not supported by the current FileSystemProvider instance. Kind: static class of errors Extends: Error errors.InvalidFileNameError ⇐ Error The file name contains invalid characters Kind: static class of errors Extends: Error storage.fileTypes This namespace describes the various file type extensions that can used be used in some FS file open methods. Kind: static constant of storage .fileTypes .text .images .all fileTypes.text Text file extensions Kind: static property of fileTypes fileTypes.images Image file extensions Kind: static property of fileTypes fileTypes.all All file types Kind: static property of fileTypes storage.formats This namespace describes the file content formats supported in FS methods like read and write. Kind: static constant of storage .formats .utf8 : Symbol .binary : Symbol formats.utf8 : Symbol UTF8 File encoding Kind: static property of formats formats.binary : Symbol Binary file encoding Kind: static property of formats storage.modes This namespace describes the access modes that can be supported by a given File entry. Kind: static constant of storage .modes .readOnly : Symbol .readWrite : Symbol modes.readOnly : Symbol The file is read-only; attempts to write will fail. Kind: static property of modes modes.readWrite : Symbol The file is read-write. Kind: static property of modes storage.types This namespace describes the type of the entry. Whether file or folder etc. Kind: static constant of storage .types .file : Symbol .folder : Symbol types.file : Symbol A file; used when creating an entity Kind: static property of types types.folder : Symbol A folder; used when creating an entity Kind: static property of types "},"reference/uxp/network-index.html":{"url":"reference/uxp/network-index.html","title":"Network APIs","keywords":"","body":"Network Network I/O The Network I/O subsystem mimics the standards found on the web. The following API surfaces are available: Web Sockets XD Documentation MDN documentation XMLHttpRequest XD Documentation MDN documentation Fetch XD Documentation MDN documentation Web Socket Support The entire web socket API is supported, except for extensions handling. XMLHttpRequest Support Most of the XHR API surface is supported, including: Setting request headers Getting response headers Event handling Sending text and binary data Text is expected to be UTF8 encoded. Binary data uses ArrayBuffer, not blobs Sending binary data is not currently supported (but coming) Unsupported portions of the surface: responseURL Sending / receiving blobs is not supported Synchronous XHR will throw an error Fetch Support Fetch is polyfilled on top of the XHR implementation using https://github.com/github/fetch. "},"reference/uxp/class/XMLHttpRequest.html":{"url":"reference/uxp/class/XMLHttpRequest.html","title":"XMLHttpRequest","keywords":"","body":" global.XMLHttpRequest Kind: static class of global .XMLHttpRequest new XMLHttpRequest() .responseURL .readyState ⇒ int .responseText ⇒ string .responseXML ⇒ object .response ⇒ string or ArrayBuffer or Blob or Object .status ⇒ string .statusText ⇒ string .timeout .timeout .responseType ⇒ string .responseType .withCredentials .withCredentials .upload ⇒ XMLHttpRequestEventUpload .abort() .getAllResponseHeaders() ⇒ string .getResponseHeader(name) ⇒ string .open(method, url, [async], [user], [password]) .overrideMimeType(mimetype) .setRequestHeader(header, data) .send([data]) new XMLHttpRequest() The constructor initializes an XMLHttpRequest. It must be called before any other method calls. xmlHttpRequest.responseURL Unsupported Kind: instance property of XMLHttpRequest Read only: true xmlHttpRequest.readyState ⇒ int Returns an unsigned short, the state of the request. Kind: instance property of XMLHttpRequest Returns: int - returns the state of the XMLHttpRequest client. Read only: true xmlHttpRequest.responseText ⇒ string Returns a DOMString that contains the response to the request as text, or null if the request was unsuccessful or has not yet been sent. Kind: instance property of XMLHttpRequest Returns: string - returns the received text response. Read only: true xmlHttpRequest.responseXML ⇒ object Returns the XML document that supports W3C DOM level2 specification. The XML document is constructed with received bytes using XMLHttpRequest. Kind: instance property of XMLHttpRequest Returns: object - returns the XML document response. Throws: DOMException if responseType is not the empty string or \"document\". Read only: true xmlHttpRequest.response ⇒ string or ArrayBuffer or Blob or Object Returns the response from the server in the type specified by responseType. Only valid after the load event fires. Kind: instance property of XMLHttpRequest Returns: string or ArrayBuffer or Blob or Object - returns an ArrayBuffer, Blob, Document, JavaScript object, or a DOMString, depending on the value of; XMLHttpRequest.responseType that contains the response entity body. Read only: true xmlHttpRequest.status ⇒ string Kind: instance property of XMLHttpRequest Returns: string - returns the HTTP status code received from the server. Read only: true xmlHttpRequest.statusText ⇒ string Kind: instance property of XMLHttpRequest Returns: string - returns the response's status message with regard to the HTTP status code received from the server. Read only: true xmlHttpRequest.timeout The number of milliseconds a request can take before automatically being terminated. The default value is 0, which means there is no timeout. Kind: instance property of XMLHttpRequest xmlHttpRequest.timeout Terminates a request and a timeout event will be dispatched after the given time has passed. Kind: instance property of XMLHttpRequest Throws: DOMException if called for synchronous request. Param Type Description value number number of milliseconds a request can take automatically being terminated. xmlHttpRequest.responseType ⇒ string Kind: instance property of XMLHttpRequest Returns: string - returns a string taken from the XMLHttpRequestResponseType enum which specifies; what type of data the response contains. xmlHttpRequest.responseType Kind: instance property of XMLHttpRequest Param Type Description value string A string indicating the type of data contained in the response. This should be \"arraybuffer\", \"blob\", \"document\", \"json\" or \"text\". xmlHttpRequest.withCredentials Indicates whether to send cookies on a HTTP request. When the value is set to true, XMLHttpRequest sends cookies. Otherwise, cookies are not sent. Kind: instance property of XMLHttpRequest xmlHttpRequest.withCredentials Kind: instance property of XMLHttpRequest Throws: DOMException when set if state is not unsent or opened. Param Type Default Description [value] Boolean true whether to send cookies on a HTTP request. xmlHttpRequest.upload ⇒ XMLHttpRequestEventUpload If XMLHttpRequest has data in the body to upload, upload related event will be notified via XMLHttpRequest.upload. Kind: instance property of XMLHttpRequest Returns: XMLHttpRequestEventUpload - returns XMLHttpRequestEventUpload object. Read only: true xmlHttpRequest.abort() Aborts the request if it has already been sent. Kind: instance method of XMLHttpRequest xmlHttpRequest.getAllResponseHeaders() ⇒ string Returns sorted and combined response’s header list. Each header field is defined by a group of [lower cased name]\": \"[value]\"\\r\\n\". Combined value is separated by \", \". Kind: instance method of XMLHttpRequest Returns: string - returns response’s header list. Read only: true xmlHttpRequest.getResponseHeader(name) ⇒ string Returns the matching value of the given field name in response's header. The search key value is case-insensitive Kind: instance method of XMLHttpRequest Returns: string - returns the value of the given name in response's header list. Read only: true Param Type Description name string The name to search in response's header list. xmlHttpRequest.open(method, url, [async], [user], [password]) Initializes a request. This method is to be used from JavaScript code; to initialize a request from native code, use openRequest() instead. Self-signed certificates are not currently supported for HTTPS connections. Kind: instance method of XMLHttpRequest Param Type Default Description method string The HTTP request method to use, such as \"GET\", \"POST\", \"PUT\", \"DELETE\", etc. Ignored for non-HTTP(S) URLs. url string A DOMString representing the URL to send the request to. [async] boolean true An optional Boolean parameter, defaulting to true, indicating whether or not to perform the operation asynchronously. If this value is false, the send() method does not return until the response is received. If true, notification of a completed transaction is provided using event listeners. This must be true if the multipart attribute is true, or an exception will be thrown. [user] string null The optional user name to use for authentication purposes; by default, this is the null value. [password] string null The optional password to use for authentication purposes; by default, this is the null value. xmlHttpRequest.overrideMimeType(mimetype) Use a MIME type other than the one provided by the server when interpreting the data being transferred in a request. If parsing the MIME type fails, \"application/octet-stream\" will be used to interpret the data. Kind: instance method of XMLHttpRequest Throws: DOMException if state is loading or done Param Type Description mimetype string MIME type Since Only UTF-8 is supported for charset of text encoding, MIME type’s parameters \"charset\" with other values than 'UTF-8' is not valid. xmlHttpRequest.setRequestHeader(header, data) Sets the value of an HTTP request header. You must call setRequestHeader()after open(), but before send(). Kind: instance method of XMLHttpRequest Param Type Description header string The name of the header whose value is to be set. data string The value to set as the body of the header. xmlHttpRequest.send([data]) Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent. Kind: instance method of XMLHttpRequest Param Type Default Description [data] * A body of data to be sent in the XHR request. This can be: A Document, in which case it is serialized before being sent. A BodyInit, which as per the Fetch spec can be a Blob, BufferSource, FormData, URLSearchParams, ReadableStream, or USVString object. If no value is specified for the body, a default value of null is used. The best way to send binary content (e.g. in file uploads) is by using an ArrayBufferView or Blob in conjunction with the send() method. "},"reference/uxp/function/fetch.html":{"url":"reference/uxp/function/fetch.html","title":"fetch","keywords":"","body":" global.fetch(input, [init]) ⇒ Promise. Kind: static method of globalReturns: Promise. - @see ResponseThrows: TypeError when init.body is set and init.method is either \"GET\" or \"HEAD\". when either network error or network time-out occurs after a http request is made. Param Type Default Description input string or Request either the URL string to connect with or a Request object having the URL and the init option in the below. [init] Object custom options for a HTTP request. [init.method] Object \"GET\" the HTTP request method. [init.headers] Headers the HTTP request headers to add. [init.body] string the body that is included in the HTTP request body. [init.credentials] string \"\\\"omit\\\"\" indicates whether to send cookies. Possible values and functions are as follows: \"omit\" : cookies are NOT sent, \"same-origin\" and \"include\" : cookies are sent. "},"reference/uxp/class/WebSocket.html":{"url":"reference/uxp/class/WebSocket.html","title":"WebSocket","keywords":"","body":" global.WebSocket Kind: static class of global .WebSocket new WebSocket(url, protocols) .protocol ⇒ string .bufferedAmount ⇒ number .binaryType .binaryType ⇒ string .send(data) .close([code], [reason]) new WebSocket(url, protocols) Param Type Description url string The URL to which to connect; this should be the URL to which the WebSocket server will respond. protocols string or Array. Either a single protocol string or an array of protocol strings. Example usage: let ws = new WebSocket(\"ws://demos.kaazing.com/echo\",\"xmpp\"); Throws an exception of Error Object if invalid url or protocols is passed webSocket.protocol ⇒ string Kind: instance property of WebSocket Returns: string - returns a string indicating the name of the sub-protocol the server selected; this will be one of the strings specified in the protocols parameter when creating the WebSocket object. webSocket.bufferedAmount ⇒ number Kind: instance property of WebSocket Returns: number - returns the number of bytes of data that have been queued using calls to send() but not yet transmitted to the network. This value resets to zero once all queued data has been sent. This value does not reset to zero when the connection is closed; if you keep calling send(), this will continue to climb. Read only webSocket.binaryType Kind: instance property of WebSocket Param Type Description data string A string indicating the type of binary data being transmitted by the connection. This should be either \"blob\" if DOM Blob objects are being used or \"arraybuffer\" if ArrayBuffer objects are being used. webSocket.binaryType ⇒ string Kind: instance property of WebSocket Returns: string - returns the string indicating the binary data type. webSocket.send(data) Enqueues the specified data to be transmitted to the other end over the WebSocket connection, increasing the value of bufferedAmount by the number of bytes needed to contain the data. If the data can't be sent (for example, because it needs to be buffered but the buffer is full), the socket is closed automatically. Kind: instance method of WebSocket Param Type Description data string or ArrayBuffer or ArrayBufferView Data to be sent Example usage: ws.send(new Float32Array([ 5, 2, 1, 3, 6, -1 ])) ws.send(new Int32Array([5,-1]).buffer) webSocket.close([code], [reason]) Closes the websocket connection Kind: instance method of WebSocket Param Type Default Description [code] integer 1000 A integer value as per https://developer.mozilla.org/en-US/docs/Web/API/WebSocket#close(). [reason] string \"\\\"\\\"\" A human-readable string explaining why the connection is closing. Throws an exception of Error Object if invalid code or reason is passed "},"reference/uxp/class/Shell.html":{"url":"reference/uxp/class/Shell.html","title":"openExternal","keywords":"","body":" Shell To get an instance: require(\"uxp\").shell Kind: global classAccess: public shell.openExternal(url) Opens the url in an the system browser. Kind: instance method of Shell Access: public Param Type url string or URL "},"reference/uxp/ui-index.html":{"url":"reference/uxp/ui-index.html","title":"UI APIs","keywords":"","body":"User interface Reference See the following references: HTML CSS Events "},"reference/uxp/namespace/css.html":{"url":"reference/uxp/namespace/css.html","title":"CSS support","keywords":"","body":" css : object Kind: global namespace css : object .color .border-top-color .border-left-color .border-right-color .border-bottom-color .background-color .border-top .border-left .border-right .border-bottom .border-top-style .border-left-style .border-right-style .border-bottom-style .border-top-left-radius .border-top-right-radius .border-bottom-left-radius .border-bottom-right-radius .opacity : float .overflow .overflow-x .overflow-y .background-image .border-color .border-radius .border-radius .background .margin-top .margin-left .margin-right .margin-bottom .width .height .max-width .max-height .min-width .min-height .top .left .right .bottom .padding-top .padding-left .padding-right .padding-bottom .border-top-width .border-left-width .border-right-width .border-bottom-width .flex-basis .flex-grow .flex-shrink .order .flex .border-width .margin .padding .font-family .letter-spacing .font-size .align-content .align-items .align-self .units .background-attachment .background-repeat .background-size .border-style .display .flex-direction .flex-wrap .font-style .font-weight .justify-content .position .text-align .text-overflow .visibility .white-space css.color Specifies the text color for an element. Supported color formats are as follows: Named Colors (See https://github.com/colorjs/color-name/blob/master/index.js) Hex colors RGB and RGBA colors HSL and HSLA colors Kind: static property of cssSee https://developer.mozilla.org/en/docs/Web/CSS/color https://github.com/colorjs/color-name/blob/master/index.js css.border-top-color Specifies the border color for an element's top border. Supported color formats are as follows: Named Colors (See https://github.com/colorjs/color-name/blob/master/index.js) Hex colors RGB and RGBA colors An element's border can only consist of a single color. If you specify multiple border colors, you'll see a warning on the JavaScript console. Kind: static property of cssSee https://developer.mozilla.org/en/docs/Web/CSS/border-top-color https://github.com/colorjs/color-name/blob/master/index.js css.border-left-color Specifies the border color for an element's left border. Supported color formats are as follows: Named Colors (See https://github.com/colorjs/color-name/blob/master/index.js) Hex colors RGB and RGBA colors An element's border can only consist of a single color. If you specify multiple border colors, you'll see a warning on the JavaScript console. Kind: static property of cssSee https://developer.mozilla.org/en/docs/Web/CSS/border-left-color https://github.com/colorjs/color-name/blob/master/index.js css.border-right-color Specifies the border color for an element's right border. Supported color formats are as follows: Named Colors (See https://github.com/colorjs/color-name/blob/master/index.js) Hex colors RGB and RGBA colors An element's border can only consist of a single color. If you specify multiple border colors, you'll see a warning on the JavaScript console. Kind: static property of cssSee https://developer.mozilla.org/en/docs/Web/CSS/border-right-color https://github.com/colorjs/color-name/blob/master/index.js css.border-bottom-color Specifies the border color for an element's bottom border. Supported color formats are as follows: Named Colors (See https://github.com/colorjs/color-name/blob/master/index.js) Hex colors RGB and RGBA colors An element's border can only consist of a single color. If you specify multiple border colors, you'll see a warning on the JavaScript console. Kind: static property of cssSee https://developer.mozilla.org/en/docs/Web/CSS/border-bottom-color https://github.com/colorjs/color-name/blob/master/index.js css.background-color Specifies the background color for an element. Supported color formats are as follows: Named Colors (See https://github.com/colorjs/color-name/blob/master/index.js) Hex colors RGB and RGBA colors HSL and HSLA colors Kind: static property of cssSee https://developer.mozilla.org/en/docs/Web/CSS/background-color https://github.com/colorjs/color-name/blob/master/index.js css.border-top Shorthand for specifying the style, color, and width of the top border. An element's border can only consist of a single color. If you specify multiple border colors, you'll see a warning on the JavaScript console. The only visible border style that is supported is solid. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/border-top css.border-left Shorthand for specifying the style, color, and width of the left border. An element's border can only consist of a single color. If you specify multiple border colors, you'll see a warning on the JavaScript console. The only visible border style that is supported is solid. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/border-left css.border-right Shorthand for specifying the style, color, and width of the right border. An element's border can only consist of a single color. If you specify multiple border colors, you'll see a warning on the JavaScript console. The only visible border style that is supported is solid. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/border-right css.border-bottom Shorthand for specifying the style, color, and width of the bottom border. An element's border can only consist of a single color. If you specify multiple border colors, you'll see a warning on the JavaScript console. The only visible border style that is supported is solid. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/border-bottom css.border-top-style Specifies the style of the top border. The only visible border style that is supported is solid. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/border-top-style css.border-left-style Specifies the style of the left border. The only visible border style that is supported is solid. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/border-left-style css.border-right-style Specifies the style of the right border. The only visible border style that is supported is solid. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/border-right-style css.border-bottom-style Specifies the style of the bottom border. The only visible border style that is supported is solid. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/border-bottom-style css.border-top-left-radius Sets the top left border radius. If you need to clip an image, be sure to set overflow: hidden. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/border-top-left-radius css.border-top-right-radius Sets the top right border radius. If you need to clip an image, be sure to set overflow: hidden. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/border-top-right-radius css.border-bottom-left-radius Sets the bottom left border radius. If you need to clip an image, be sure to set overflow: hidden. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/border-bottom-left-radius css.border-bottom-right-radius Sets the bottom right border radius. If you need to clip an image, be sure to set overflow: hidden. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/border-bottom-right-radius css.opacity : float Sets the opacity of an element. The value is between 0 (transparent) and 1 (opaque). Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/opacity css.overflow Shorthand which determines what is done with content that overflows the element's bounds. Supports visible, hidden,auto, andscroll`. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/overflow css.overflow-x Determines what is done with content that overflows the element's horizontal bounds. Supports visible, hidden,auto, andscroll`. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/overflow-x css.overflow-y Determines what is done with content that overflows the element's vertical bounds. Supports visible, hidden,auto, andscroll`. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/overflow-y css.background-image Specifies a background image. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/background-image css.border-color Specifies the border color for an element. Supported color formats are as follows: Named Colors (See https://github.com/colorjs/color-name/blob/master/index.js) Hex colors RGB and RGBA colors An element's border can only consist of a single color. If you specify multiple border colors, you'll see a warning on the JavaScript console. Kind: static property of cssSee https://developer.mozilla.org/en/docs/Web/CSS/border-color https://github.com/colorjs/color-name/blob/master/index.js css.border-radius Shorthand for specifying the border radius Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/border-radius css.border-radius Shorthand for specifying the border width, color, and style. Supported color formats are as follows: Named Colors (See https://github.com/colorjs/color-name/blob/master/index.js) Hex colors RGB and RGBA colors An element's border can only consist of a single color. If you specify multiple border colors, you'll see a warning on the JavaScript console. Kind: static property of cssSee https://developer.mozilla.org/en/docs/Web/CSS/border-radius https://github.com/colorjs/color-name/blob/master/index.js css.background Shorthand for specifying the background of an element. Supports colors, images, and linear gradients. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/background css.margin-top Specifies the top margin. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/margin-top css.margin-left Specifies the left margin. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/margin-left css.margin-right Specifies the right margin. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/margin-right css.margin-bottom Specifies the bottom margin. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/margin-bottom css.width Specifies the width of an element. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/width css.height Specifies the height of an element. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/height css.max-width Specifies the maximum width of an element. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/max-width css.max-height Specifies the maximum height of an element. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/max-height css.min-width Specifies the minimum width of an element. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/min-width css.min-height Specifies the minimum height of an element. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/min-height css.top Sets the top position of the element when relatively or absolutely positioned. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/top css.left Sets the left position of the element when relatively or absolutely positioned. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/left css.right Sets the right position of the element when relatively or absolutely positioned. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/right css.bottom Sets the bottom position of the element when relatively or absolutely positioned. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/bottom css.padding-top Specifies the top padding. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/padding-top css.padding-left Specifies the left padding. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/padding-left css.padding-right Specifies the right padding. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/padding-right css.padding-bottom Specifies the bottom padding. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/padding-bottom css.border-top-width Specifies the width of the top border. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/border-top-width css.border-left-width Specifies the width of the left border. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/border-left-width css.border-right-width Specifies the width of the right border. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/border-right-width css.border-bottom-width Specifies the width of the bottom border. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/border-bottom-width css.flex-basis Specifies the value used for calculating the flex basis. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/flex-basis css.flex-grow Sets the flex grow factor. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/flex-grow css.flex-shrink Sets the flex shrink factor. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/flex-shrink css.order Sets the order of display for this flex element. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/order css.flex Shorthand for setting flex-grow, flex-shrink, and flex-basis. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/flex css.border-width Specifies the width of the element's border. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/border-width css.margin Shorthand for setting the element's margins. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/margin css.padding Shorthand for setting the element's padding. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/padding css.font-family Renders the element using the specified font family, if installed on the user's machine. Fallbacks are not supported. Don't use quotes with this value. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/font-family css.letter-spacing Sets the distance between letters. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/letter-spacing css.font-size Sets the font size. Kind: static property of cssSee: https://developer.mozilla.org/en/docs/Web/CSS/font-size css.align-content Kind: static enum of cssProperties Name Default Description \"flex-start\" 0 Align to the starting position \"flex-end\" 1 Align to the ending position center 2 Align to the center \"space-between\" 3 Add space between the elements \"space-around\" 4 Add space around the elements stretch 5 Stretch content css.align-items Kind: static enum of cssProperties Name Default Description \"flex-start\" 0 Align items to the start \"flex-end\" 1 Align items to the end center 2 Align items to the center baseline 3 Align items to baseline (UNSUPPORTED) stretch 4 Stretch items css.align-self Kind: static enum of cssProperties Name Default Description auto 0 \"flex-start\" 1 Align to start \"flex-end\" 2 Align to end center 3 Align to center baseline 4 Align to baseline (UNSUPPORTED) stretch 5 Stretch css.units Kind: static enum of cssProperties Name Default Description px 0 Pixel units (default) \"%\" 1 Percentage css.background-attachment Kind: static enum of cssProperties Name Default Description scroll 0 The background image scrolls along with content. Default. fixed 1 The background image is fixed while scrolling. UNSUPPORTED. local 2 UNSUPPORTED. css.background-repeat Kind: static enum of cssProperties Name Default Description \"no-repeat\" 0 Don't repeat the background image; default. repeat 1 Repeat the background image in both axes. UNSUPPORTED. \"repeat-x\" 2 Repeat the background image in horizontally. UNSUPPORTED. \"repeat-y\" 3 Repeat the background image in vertically. UNSUPPORTED. css.background-size Kind: static enum of cssProperties Name Default Description auto 0 Automatically size the background image; default. contain 1 Contain the image within the bounds of the element without altering the aspect ratio. cover 2 Ensure that the image fills the bounds of the element without altering the aspect ratio. css.border-style Kind: static enum of cssProperties Name Default Description none 0 No border hidden 1 Hidden border dotted 2 Dotted border; UNSUPPORTED dashed 3 Dashed border; UNSUPPORTED solid 4 Solid border double 5 Double border; UNSUPPORTED groove 6 Grooved border; UNSUPPORTED ridge 7 Ridged border; UNSUPPORTED inset 8 Inset border; UNSUPPORTED outset 9 Outset border; UNSUPPORTED css.display Kind: static enum of cssProperties Name Default Description none 0 Don't display the item; removes from layout. flex 1 Display using flexbox layout. block 2 Display using block layout; default. inline 3 Display using inline layout; UNSUPPORTED. \"inline-block\" 4 Display using inline-block layout; UNSUPPORTED. \"inline-flex\" 5 Display using inline-flex layout; UNSUPPORTED. css.flex-direction Kind: static enum of cssProperties Name Default Description row 0 Layout in a horizontal (row) direction \"row-reverse\" 1 Layout in a horizontal (row) direction, but reverse the order of elements column 2 layout in a vertical (column) direction \"column-reverse\" 3 layout in a vertical (column) direction, but reverse the order of elements css.flex-wrap Kind: static enum of cssProperties Name Default Description nowrap 0 Don't wrap; default. wrap 1 Wrap \"wrap-reverse\" 2 Wrap, reverse; UNSUPPORTED. css.font-style Kind: static enum of cssProperties Name Default Description normal 0 Normal font style; default. italic 1 Italic (if the font supports it). css.font-weight Kind: static enum of cssProperties Name Default Description normal 0 Normal font weight; default. bold 1 Bold font weight. lighter 2 Lighter font weight. bolder 3 Bolder font weight. 50 4 100 5 200 6 300 7 400 8 500 9 550 10 600 11 700 12 800 13 850 14 900 15 950 16 1000 17 css.justify-content Kind: static enum of cssProperties Name Default Description \"flex-start\" 0 Justify content to the end \"flex-end\" 1 Align content to the end center 2 Align content to the center \"space-between\" 3 Add space between elements \"space-around\" 4 Add space around elements css.position Kind: static enum of cssProperties Name Default Description static 0 Positioned using normal layout rules; default. absolute 1 Element is positioned absolutely, relative to its nearest positioned ancestor. Does not affect layout. relative 2 Element is positioned relative to where it would have been positioned when using static. css.text-align Kind: static enum of cssProperties Name Default Description left 0 Left align center 1 Center right 2 Right align justify 3 Justify; UNSUPPORTED css.text-overflow Kind: static enum of cssProperties Name Default Description clip 0 Clip text content; default. ellipsis 1 Show an ellipsis. css.visibility Kind: static enum of cssProperties Name Default Description visible 0 Show the element; default. hidden 1 Hide the element. Layout is unaffected, so space is reserved for the element. css.white-space Kind: static enum of cssProperties Name Default Description normal 0 Allow wrapping. Default. nowrap 1 Prevent breaking on white space. "},"reference/uxp/ui-classes-index.html":{"url":"reference/uxp/ui-classes-index.html","title":"Classes","keywords":"","body":"UI Classes Attr CharacterData Clipboard Comment CSSRule CSSRuleList CSSStyleDeclaration CSSStyleRule CSSStyleSheet Document DocumentFragment DOMException DOMTokenList NamedNodeMap Node NodeList StyleSheet StyleSheetList Text "},"reference/uxp/class/Attr.html":{"url":"reference/uxp/class/Attr.html","title":"Attr","keywords":"","body":" Attr ⇐ Node Kind: global class Extends: Node Access: public See: https://developer.mozilla.org/en-US/docs/Web/API/Attr Attr ⇐ Node new Attr(document, nodeName) .nodeName : string .localName : string .name : string .specified : boolean .value : * .nodeType : number .nodeValue : * .ownerElement : Element .contentEditable .isConnected : boolean .parentNode : Node .firstChild : Node .lastChild : Node .previousSibling : Node .nextSibling : Node .firstElementChild : Node .lastElementChild : Node .previousElementSibling : Node .nextElementSibling : Node .textContent : string .childNodes : NodeList .ownerDocument .attributes .offsetParent .remove() .hasChildNodes() ⇒ boolean .cloneNode(deep) ⇒ Node .appendChild(child) ⇒ Node .insertBefore(child, before) ⇒ Node .replaceChild(newChild, oldChild) ⇒ Node .removeChild(child) ⇒ Node .before(...nodes) .after(...nodes) .replaceWith(...nodes) .addEventListener(eventName, callback, [capture]) .removeEventListener(eventName, callback, [capture]) .dispatchEvent(event) new Attr(document, nodeName) Creates an instance of Attr. Param Type document Document nodeName string attr.nodeName : string Kind: instance property of Attr Read only: true attr.localName : string Kind: instance property of Attr Read only: true attr.name : string Kind: instance property of Attr Read only: true attr.specified : boolean Kind: instance property of Attr Read only: true attr.value : * Kind: instance property of Attr attr.nodeType : number Kind: instance property of Attr Read only: true attr.nodeValue : * Kind: instance property of Attr attr.ownerElement : Element Kind: instance property of Attr Read only: true attr.contentEditable Kind: instance property of Attr Read only: true attr.isConnected : boolean Kind: instance property of Attr Read only: true attr.parentNode : Node Kind: instance property of Attr Read only: true attr.firstChild : Node Kind: instance property of Attr Read only: true attr.lastChild : Node Kind: instance property of Attr Read only: true attr.previousSibling : Node Kind: instance property of Attr Read only: true attr.nextSibling : Node Kind: instance property of Attr Read only: true attr.firstElementChild : Node Kind: instance property of Attr Read only: true attr.lastElementChild : Node Kind: instance property of Attr Read only: true attr.previousElementSibling : Node Kind: instance property of Attr Read only: true attr.nextElementSibling : Node Kind: instance property of Attr Read only: true attr.textContent : string Kind: instance property of Attr attr.childNodes : NodeList Kind: instance property of Attr Read only: true attr.ownerDocument Kind: instance property of Attr Read only: true attr.attributes Kind: instance property of Attr Read only: true attr.offsetParent Kind: instance property of Attr Read only: true attr.remove() Kind: instance method of Attr Overrides: remove attr.hasChildNodes() ⇒ boolean Kind: instance method of Attr attr.cloneNode(deep) ⇒ Node Kind: instance method of Attr Param Type deep boolean attr.appendChild(child) ⇒ Node Kind: instance method of Attr Param Type child Node attr.insertBefore(child, before) ⇒ Node Kind: instance method of Attr Param Type child Node before Node attr.replaceChild(newChild, oldChild) ⇒ Node Kind: instance method of Attr Param Type newChild Node oldChild Node attr.removeChild(child) ⇒ Node Kind: instance method of Attr Param Type child Node attr.before(...nodes) Kind: instance method of Attr Param Type ...nodes Array. attr.after(...nodes) Kind: instance method of Attr Param Type ...nodes Array. attr.replaceWith(...nodes) Kind: instance method of Attr Param Type ...nodes Array. attr.addEventListener(eventName, callback, [capture]) Kind: instance method of Attr Param Type Default eventName * callback * [capture] boolean false attr.removeEventListener(eventName, callback, [capture]) Kind: instance method of Attr Param Type Default eventName * callback * [capture] boolean false attr.dispatchEvent(event) Kind: instance method of Attr Param Type event * "},"reference/uxp/class/CharacterData.html":{"url":"reference/uxp/class/CharacterData.html","title":"CharacterData","keywords":"","body":" CharacterData ⇐ Node Kind: global class Extends: Node Access: public See: https://developer.mozilla.org/en-US/docs/Web/API/CharacterData CharacterData ⇐ Node new CharacterData(document, textContent) .data : string .textContent : string .nodeValue : string .length : number .contentEditable .isConnected : boolean .parentNode : Node .firstChild : Node .lastChild : Node .previousSibling : Node .nextSibling : Node .firstElementChild : Node .lastElementChild : Node .previousElementSibling : Node .nextElementSibling : Node .childNodes : NodeList .ownerDocument .attributes .offsetParent .substringData(offset, count) ⇒ string .appendData(arg) .insertData(offset, arg) .deleteData(offset, count) .replaceData(offset, count, arg) .hasChildNodes() ⇒ boolean .cloneNode(deep) ⇒ Node .appendChild(child) ⇒ Node .insertBefore(child, before) ⇒ Node .replaceChild(newChild, oldChild) ⇒ Node .removeChild(child) ⇒ Node .remove() .before(...nodes) .after(...nodes) .replaceWith(...nodes) .addEventListener(eventName, callback, [capture]) .removeEventListener(eventName, callback, [capture]) .dispatchEvent(event) new CharacterData(document, textContent) Creates an instance of CharacterData. Param Type document * textContent * characterData.data : string Kind: instance property of CharacterData characterData.textContent : string Kind: instance property of CharacterData Overrides: textContent characterData.nodeValue : string Kind: instance property of CharacterData characterData.length : number Kind: instance property of CharacterData Read only: true characterData.contentEditable Kind: instance property of CharacterData Read only: true characterData.isConnected : boolean Kind: instance property of CharacterData Read only: true characterData.parentNode : Node Kind: instance property of CharacterData Read only: true characterData.firstChild : Node Kind: instance property of CharacterData Read only: true characterData.lastChild : Node Kind: instance property of CharacterData Read only: true characterData.previousSibling : Node Kind: instance property of CharacterData Read only: true characterData.nextSibling : Node Kind: instance property of CharacterData Read only: true characterData.firstElementChild : Node Kind: instance property of CharacterData Read only: true characterData.lastElementChild : Node Kind: instance property of CharacterData Read only: true characterData.previousElementSibling : Node Kind: instance property of CharacterData Read only: true characterData.nextElementSibling : Node Kind: instance property of CharacterData Read only: true characterData.childNodes : NodeList Kind: instance property of CharacterData Read only: true characterData.ownerDocument Kind: instance property of CharacterData Read only: true characterData.attributes Kind: instance property of CharacterData Read only: true characterData.offsetParent Kind: instance property of CharacterData Read only: true characterData.substringData(offset, count) ⇒ string Kind: instance method of CharacterData Param Type offset * count * characterData.appendData(arg) Kind: instance method of CharacterData Param Type arg string characterData.insertData(offset, arg) Kind: instance method of CharacterData Param Type offset number arg string characterData.deleteData(offset, count) Kind: instance method of CharacterData Param Type offset number count number characterData.replaceData(offset, count, arg) Kind: instance method of CharacterData Param Type offset number count number arg string characterData.hasChildNodes() ⇒ boolean Kind: instance method of CharacterData characterData.cloneNode(deep) ⇒ Node Kind: instance method of CharacterData Param Type deep boolean characterData.appendChild(child) ⇒ Node Kind: instance method of CharacterData Param Type child Node characterData.insertBefore(child, before) ⇒ Node Kind: instance method of CharacterData Param Type child Node before Node characterData.replaceChild(newChild, oldChild) ⇒ Node Kind: instance method of CharacterData Param Type newChild Node oldChild Node characterData.removeChild(child) ⇒ Node Kind: instance method of CharacterData Param Type child Node characterData.remove() Kind: instance method of CharacterData characterData.before(...nodes) Kind: instance method of CharacterData Param Type ...nodes Array. characterData.after(...nodes) Kind: instance method of CharacterData Param Type ...nodes Array. characterData.replaceWith(...nodes) Kind: instance method of CharacterData Param Type ...nodes Array. characterData.addEventListener(eventName, callback, [capture]) Kind: instance method of CharacterData Param Type Default eventName * callback * [capture] boolean false characterData.removeEventListener(eventName, callback, [capture]) Kind: instance method of CharacterData Param Type Default eventName * callback * [capture] boolean false characterData.dispatchEvent(event) Kind: instance method of CharacterData Param Type event * "},"reference/uxp/class/Clipboard.html":{"url":"reference/uxp/class/Clipboard.html","title":"Clipboard","keywords":"","body":" Clipboard Kind: global classAccess: publicSee: https://developer.mozilla.org/en-US/docs/Web/API/ClipboardTodo determine visibility Clipboard new Clipboard(document) .createDataTransfer() ⇒ * .setContent(data) ⇒ Promise .getContent() ⇒ Promise .clearContent() ⇒ Promise new Clipboard(document) Creates an instance of Clipboard. Param Type document * clipboard.createDataTransfer() ⇒ * Kind: instance method of Clipboard clipboard.setContent(data) ⇒ Promise Kind: instance method of Clipboard Param Type data * clipboard.getContent() ⇒ Promise Kind: instance method of Clipboard clipboard.clearContent() ⇒ Promise Kind: instance method of Clipboard "},"reference/uxp/class/Comment.html":{"url":"reference/uxp/class/Comment.html","title":"Comment","keywords":"","body":" Comment ⇐ Node Kind: global class Extends: Node Access: public See: https://developer.mozilla.org/en-US/docs/Web/API/Comment Comment ⇐ Node new Comment(document, comment) .nodeName : string .nodeType : number .nodeValue : string .contentEditable .isConnected : boolean .parentNode : Node .firstChild : Node .lastChild : Node .previousSibling : Node .nextSibling : Node .firstElementChild : Node .lastElementChild : Node .previousElementSibling : Node .nextElementSibling : Node .textContent : string .childNodes : NodeList .ownerDocument .attributes .offsetParent .hasChildNodes() ⇒ boolean .cloneNode(deep) ⇒ Node .appendChild(child) ⇒ Node .insertBefore(child, before) ⇒ Node .replaceChild(newChild, oldChild) ⇒ Node .removeChild(child) ⇒ Node .remove() .before(...nodes) .after(...nodes) .replaceWith(...nodes) .addEventListener(eventName, callback, [capture]) .removeEventListener(eventName, callback, [capture]) .dispatchEvent(event) new Comment(document, comment) Creates an instance of Comment. Param Type document Document comment string comment.nodeName : string Kind: instance property of Comment Read only: true comment.nodeType : number Kind: instance property of Comment Read only: true comment.nodeValue : string Kind: instance property of Comment Read only: true comment.contentEditable Kind: instance property of Comment Read only: true comment.isConnected : boolean Kind: instance property of Comment Read only: true comment.parentNode : Node Kind: instance property of Comment Read only: true comment.firstChild : Node Kind: instance property of Comment Read only: true comment.lastChild : Node Kind: instance property of Comment Read only: true comment.previousSibling : Node Kind: instance property of Comment Read only: true comment.nextSibling : Node Kind: instance property of Comment Read only: true comment.firstElementChild : Node Kind: instance property of Comment Read only: true comment.lastElementChild : Node Kind: instance property of Comment Read only: true comment.previousElementSibling : Node Kind: instance property of Comment Read only: true comment.nextElementSibling : Node Kind: instance property of Comment Read only: true comment.textContent : string Kind: instance property of Comment comment.childNodes : NodeList Kind: instance property of Comment Read only: true comment.ownerDocument Kind: instance property of Comment Read only: true comment.attributes Kind: instance property of Comment Read only: true comment.offsetParent Kind: instance property of Comment Read only: true comment.hasChildNodes() ⇒ boolean Kind: instance method of Comment comment.cloneNode(deep) ⇒ Node Kind: instance method of Comment Param Type deep boolean comment.appendChild(child) ⇒ Node Kind: instance method of Comment Param Type child Node comment.insertBefore(child, before) ⇒ Node Kind: instance method of Comment Param Type child Node before Node comment.replaceChild(newChild, oldChild) ⇒ Node Kind: instance method of Comment Param Type newChild Node oldChild Node comment.removeChild(child) ⇒ Node Kind: instance method of Comment Param Type child Node comment.remove() Kind: instance method of Comment comment.before(...nodes) Kind: instance method of Comment Param Type ...nodes Array. comment.after(...nodes) Kind: instance method of Comment Param Type ...nodes Array. comment.replaceWith(...nodes) Kind: instance method of Comment Param Type ...nodes Array. comment.addEventListener(eventName, callback, [capture]) Kind: instance method of Comment Param Type Default eventName * callback * [capture] boolean false comment.removeEventListener(eventName, callback, [capture]) Kind: instance method of Comment Param Type Default eventName * callback * [capture] boolean false comment.dispatchEvent(event) Kind: instance method of Comment Param Type event * "},"reference/uxp/class/CSSRule.html":{"url":"reference/uxp/class/CSSRule.html","title":"CSSRule","keywords":"","body":" CSSRule Kind: global class CSSRule.STYLE_RULE Kind: static property of CSSRule "},"reference/uxp/class/CSSRuleList.html":{"url":"reference/uxp/class/CSSRuleList.html","title":"CSSRuleList","keywords":"","body":" CSSRuleList Kind: global class CSSRuleList instance .length .item(index) ⇒ CSSStyleRule static .CSSRuleList new CSSRuleList(styleSheet, rules) cssRuleList.length Kind: instance property of CSSRuleList Read only: true cssRuleList.item(index) ⇒ CSSStyleRule Kind: instance method of CSSRuleList Param Type index number CSSRuleList.CSSRuleList Kind: static class of CSSRuleList new CSSRuleList(styleSheet, rules) Creates an instance of CSSRuleList. Param Type styleSheet * rules * "},"reference/uxp/class/CSSStyleDeclaration.html":{"url":"reference/uxp/class/CSSStyleDeclaration.html","title":"CSSStyleDeclaration","keywords":"","body":" CSSStyleDeclaration Kind: global class CSSStyleDeclaration instance .length .parentRule .cssFloat .cssFloat .item(index) ⇒ * .getPropertyValue(property) ⇒ * .setProperty(property, value, [priority]) .removeProperty(property) static .CSSStyleDeclaration new CSSStyleDeclaration(style, parentRule) cssStyleDeclaration.length Kind: instance property of CSSStyleDeclaration Read only: true cssStyleDeclaration.parentRule Kind: instance property of CSSStyleDeclaration Read only: true cssStyleDeclaration.cssFloat Kind: instance property of CSSStyleDeclaration cssStyleDeclaration.cssFloat Kind: instance property of CSSStyleDeclaration cssStyleDeclaration.item(index) ⇒ * Kind: instance method of CSSStyleDeclaration Param Type index * cssStyleDeclaration.getPropertyValue(property) ⇒ * Kind: instance method of CSSStyleDeclaration Param Type property * cssStyleDeclaration.setProperty(property, value, [priority]) Kind: instance method of CSSStyleDeclaration Param Type Default property * value * [priority] string \"\\\"\\\"\" cssStyleDeclaration.removeProperty(property) Kind: instance method of CSSStyleDeclaration Param Type property * CSSStyleDeclaration.CSSStyleDeclaration Kind: static class of CSSStyleDeclaration new CSSStyleDeclaration(style, parentRule) Creates an instance of CSSStyleDeclaration. Param Type style * parentRule * "},"reference/uxp/class/CSSStyleRule.html":{"url":"reference/uxp/class/CSSStyleRule.html","title":"CSSStyleRule","keywords":"","body":" CSSStyleRule ⇐ CSSRule Kind: global classExtends: CSSRule CSSStyleRule ⇐ CSSRule instance .type .selectorText : string .style .parentStyleSheet static .CSSStyleRule new CSSStyleRule(cssRuleList, styleRule) cssStyleRule.type Kind: instance property of CSSStyleRule Read only: true cssStyleRule.selectorText : string Kind: instance property of CSSStyleRule cssStyleRule.style Kind: instance property of CSSStyleRule Read only: true cssStyleRule.parentStyleSheet Kind: instance property of CSSStyleRule Read only: true CSSStyleRule.CSSStyleRule Kind: static class of CSSStyleRule new CSSStyleRule(cssRuleList, styleRule) Creates an instance of CSSStyleRule. Param Type cssRuleList * styleRule * "},"reference/uxp/class/CSSStyleSheet.html":{"url":"reference/uxp/class/CSSStyleSheet.html","title":"CSSStyleSheet","keywords":"","body":" CSSStyleSheet ⇐ StyleSheet Kind: global class Extends: StyleSheet CSSStyleSheet ⇐ StyleSheet instance .cssRules .rules .href : string .insertRule(rule, [index]) .deleteRule(index) static .CSSStyleSheet new CSSStyleSheet(engine, [rules], [imports]) cssStyleSheet.cssRules Kind: instance property of CSSStyleSheet Read only: true cssStyleSheet.rules Kind: instance property of CSSStyleSheet Read only: true cssStyleSheet.href : string Kind: instance property of CSSStyleSheet Read only: true cssStyleSheet.insertRule(rule, [index]) Kind: instance method of CSSStyleSheet Param Type Default rule * [index] number 0 cssStyleSheet.deleteRule(index) Kind: instance method of CSSStyleSheet Param Type index * CSSStyleSheet.CSSStyleSheet Kind: static class of CSSStyleSheet new CSSStyleSheet(engine, [rules], [imports]) Creates an instance of CSSStyleSheet. Param Type Default engine * [rules] * [] [imports] * [] "},"reference/uxp/class/Document.html":{"url":"reference/uxp/class/Document.html","title":"Document","keywords":"","body":" Document ⇐ Node Kind: global class Extends: Node Access: public See: https://developer.mozilla.org/en-US/docs/Web/API/Document Document ⇐ Node new Document() .onLine : boolean .nodeName : string .nodeType : number .activeElement : Node .documentElement : Document .head : HTMLHeadElement .body : HTMLBodyElement .clipboard : Clippoard .styleSheets : StyleSheetList .contentEditable .isConnected : boolean .parentNode : Node .firstChild : Node .lastChild : Node .previousSibling : Node .nextSibling : Node .firstElementChild : Node .lastElementChild : Node .previousElementSibling : Node .nextElementSibling : Node .textContent : string .childNodes : NodeList .ownerDocument .attributes .offsetParent .createElement(nodeName) ⇒ Element .createElementNS(ns, nodeName) ⇒ Element .createAttribute(nodeName) ⇒ Attr .createTextNode([text]) ⇒ Text .createComment([comment]) ⇒ Comment .createDocumentFragment() ⇒ DocumentFragment .cloneNode(deep) ⇒ Document .adoptNode(externalNode, deep) ⇒ Node .importNode(externalNode, deep) ⇒ Node .querySelector(selector) ⇒ Node .querySelectorAll(selector) ⇒ NodeList .getElementsByClassName(name) ⇒ NodeList .getElementsByTagName(name) ⇒ NodeList .getElementById(id) ⇒ Element .hasChildNodes() ⇒ boolean .appendChild(child) ⇒ Node .insertBefore(child, before) ⇒ Node .replaceChild(newChild, oldChild) ⇒ Node .removeChild(child) ⇒ Node .remove() .before(...nodes) .after(...nodes) .replaceWith(...nodes) .addEventListener(eventName, callback, [capture]) .removeEventListener(eventName, callback, [capture]) .dispatchEvent(event) new Document() Creates an instance of Document. document.onLine : boolean Indicates if the computer is online Kind: instance property of Document Read only: true document.nodeName : string Kind: instance property of Document Read only: true document.nodeType : number Kind: instance property of Document Read only: true document.activeElement : Node Kind: instance property of Document Read only: true document.documentElement : Document Kind: instance property of Document Read only: true document.head : HTMLHeadElement Kind: instance property of Document Read only: true document.body : HTMLBodyElement Kind: instance property of Document Read only: true document.clipboard : Clippoard Kind: instance property of Document Read only: true document.styleSheets : StyleSheetList Kind: instance property of Document Read only: true document.contentEditable Kind: instance property of Document Read only: true document.isConnected : boolean Kind: instance property of Document Read only: true document.parentNode : Node Kind: instance property of Document Read only: true document.firstChild : Node Kind: instance property of Document Read only: true document.lastChild : Node Kind: instance property of Document Read only: true document.previousSibling : Node Kind: instance property of Document Read only: true document.nextSibling : Node Kind: instance property of Document Read only: true document.firstElementChild : Node Kind: instance property of Document Read only: true document.lastElementChild : Node Kind: instance property of Document Read only: true document.previousElementSibling : Node Kind: instance property of Document Read only: true document.nextElementSibling : Node Kind: instance property of Document Read only: true document.textContent : string Kind: instance property of Document document.childNodes : NodeList Kind: instance property of Document Read only: true document.ownerDocument Kind: instance property of Document Read only: true document.attributes Kind: instance property of Document Read only: true document.offsetParent Kind: instance property of Document Read only: true document.createElement(nodeName) ⇒ Element Kind: instance method of Document Param Type nodeName string document.createElementNS(ns, nodeName) ⇒ Element Kind: instance method of Document Param Type ns string nodeName string document.createAttribute(nodeName) ⇒ Attr Kind: instance method of Document Param Type nodeName string document.createTextNode([text]) ⇒ Text Kind: instance method of Document Param Type Default [text] string \"\\\"\\\"\" document.createComment([comment]) ⇒ Comment Kind: instance method of Document Param Type Default [comment] string \"\\\"\\\"\" document.createDocumentFragment() ⇒ DocumentFragment Kind: instance method of Document document.cloneNode(deep) ⇒ Document Kind: instance method of Document Overrides: cloneNode Param Type deep boolean document.adoptNode(externalNode, deep) ⇒ Node Kind: instance method of Document Param Type externalNode Node deep boolean document.importNode(externalNode, deep) ⇒ Node Kind: instance method of Document Param Type externalNode Node deep boolean document.querySelector(selector) ⇒ Node Kind: instance method of Document Param Type selector string document.querySelectorAll(selector) ⇒ NodeList Kind: instance method of Document Param Type selector string document.getElementsByClassName(name) ⇒ NodeList Kind: instance method of Document Param Type name string document.getElementsByTagName(name) ⇒ NodeList Kind: instance method of Document Param Type name string document.getElementById(id) ⇒ Element Kind: instance method of Document Param Type id string document.hasChildNodes() ⇒ boolean Kind: instance method of Document document.appendChild(child) ⇒ Node Kind: instance method of Document Param Type child Node document.insertBefore(child, before) ⇒ Node Kind: instance method of Document Param Type child Node before Node document.replaceChild(newChild, oldChild) ⇒ Node Kind: instance method of Document Param Type newChild Node oldChild Node document.removeChild(child) ⇒ Node Kind: instance method of Document Param Type child Node document.remove() Kind: instance method of Document document.before(...nodes) Kind: instance method of Document Param Type ...nodes Array. document.after(...nodes) Kind: instance method of Document Param Type ...nodes Array. document.replaceWith(...nodes) Kind: instance method of Document Param Type ...nodes Array. document.addEventListener(eventName, callback, [capture]) Kind: instance method of Document Param Type Default eventName * callback * [capture] boolean false document.removeEventListener(eventName, callback, [capture]) Kind: instance method of Document Param Type Default eventName * callback * [capture] boolean false document.dispatchEvent(event) Kind: instance method of Document Param Type event * "},"reference/uxp/class/DocumentFragment.html":{"url":"reference/uxp/class/DocumentFragment.html","title":"DocumentFragment","keywords":"","body":" DocumentFragment ⇐ Node Kind: global class Extends: Node Access: public See: https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment DocumentFragment ⇐ Node .contentEditable .isConnected : boolean .parentNode : Node .firstChild : Node .lastChild : Node .previousSibling : Node .nextSibling : Node .firstElementChild : Node .lastElementChild : Node .previousElementSibling : Node .nextElementSibling : Node .textContent : string .childNodes : NodeList .ownerDocument .attributes .offsetParent .hasChildNodes() ⇒ boolean .cloneNode(deep) ⇒ Node .appendChild(child) ⇒ Node .insertBefore(child, before) ⇒ Node .replaceChild(newChild, oldChild) ⇒ Node .removeChild(child) ⇒ Node .remove() .before(...nodes) .after(...nodes) .replaceWith(...nodes) .addEventListener(eventName, callback, [capture]) .removeEventListener(eventName, callback, [capture]) .dispatchEvent(event) documentFragment.contentEditable Kind: instance property of DocumentFragment Read only: true documentFragment.isConnected : boolean Kind: instance property of DocumentFragment Read only: true documentFragment.parentNode : Node Kind: instance property of DocumentFragment Read only: true documentFragment.firstChild : Node Kind: instance property of DocumentFragment Read only: true documentFragment.lastChild : Node Kind: instance property of DocumentFragment Read only: true documentFragment.previousSibling : Node Kind: instance property of DocumentFragment Read only: true documentFragment.nextSibling : Node Kind: instance property of DocumentFragment Read only: true documentFragment.firstElementChild : Node Kind: instance property of DocumentFragment Read only: true documentFragment.lastElementChild : Node Kind: instance property of DocumentFragment Read only: true documentFragment.previousElementSibling : Node Kind: instance property of DocumentFragment Read only: true documentFragment.nextElementSibling : Node Kind: instance property of DocumentFragment Read only: true documentFragment.textContent : string Kind: instance property of DocumentFragment documentFragment.childNodes : NodeList Kind: instance property of DocumentFragment Read only: true documentFragment.ownerDocument Kind: instance property of DocumentFragment Read only: true documentFragment.attributes Kind: instance property of DocumentFragment Read only: true documentFragment.offsetParent Kind: instance property of DocumentFragment Read only: true documentFragment.hasChildNodes() ⇒ boolean Kind: instance method of DocumentFragment documentFragment.cloneNode(deep) ⇒ Node Kind: instance method of DocumentFragment Param Type deep boolean documentFragment.appendChild(child) ⇒ Node Kind: instance method of DocumentFragment Param Type child Node documentFragment.insertBefore(child, before) ⇒ Node Kind: instance method of DocumentFragment Param Type child Node before Node documentFragment.replaceChild(newChild, oldChild) ⇒ Node Kind: instance method of DocumentFragment Param Type newChild Node oldChild Node documentFragment.removeChild(child) ⇒ Node Kind: instance method of DocumentFragment Param Type child Node documentFragment.remove() Kind: instance method of DocumentFragment documentFragment.before(...nodes) Kind: instance method of DocumentFragment Param Type ...nodes Array. documentFragment.after(...nodes) Kind: instance method of DocumentFragment Param Type ...nodes Array. documentFragment.replaceWith(...nodes) Kind: instance method of DocumentFragment Param Type ...nodes Array. documentFragment.addEventListener(eventName, callback, [capture]) Kind: instance method of DocumentFragment Param Type Default eventName * callback * [capture] boolean false documentFragment.removeEventListener(eventName, callback, [capture]) Kind: instance method of DocumentFragment Param Type Default eventName * callback * [capture] boolean false documentFragment.dispatchEvent(event) Kind: instance method of DocumentFragment Param Type event * "},"reference/uxp/class/DOMException.html":{"url":"reference/uxp/class/DOMException.html","title":"DOMException","keywords":"","body":" DOMException ⇐ Error Kind: global classExtends: ErrorAccess: publicSee: https://developer.mozilla.org/en-US/docs/Web/API/DOMException "},"reference/uxp/class/DOMTokenList.html":{"url":"reference/uxp/class/DOMTokenList.html","title":"DOMTokenList","keywords":"","body":" DOMTokenList DOMTokenList supports the ClassList and other token list functionality Kind: global classAccess: publicSee https://dom.spec.whatwg.org/#interface-domtokenlist https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList DOMTokenList .length .value .add(...tokens) .remove(...tokens) .replace(oldToken, newToken) .toggle(token, force) ⇒ boolean .item(index) ⇒ string .contains(token) ⇒ boolean .supports(token) ⇒ boolean domTokenList.length Returns the number of tokens in the list Kind: instance property of DOMTokenList Read only: trueSee: https://dom.spec.whatwg.org/#dom-domtokenlist-length domTokenList.value The serialized string value of the token list Kind: instance property of DOMTokenList Read only: trueSee: https://dom.spec.whatwg.org/#dom-domtokenlist-value domTokenList.add(...tokens) Adds the specified tokens to the token list. If the token is already present, no error is thrown. Kind: instance method of DOMTokenList Throws: DOMException See: https://dom.spec.whatwg.org/#dom-domtokenlist-add Param Type ...tokens string domTokenList.remove(...tokens) Removes the specified items from the token list. If the token is not present, no error is thrown. Kind: instance method of DOMTokenList Throws: DOMException See: https://dom.spec.whatwg.org/#dom-domtokenlist-remove Param Type ...tokens string domTokenList.replace(oldToken, newToken) Replaces an old token with a new token. If the old token doesn't exist, no action occurs, and false is returned. Kind: instance method of DOMTokenList Throws: DOMException See: https://dom.spec.whatwg.org/#dom-domtokenlist-replace Param Type oldToken any newToken any domTokenList.toggle(token, force) ⇒ boolean Toggles a token within the list. If force is not present, then the following rules are applied: if the token is present, it is removed, and false is returned if the token isn't present, it is added, and true is returned If force is supplied, then: if true, the token is added if false, the token is removed Kind: instance method of DOMTokenList Returns: boolean - if the token exists in the last after the operationThrows: DOMException See: https://dom.spec.whatwg.org/#dom-domtokenlist-toggle Param Type token string force boolean domTokenList.item(index) ⇒ string Return the item at the specified index, or null if the index is out-of-range Kind: instance method of DOMTokenList Returns: string - the item at the index, or null if index is out of rangeSee: https://dom.spec.whatwg.org/#dom-domtokenlist-item Param Type index number domTokenList.contains(token) ⇒ boolean Returns whether the token is in the list or not. Kind: instance method of DOMTokenList Returns: boolean - if true, the token is in the list, otherwise it isn'tThrows: DOMException See: https://dom.spec.whatwg.org/#dom-domtokenlist-contains Param Type token any domTokenList.supports(token) ⇒ boolean Returns true if the token is acceptable to the list; otherwise returns false. If false is returned, passing the token would throw an error when calling any other method. Kind: instance method of DOMTokenList Returns: boolean - if true, the token is acceptable when calling other methodsSee: https://dom.spec.whatwg.org/#dom-domtokenlist-supports Param Type token string "},"reference/uxp/class/NamedNodeMap.html":{"url":"reference/uxp/class/NamedNodeMap.html","title":"NamedNodeMap","keywords":"","body":" NamedNodeMap Kind: global classAccess: publicSee: https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap NamedNodeMap new NamedNodeMap(node) .length : number .getNamedItem(name) ⇒ * .setNamedItem(attr) .removeNamedItem(name) .item(index) ⇒ * new NamedNodeMap(node) Creates an instance of NamedNodeMap. Param Type node Node namedNodeMap.length : number Kind: instance property of NamedNodeMap Read only: true namedNodeMap.getNamedItem(name) ⇒ * Kind: instance method of NamedNodeMap Param Type name * namedNodeMap.setNamedItem(attr) Kind: instance method of NamedNodeMap Param Type attr * namedNodeMap.removeNamedItem(name) Kind: instance method of NamedNodeMap Param Type name * namedNodeMap.item(index) ⇒ * Kind: instance method of NamedNodeMap Param Type index * "},"reference/uxp/class/Node.html":{"url":"reference/uxp/class/Node.html","title":"Node","keywords":"","body":" Node ⇐ EventTarget Kind: global class Extends: EventTarget Access: public See: https://developer.mozilla.org/en-US/docs/Web/API/Node Node ⇐ EventTarget new Node(ownerDocument) instance .contentEditable .isConnected : boolean .parentNode : Node .firstChild : Node .lastChild : Node .previousSibling : Node .nextSibling : Node .firstElementChild : Node .lastElementChild : Node .previousElementSibling : Node .nextElementSibling : Node .textContent : string .childNodes : NodeList .ownerDocument .attributes .offsetParent .hasChildNodes() ⇒ boolean .cloneNode(deep) ⇒ Node .appendChild(child) ⇒ Node .insertBefore(child, before) ⇒ Node .replaceChild(newChild, oldChild) ⇒ Node .removeChild(child) ⇒ Node .remove() .before(...nodes) .after(...nodes) .replaceWith(...nodes) .addEventListener(eventName, callback, [capture]) .removeEventListener(eventName, callback, [capture]) .dispatchEvent(event) static .ELEMENT_NODE .ATTRIBUTE_NODE .TEXT_NODE .DOCUMENT_NODE .DOCUMENT_FRAGMENT_NODE .COMMENT_NODE new Node(ownerDocument) Creates an instance of Node. Param Type ownerDocument * node.contentEditable Kind: instance property of Node Read only: true node.isConnected : boolean Kind: instance property of Node Read only: true node.parentNode : Node Kind: instance property of Node Read only: true node.firstChild : Node Kind: instance property of Node Read only: true node.lastChild : Node Kind: instance property of Node Read only: true node.previousSibling : Node Kind: instance property of Node Read only: true node.nextSibling : Node Kind: instance property of Node Read only: true node.firstElementChild : Node Kind: instance property of Node Read only: true node.lastElementChild : Node Kind: instance property of Node Read only: true node.previousElementSibling : Node Kind: instance property of Node Read only: true node.nextElementSibling : Node Kind: instance property of Node Read only: true node.textContent : string Kind: instance property of Node node.childNodes : NodeList Kind: instance property of Node Read only: true node.ownerDocument Kind: instance property of Node Read only: true node.attributes Kind: instance property of Node Read only: true node.offsetParent Kind: instance property of Node Read only: true node.hasChildNodes() ⇒ boolean Kind: instance method of Node node.cloneNode(deep) ⇒ Node Kind: instance method of Node Param Type deep boolean node.appendChild(child) ⇒ Node Kind: instance method of Node Param Type child Node node.insertBefore(child, before) ⇒ Node Kind: instance method of Node Param Type child Node before Node node.replaceChild(newChild, oldChild) ⇒ Node Kind: instance method of Node Param Type newChild Node oldChild Node node.removeChild(child) ⇒ Node Kind: instance method of Node Param Type child Node node.remove() Kind: instance method of Node node.before(...nodes) Kind: instance method of Node Param Type ...nodes Array. node.after(...nodes) Kind: instance method of Node Param Type ...nodes Array. node.replaceWith(...nodes) Kind: instance method of Node Param Type ...nodes Array. node.addEventListener(eventName, callback, [capture]) Kind: instance method of Node Param Type Default eventName * callback * [capture] boolean false node.removeEventListener(eventName, callback, [capture]) Kind: instance method of Node Param Type Default eventName * callback * [capture] boolean false node.dispatchEvent(event) Kind: instance method of Node Param Type event * Node.ELEMENT_NODE Kind: static property of Node Node.ATTRIBUTE_NODE Kind: static property of Node Node.TEXT_NODE Kind: static property of Node Node.DOCUMENT_NODE Kind: static property of Node Node.DOCUMENT_FRAGMENT_NODE Kind: static property of Node Node.COMMENT_NODE Kind: static property of Node "},"reference/uxp/class/NodeList.html":{"url":"reference/uxp/class/NodeList.html","title":"NodeList","keywords":"","body":" NodeList Kind: global classAccess: publicSee: https://developer.mozilla.org/en-US/docs/Web/API/NodeList NodeList new NodeList(staticList, updater) .length : number .item(index) ⇒ Node .keys() .values() .entries() .forEach(callback) new NodeList(staticList, updater) Creates an instance of NodeList. Param Type staticList * updater * nodeList.length : number Kind: instance property of NodeList Read only: true nodeList.item(index) ⇒ Node Kind: instance method of NodeList Param Type index number nodeList.keys() Kind: instance method of NodeList nodeList.values() Kind: instance method of NodeList nodeList.entries() Kind: instance method of NodeList nodeList.forEach(callback) Kind: instance method of NodeList Param Type callback * "},"reference/uxp/class/StyleSheet.html":{"url":"reference/uxp/class/StyleSheet.html","title":"StyleSheet","keywords":"","body":" StyleSheet Kind: global class StyleSheet instance .href : string static .StyleSheet new StyleSheet() styleSheet.href : string Kind: instance property of StyleSheetRead only: true StyleSheet.StyleSheet Kind: static class of StyleSheet new StyleSheet() Creates an instance of StyleSheet. "},"reference/uxp/class/StyleSheetList.html":{"url":"reference/uxp/class/StyleSheetList.html","title":"StyleSheetList","keywords":"","body":" StyleSheetList Kind: global class StyleSheetList .length .item(index) ⇒ StyleSheet styleSheetList.length Kind: instance property of StyleSheetListRead only: true styleSheetList.item(index) ⇒ StyleSheet Kind: instance method of StyleSheetList Param Type index * "},"reference/uxp/class/Text.html":{"url":"reference/uxp/class/Text.html","title":"Text","keywords":"","body":" Text ⇐ CharacterData Kind: global class Extends: CharacterData Access: public See: https://developer.mozilla.org/en-US/docs/Web/API/Text Text ⇐ CharacterData new Text(document, textContent) .nodeName : string .nodeType : number .data : string .textContent : string .nodeValue : string .length : number .contentEditable .isConnected : boolean .parentNode : Node .firstChild : Node .lastChild : Node .previousSibling : Node .nextSibling : Node .firstElementChild : Node .lastElementChild : Node .previousElementSibling : Node .nextElementSibling : Node .childNodes : NodeList .ownerDocument .attributes .offsetParent .substringData(offset, count) ⇒ string .appendData(arg) .insertData(offset, arg) .deleteData(offset, count) .replaceData(offset, count, arg) .hasChildNodes() ⇒ boolean .cloneNode(deep) ⇒ Node .appendChild(child) ⇒ Node .insertBefore(child, before) ⇒ Node .replaceChild(newChild, oldChild) ⇒ Node .removeChild(child) ⇒ Node .remove() .before(...nodes) .after(...nodes) .replaceWith(...nodes) .addEventListener(eventName, callback, [capture]) .removeEventListener(eventName, callback, [capture]) .dispatchEvent(event) new Text(document, textContent) Creates an instance of Text. Param Type document * textContent * text.nodeName : string Kind: instance property of Text Default: \"\\\"#text\\\"\" Read only: true text.nodeType : number Kind: instance property of Text Default: Node.TEXT_NODE Read only: true text.data : string Kind: instance property of Text text.textContent : string Kind: instance property of Text text.nodeValue : string Kind: instance property of Text text.length : number Kind: instance property of Text Read only: true text.contentEditable Kind: instance property of Text Read only: true text.isConnected : boolean Kind: instance property of Text Read only: true text.parentNode : Node Kind: instance property of Text Read only: true text.firstChild : Node Kind: instance property of Text Read only: true text.lastChild : Node Kind: instance property of Text Read only: true text.previousSibling : Node Kind: instance property of Text Read only: true text.nextSibling : Node Kind: instance property of Text Read only: true text.firstElementChild : Node Kind: instance property of Text Read only: true text.lastElementChild : Node Kind: instance property of Text Read only: true text.previousElementSibling : Node Kind: instance property of Text Read only: true text.nextElementSibling : Node Kind: instance property of Text Read only: true text.childNodes : NodeList Kind: instance property of Text Read only: true text.ownerDocument Kind: instance property of Text Read only: true text.attributes Kind: instance property of Text Read only: true text.offsetParent Kind: instance property of Text Read only: true text.substringData(offset, count) ⇒ string Kind: instance method of Text Param Type offset * count * text.appendData(arg) Kind: instance method of Text Param Type arg string text.insertData(offset, arg) Kind: instance method of Text Param Type offset number arg string text.deleteData(offset, count) Kind: instance method of Text Param Type offset number count number text.replaceData(offset, count, arg) Kind: instance method of Text Param Type offset number count number arg string text.hasChildNodes() ⇒ boolean Kind: instance method of Text text.cloneNode(deep) ⇒ Node Kind: instance method of Text Param Type deep boolean text.appendChild(child) ⇒ Node Kind: instance method of Text Param Type child Node text.insertBefore(child, before) ⇒ Node Kind: instance method of Text Param Type child Node before Node text.replaceChild(newChild, oldChild) ⇒ Node Kind: instance method of Text Param Type newChild Node oldChild Node text.removeChild(child) ⇒ Node Kind: instance method of Text Param Type child Node text.remove() Kind: instance method of Text text.before(...nodes) Kind: instance method of Text Param Type ...nodes Array. text.after(...nodes) Kind: instance method of Text Param Type ...nodes Array. text.replaceWith(...nodes) Kind: instance method of Text Param Type ...nodes Array. text.addEventListener(eventName, callback, [capture]) Kind: instance method of Text Param Type Default eventName * callback * [capture] boolean false text.removeEventListener(eventName, callback, [capture]) Kind: instance method of Text Param Type Default eventName * callback * [capture] boolean false text.dispatchEvent(event) Kind: instance method of Text Param Type event * "},"reference/uxp/ui-html-index.html":{"url":"reference/uxp/ui-html-index.html","title":"HTML elements","keywords":"","body":"UI HTML Elements Supported HTML Tags Any tag not listed below will be treated as a div tag. Category Tag Attribute Layout Notes and links Container dialog N/A Modal Dialog div Block Container element footer Block Footer containing pill buttons form Block Form (containing elements) Text b Block Bold text p Block Paragraph (equivalent to div) h1 Block Style differences within dialog form h2 Block \" h3 Block \" h4 Block \" h5 Block \" h6 Block \" p Block Paragraph (equivalent to div) span Block Text element Images img Block Display image elements button uxp-variant=\"cta\" Block Pill Button (Call To Action) button uxp-variant=\"primary\" Block Pill Button (Primary) button uxp-variant=\"secondary\" Block Pull Button (Secondary) button uxp-variant=\"warning\" Block Pull Button (Warning) button uxp-variant=\"action\" Block Action Button button uxp-selected=\"true\" Block Selected Action Button button uxp-quiet=\"true\" Block Quiet variation (except call to action) input] type=\"checkbox\" Block Checkbox input] type=\"image\" Block Image Button input] type=\"number\" Block Text field input] type=\"range\" Block Slider input] type=\"text\" Block Text field input] type=\"text\" uxp-quiet=\"true\" Block Quiet text field select Block Dropdown option N/A Dropdown options textarea Block Standard text area textarea uxp-quiet=\"true\" Block Quiet text area Menus menu N/A Context menu menuitem N/A Context menu items "},"reference/uxp/class/HTMLAnchorElement.html":{"url":"reference/uxp/class/HTMLAnchorElement.html","title":"HTMLAnchorElement","keywords":"","body":" HTMLAnchorElement ⇐ HTMLElement Kind: global class Extends: HTMLElement Access: public See: https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement HTMLAnchorElement ⇐ HTMLElement new HTMLAnchorElement(document, nodeName, namespaceURI) .href : string .pathname : string .protocol : string .nodeName : string .localName : string .tagName : string .nodeType : number .namespaceURI : string .id : string .className : string .attributes : NamedNodeMap .style : Style .clientLeft : number .clientTop : number .clientWidth : number .clientHeight : number .offsetLeft : number .offsetTop : number .offsetWidth : number .offsetHeight : number .scrollLeft : number .scrollTop : number .scrollWidth : number .scrollHeight : number .disabled : boolean .innerHTML : string .outerHTML : string .contentEditable .isConnected : boolean .parentNode : Node .firstChild : Node .lastChild : Node .previousSibling : Node .nextSibling : Node .firstElementChild : Node .lastElementChild : Node .previousElementSibling : Node .nextElementSibling : Node .textContent : string .childNodes : NodeList .ownerDocument .offsetParent .scrollIntoView() .scrollIntoViewIfNeeded() .focus() .blur() .getAttribute(name) ⇒ string .setAttribute(name, value) .removeAttribute(name) .hasAttribute(name) ⇒ boolean .getAttributeNode(name) ⇒ * .setAttributeNode(newAttr) .removeAttributeNode(oldAttr) .getElementsByClassName(name) ⇒ NodeList .getElementsByTagName(name) ⇒ NodeList .querySelector(selector) ⇒ Element .querySelectorAll(selector) ⇒ NodeList .getBoundingClientRect() ⇒ * .insertAdjacentHTML(position, value) .insertAdjacentElement(position, node) ⇒ Node .insertAdjacentText(position, text) .hasChildNodes() ⇒ boolean .cloneNode(deep) ⇒ Node .appendChild(child) ⇒ Node .insertBefore(child, before) ⇒ Node .replaceChild(newChild, oldChild) ⇒ Node .removeChild(child) ⇒ Node .remove() .before(...nodes) .after(...nodes) .replaceWith(...nodes) .addEventListener(eventName, callback, [capture]) .removeEventListener(eventName, callback, [capture]) .dispatchEvent(event) new HTMLAnchorElement(document, nodeName, namespaceURI) Creates an instance of HTMLAnchorElement. Param Type document * nodeName * namespaceURI * htmlAnchorElement.href : string The href value for the anchor Kind: instance property of HTMLAnchorElement htmlAnchorElement.pathname : string The path portion of the anchor's href Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.protocol : string The protocol portion of the anchor's href. Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.nodeName : string Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.localName : string Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.tagName : string Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.nodeType : number Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.namespaceURI : string Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.id : string Kind: instance property of HTMLAnchorElement htmlAnchorElement.className : string Kind: instance property of HTMLAnchorElement htmlAnchorElement.attributes : NamedNodeMap Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.style : Style Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.clientLeft : number Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.clientTop : number Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.clientWidth : number Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.clientHeight : number Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.offsetLeft : number Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.offsetTop : number Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.offsetWidth : number Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.offsetHeight : number Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.scrollLeft : number Kind: instance property of HTMLAnchorElement htmlAnchorElement.scrollTop : number Kind: instance property of HTMLAnchorElement htmlAnchorElement.scrollWidth : number Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.scrollHeight : number Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.disabled : boolean Kind: instance property of HTMLAnchorElement htmlAnchorElement.innerHTML : string Kind: instance property of HTMLAnchorElement htmlAnchorElement.outerHTML : string Kind: instance property of HTMLAnchorElement htmlAnchorElement.contentEditable Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.isConnected : boolean Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.parentNode : Node Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.firstChild : Node Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.lastChild : Node Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.previousSibling : Node Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.nextSibling : Node Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.firstElementChild : Node Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.lastElementChild : Node Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.previousElementSibling : Node Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.nextElementSibling : Node Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.textContent : string Kind: instance property of HTMLAnchorElement htmlAnchorElement.childNodes : NodeList Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.ownerDocument Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.offsetParent Kind: instance property of HTMLAnchorElement Read only: true htmlAnchorElement.scrollIntoView() Kind: instance method of HTMLAnchorElement htmlAnchorElement.scrollIntoViewIfNeeded() Kind: instance method of HTMLAnchorElement htmlAnchorElement.focus() Kind: instance method of HTMLAnchorElement htmlAnchorElement.blur() Kind: instance method of HTMLAnchorElement htmlAnchorElement.getAttribute(name) ⇒ string Kind: instance method of HTMLAnchorElement Param Type name string htmlAnchorElement.setAttribute(name, value) Kind: instance method of HTMLAnchorElement Param Type name string value string htmlAnchorElement.removeAttribute(name) Kind: instance method of HTMLAnchorElement Param Type name string htmlAnchorElement.hasAttribute(name) ⇒ boolean Kind: instance method of HTMLAnchorElement Param Type name string htmlAnchorElement.getAttributeNode(name) ⇒ * Kind: instance method of HTMLAnchorElement Param Type name string htmlAnchorElement.setAttributeNode(newAttr) Kind: instance method of HTMLAnchorElement Param Type newAttr * htmlAnchorElement.removeAttributeNode(oldAttr) Kind: instance method of HTMLAnchorElement Param Type oldAttr * htmlAnchorElement.getElementsByClassName(name) ⇒ NodeList Kind: instance method of HTMLAnchorElement Param Type name string htmlAnchorElement.getElementsByTagName(name) ⇒ NodeList Kind: instance method of HTMLAnchorElement Param Type name string htmlAnchorElement.querySelector(selector) ⇒ Element Kind: instance method of HTMLAnchorElement Param Type selector string htmlAnchorElement.querySelectorAll(selector) ⇒ NodeList Kind: instance method of HTMLAnchorElement Param Type selector string htmlAnchorElement.getBoundingClientRect() ⇒ * Kind: instance method of HTMLAnchorElement htmlAnchorElement.insertAdjacentHTML(position, value) Kind: instance method of HTMLAnchorElement Param Type position value string htmlAnchorElement.insertAdjacentElement(position, node) ⇒ Node Kind: instance method of HTMLAnchorElement Param Type position * node * htmlAnchorElement.insertAdjacentText(position, text) Kind: instance method of HTMLAnchorElement Param Type position * text * htmlAnchorElement.hasChildNodes() ⇒ boolean Kind: instance method of HTMLAnchorElement htmlAnchorElement.cloneNode(deep) ⇒ Node Kind: instance method of HTMLAnchorElement Param Type deep boolean htmlAnchorElement.appendChild(child) ⇒ Node Kind: instance method of HTMLAnchorElement Param Type child Node htmlAnchorElement.insertBefore(child, before) ⇒ Node Kind: instance method of HTMLAnchorElement Param Type child Node before Node htmlAnchorElement.replaceChild(newChild, oldChild) ⇒ Node Kind: instance method of HTMLAnchorElement Param Type newChild Node oldChild Node htmlAnchorElement.removeChild(child) ⇒ Node Kind: instance method of HTMLAnchorElement Param Type child Node htmlAnchorElement.remove() Kind: instance method of HTMLAnchorElement htmlAnchorElement.before(...nodes) Kind: instance method of HTMLAnchorElement Param Type ...nodes Array. htmlAnchorElement.after(...nodes) Kind: instance method of HTMLAnchorElement Param Type ...nodes Array. htmlAnchorElement.replaceWith(...nodes) Kind: instance method of HTMLAnchorElement Param Type ...nodes Array. htmlAnchorElement.addEventListener(eventName, callback, [capture]) Kind: instance method of HTMLAnchorElement Param Type Default eventName * callback * [capture] boolean false htmlAnchorElement.removeEventListener(eventName, callback, [capture]) Kind: instance method of HTMLAnchorElement Param Type Default eventName * callback * [capture] boolean false htmlAnchorElement.dispatchEvent(event) Kind: instance method of HTMLAnchorElement Param Type event * "},"reference/uxp/class/HTMLBodyElement.html":{"url":"reference/uxp/class/HTMLBodyElement.html","title":"HTMLBodyElement","keywords":"","body":" HTMLBodyElement ⇐ HTMLElement Kind: global class Extends: HTMLElement Access: public See: https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement HTMLBodyElement ⇐ HTMLElement new HTMLBodyElement(document, nodeName, namespaceURI) .nodeName : string .localName : string .tagName : string .nodeType : number .namespaceURI : string .id : string .className : string .attributes : NamedNodeMap .style : Style .clientLeft : number .clientTop : number .clientWidth : number .clientHeight : number .offsetLeft : number .offsetTop : number .offsetWidth : number .offsetHeight : number .scrollLeft : number .scrollTop : number .scrollWidth : number .scrollHeight : number .disabled : boolean .innerHTML : string .outerHTML : string .contentEditable .isConnected : boolean .parentNode : Node .firstChild : Node .lastChild : Node .previousSibling : Node .nextSibling : Node .firstElementChild : Node .lastElementChild : Node .previousElementSibling : Node .nextElementSibling : Node .textContent : string .childNodes : NodeList .ownerDocument .offsetParent .scrollIntoView() .scrollIntoViewIfNeeded() .focus() .blur() .getAttribute(name) ⇒ string .setAttribute(name, value) .removeAttribute(name) .hasAttribute(name) ⇒ boolean .getAttributeNode(name) ⇒ * .setAttributeNode(newAttr) .removeAttributeNode(oldAttr) .getElementsByClassName(name) ⇒ NodeList .getElementsByTagName(name) ⇒ NodeList .querySelector(selector) ⇒ Element .querySelectorAll(selector) ⇒ NodeList .getBoundingClientRect() ⇒ * .insertAdjacentHTML(position, value) .insertAdjacentElement(position, node) ⇒ Node .insertAdjacentText(position, text) .hasChildNodes() ⇒ boolean .cloneNode(deep) ⇒ Node .appendChild(child) ⇒ Node .insertBefore(child, before) ⇒ Node .replaceChild(newChild, oldChild) ⇒ Node .removeChild(child) ⇒ Node .remove() .before(...nodes) .after(...nodes) .replaceWith(...nodes) .addEventListener(eventName, callback, [capture]) .removeEventListener(eventName, callback, [capture]) .dispatchEvent(event) new HTMLBodyElement(document, nodeName, namespaceURI) Creates an instance of HTMLBodyElement. Param Type document * nodeName * namespaceURI * htmlBodyElement.nodeName : string Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.localName : string Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.tagName : string Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.nodeType : number Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.namespaceURI : string Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.id : string Kind: instance property of HTMLBodyElement htmlBodyElement.className : string Kind: instance property of HTMLBodyElement htmlBodyElement.attributes : NamedNodeMap Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.style : Style Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.clientLeft : number Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.clientTop : number Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.clientWidth : number Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.clientHeight : number Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.offsetLeft : number Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.offsetTop : number Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.offsetWidth : number Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.offsetHeight : number Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.scrollLeft : number Kind: instance property of HTMLBodyElement htmlBodyElement.scrollTop : number Kind: instance property of HTMLBodyElement htmlBodyElement.scrollWidth : number Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.scrollHeight : number Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.disabled : boolean Kind: instance property of HTMLBodyElement htmlBodyElement.innerHTML : string Kind: instance property of HTMLBodyElement htmlBodyElement.outerHTML : string Kind: instance property of HTMLBodyElement htmlBodyElement.contentEditable Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.isConnected : boolean Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.parentNode : Node Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.firstChild : Node Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.lastChild : Node Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.previousSibling : Node Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.nextSibling : Node Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.firstElementChild : Node Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.lastElementChild : Node Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.previousElementSibling : Node Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.nextElementSibling : Node Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.textContent : string Kind: instance property of HTMLBodyElement htmlBodyElement.childNodes : NodeList Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.ownerDocument Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.offsetParent Kind: instance property of HTMLBodyElement Read only: true htmlBodyElement.scrollIntoView() Kind: instance method of HTMLBodyElement htmlBodyElement.scrollIntoViewIfNeeded() Kind: instance method of HTMLBodyElement htmlBodyElement.focus() Kind: instance method of HTMLBodyElement htmlBodyElement.blur() Kind: instance method of HTMLBodyElement htmlBodyElement.getAttribute(name) ⇒ string Kind: instance method of HTMLBodyElement Param Type name string htmlBodyElement.setAttribute(name, value) Kind: instance method of HTMLBodyElement Param Type name string value string htmlBodyElement.removeAttribute(name) Kind: instance method of HTMLBodyElement Param Type name string htmlBodyElement.hasAttribute(name) ⇒ boolean Kind: instance method of HTMLBodyElement Param Type name string htmlBodyElement.getAttributeNode(name) ⇒ * Kind: instance method of HTMLBodyElement Param Type name string htmlBodyElement.setAttributeNode(newAttr) Kind: instance method of HTMLBodyElement Param Type newAttr * htmlBodyElement.removeAttributeNode(oldAttr) Kind: instance method of HTMLBodyElement Param Type oldAttr * htmlBodyElement.getElementsByClassName(name) ⇒ NodeList Kind: instance method of HTMLBodyElement Param Type name string htmlBodyElement.getElementsByTagName(name) ⇒ NodeList Kind: instance method of HTMLBodyElement Param Type name string htmlBodyElement.querySelector(selector) ⇒ Element Kind: instance method of HTMLBodyElement Param Type selector string htmlBodyElement.querySelectorAll(selector) ⇒ NodeList Kind: instance method of HTMLBodyElement Param Type selector string htmlBodyElement.getBoundingClientRect() ⇒ * Kind: instance method of HTMLBodyElement htmlBodyElement.insertAdjacentHTML(position, value) Kind: instance method of HTMLBodyElement Param Type position value string htmlBodyElement.insertAdjacentElement(position, node) ⇒ Node Kind: instance method of HTMLBodyElement Param Type position * node * htmlBodyElement.insertAdjacentText(position, text) Kind: instance method of HTMLBodyElement Param Type position * text * htmlBodyElement.hasChildNodes() ⇒ boolean Kind: instance method of HTMLBodyElement htmlBodyElement.cloneNode(deep) ⇒ Node Kind: instance method of HTMLBodyElement Param Type deep boolean htmlBodyElement.appendChild(child) ⇒ Node Kind: instance method of HTMLBodyElement Param Type child Node htmlBodyElement.insertBefore(child, before) ⇒ Node Kind: instance method of HTMLBodyElement Param Type child Node before Node htmlBodyElement.replaceChild(newChild, oldChild) ⇒ Node Kind: instance method of HTMLBodyElement Param Type newChild Node oldChild Node htmlBodyElement.removeChild(child) ⇒ Node Kind: instance method of HTMLBodyElement Param Type child Node htmlBodyElement.remove() Kind: instance method of HTMLBodyElement htmlBodyElement.before(...nodes) Kind: instance method of HTMLBodyElement Param Type ...nodes Array. htmlBodyElement.after(...nodes) Kind: instance method of HTMLBodyElement Param Type ...nodes Array. htmlBodyElement.replaceWith(...nodes) Kind: instance method of HTMLBodyElement Param Type ...nodes Array. htmlBodyElement.addEventListener(eventName, callback, [capture]) Kind: instance method of HTMLBodyElement Param Type Default eventName * callback * [capture] boolean false htmlBodyElement.removeEventListener(eventName, callback, [capture]) Kind: instance method of HTMLBodyElement Param Type Default eventName * callback * [capture] boolean false htmlBodyElement.dispatchEvent(event) Kind: instance method of HTMLBodyElement Param Type event * "},"reference/uxp/class/HTMLButtonElement.html":{"url":"reference/uxp/class/HTMLButtonElement.html","title":"HTMLButtonElement","keywords":"","body":" HTMLButtonElement ⇐ HTMLElement Kind: global class Extends: HTMLElement Access: public See: https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement HTMLButtonElement ⇐ HTMLElement new HTMLButtonElement(document, nodeName, namespaceURI) .nodeName : string .localName : string .tagName : string .nodeType : number .namespaceURI : string .id : string .className : string .attributes : NamedNodeMap .style : Style .clientLeft : number .clientTop : number .clientWidth : number .clientHeight : number .offsetLeft : number .offsetTop : number .offsetWidth : number .offsetHeight : number .scrollLeft : number .scrollTop : number .scrollWidth : number .scrollHeight : number .disabled : boolean .innerHTML : string .outerHTML : string .contentEditable .isConnected : boolean .parentNode : Node .firstChild : Node .lastChild : Node .previousSibling : Node .nextSibling : Node .firstElementChild : Node .lastElementChild : Node .previousElementSibling : Node .nextElementSibling : Node .textContent : string .childNodes : NodeList .ownerDocument .offsetParent .scrollIntoView() .scrollIntoViewIfNeeded() .focus() .blur() .getAttribute(name) ⇒ string .setAttribute(name, value) .removeAttribute(name) .hasAttribute(name) ⇒ boolean .getAttributeNode(name) ⇒ * .setAttributeNode(newAttr) .removeAttributeNode(oldAttr) .getElementsByClassName(name) ⇒ NodeList .getElementsByTagName(name) ⇒ NodeList .querySelector(selector) ⇒ Element .querySelectorAll(selector) ⇒ NodeList .getBoundingClientRect() ⇒ * .insertAdjacentHTML(position, value) .insertAdjacentElement(position, node) ⇒ Node .insertAdjacentText(position, text) .hasChildNodes() ⇒ boolean .cloneNode(deep) ⇒ Node .appendChild(child) ⇒ Node .insertBefore(child, before) ⇒ Node .replaceChild(newChild, oldChild) ⇒ Node .removeChild(child) ⇒ Node .remove() .before(...nodes) .after(...nodes) .replaceWith(...nodes) .addEventListener(eventName, callback, [capture]) .removeEventListener(eventName, callback, [capture]) .dispatchEvent(event) new HTMLButtonElement(document, nodeName, namespaceURI) Creates an instance of HTMLButtonElement. Param Type document Document nodeName string namespaceURI string htmlButtonElement.nodeName : string Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.localName : string Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.tagName : string Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.nodeType : number Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.namespaceURI : string Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.id : string Kind: instance property of HTMLButtonElement htmlButtonElement.className : string Kind: instance property of HTMLButtonElement htmlButtonElement.attributes : NamedNodeMap Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.style : Style Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.clientLeft : number Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.clientTop : number Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.clientWidth : number Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.clientHeight : number Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.offsetLeft : number Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.offsetTop : number Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.offsetWidth : number Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.offsetHeight : number Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.scrollLeft : number Kind: instance property of HTMLButtonElement htmlButtonElement.scrollTop : number Kind: instance property of HTMLButtonElement htmlButtonElement.scrollWidth : number Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.scrollHeight : number Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.disabled : boolean Kind: instance property of HTMLButtonElement htmlButtonElement.innerHTML : string Kind: instance property of HTMLButtonElement htmlButtonElement.outerHTML : string Kind: instance property of HTMLButtonElement htmlButtonElement.contentEditable Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.isConnected : boolean Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.parentNode : Node Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.firstChild : Node Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.lastChild : Node Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.previousSibling : Node Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.nextSibling : Node Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.firstElementChild : Node Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.lastElementChild : Node Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.previousElementSibling : Node Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.nextElementSibling : Node Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.textContent : string Kind: instance property of HTMLButtonElement htmlButtonElement.childNodes : NodeList Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.ownerDocument Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.offsetParent Kind: instance property of HTMLButtonElement Read only: true htmlButtonElement.scrollIntoView() Kind: instance method of HTMLButtonElement htmlButtonElement.scrollIntoViewIfNeeded() Kind: instance method of HTMLButtonElement htmlButtonElement.focus() Kind: instance method of HTMLButtonElement htmlButtonElement.blur() Kind: instance method of HTMLButtonElement htmlButtonElement.getAttribute(name) ⇒ string Kind: instance method of HTMLButtonElement Param Type name string htmlButtonElement.setAttribute(name, value) Kind: instance method of HTMLButtonElement Param Type name string value string htmlButtonElement.removeAttribute(name) Kind: instance method of HTMLButtonElement Param Type name string htmlButtonElement.hasAttribute(name) ⇒ boolean Kind: instance method of HTMLButtonElement Param Type name string htmlButtonElement.getAttributeNode(name) ⇒ * Kind: instance method of HTMLButtonElement Param Type name string htmlButtonElement.setAttributeNode(newAttr) Kind: instance method of HTMLButtonElement Param Type newAttr * htmlButtonElement.removeAttributeNode(oldAttr) Kind: instance method of HTMLButtonElement Param Type oldAttr * htmlButtonElement.getElementsByClassName(name) ⇒ NodeList Kind: instance method of HTMLButtonElement Param Type name string htmlButtonElement.getElementsByTagName(name) ⇒ NodeList Kind: instance method of HTMLButtonElement Param Type name string htmlButtonElement.querySelector(selector) ⇒ Element Kind: instance method of HTMLButtonElement Param Type selector string htmlButtonElement.querySelectorAll(selector) ⇒ NodeList Kind: instance method of HTMLButtonElement Param Type selector string htmlButtonElement.getBoundingClientRect() ⇒ * Kind: instance method of HTMLButtonElement htmlButtonElement.insertAdjacentHTML(position, value) Kind: instance method of HTMLButtonElement Param Type position value string htmlButtonElement.insertAdjacentElement(position, node) ⇒ Node Kind: instance method of HTMLButtonElement Param Type position * node * htmlButtonElement.insertAdjacentText(position, text) Kind: instance method of HTMLButtonElement Param Type position * text * htmlButtonElement.hasChildNodes() ⇒ boolean Kind: instance method of HTMLButtonElement htmlButtonElement.cloneNode(deep) ⇒ Node Kind: instance method of HTMLButtonElement Param Type deep boolean htmlButtonElement.appendChild(child) ⇒ Node Kind: instance method of HTMLButtonElement Param Type child Node htmlButtonElement.insertBefore(child, before) ⇒ Node Kind: instance method of HTMLButtonElement Param Type child Node before Node htmlButtonElement.replaceChild(newChild, oldChild) ⇒ Node Kind: instance method of HTMLButtonElement Param Type newChild Node oldChild Node htmlButtonElement.removeChild(child) ⇒ Node Kind: instance method of HTMLButtonElement Param Type child Node htmlButtonElement.remove() Kind: instance method of HTMLButtonElement htmlButtonElement.before(...nodes) Kind: instance method of HTMLButtonElement Param Type ...nodes Array. htmlButtonElement.after(...nodes) Kind: instance method of HTMLButtonElement Param Type ...nodes Array. htmlButtonElement.replaceWith(...nodes) Kind: instance method of HTMLButtonElement Param Type ...nodes Array. htmlButtonElement.addEventListener(eventName, callback, [capture]) Kind: instance method of HTMLButtonElement Param Type Default eventName * callback * [capture] boolean false htmlButtonElement.removeEventListener(eventName, callback, [capture]) Kind: instance method of HTMLButtonElement Param Type Default eventName * callback * [capture] boolean false htmlButtonElement.dispatchEvent(event) Kind: instance method of HTMLButtonElement Param Type event * "},"reference/uxp/class/HTMLDialogElement.html":{"url":"reference/uxp/class/HTMLDialogElement.html","title":"HTMLDialogElement","keywords":"","body":" HTMLDialogElement ⇐ HTMLElement Kind: global class Extends: HTMLElement Access: public See: https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement HTMLDialogElement ⇐ HTMLElement new HTMLDialogElement(document, nodeName, namespaceURI) .open : boolean .returnValue : * .REJECTION_REASON_NOT_ALLOWED .REJECTION_REASON_DETACHED .nodeName : string .localName : string .tagName : string .nodeType : number .namespaceURI : string .id : string .className : string .attributes : NamedNodeMap .style : Style .clientLeft : number .clientTop : number .clientWidth : number .clientHeight : number .offsetLeft : number .offsetTop : number .offsetWidth : number .offsetHeight : number .scrollLeft : number .scrollTop : number .scrollWidth : number .scrollHeight : number .disabled : boolean .innerHTML : string .outerHTML : string .contentEditable .isConnected : boolean .parentNode : Node .firstChild : Node .lastChild : Node .previousSibling : Node .nextSibling : Node .firstElementChild : Node .lastElementChild : Node .previousElementSibling : Node .nextElementSibling : Node .textContent : string .childNodes : NodeList .ownerDocument .offsetParent .showModal() ⇒ Promise .close([returnValue]) .scrollIntoView() .scrollIntoViewIfNeeded() .focus() .blur() .getAttribute(name) ⇒ string .setAttribute(name, value) .removeAttribute(name) .hasAttribute(name) ⇒ boolean .getAttributeNode(name) ⇒ * .setAttributeNode(newAttr) .removeAttributeNode(oldAttr) .getElementsByClassName(name) ⇒ NodeList .getElementsByTagName(name) ⇒ NodeList .querySelector(selector) ⇒ Element .querySelectorAll(selector) ⇒ NodeList .getBoundingClientRect() ⇒ * .insertAdjacentHTML(position, value) .insertAdjacentElement(position, node) ⇒ Node .insertAdjacentText(position, text) .hasChildNodes() ⇒ boolean .cloneNode(deep) ⇒ Node .appendChild(child) ⇒ Node .insertBefore(child, before) ⇒ Node .replaceChild(newChild, oldChild) ⇒ Node .removeChild(child) ⇒ Node .remove() .before(...nodes) .after(...nodes) .replaceWith(...nodes) .addEventListener(eventName, callback, [capture]) .removeEventListener(eventName, callback, [capture]) .dispatchEvent(event) new HTMLDialogElement(document, nodeName, namespaceURI) Creates an instance of HTMLDialogElement. Param Type document * nodeName * namespaceURI * htmlDialogElement.open : boolean Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.returnValue : * Kind: instance property of HTMLDialogElement htmlDialogElement.REJECTION_REASON_NOT_ALLOWED When the promise returned from openDialog() is rejected, error.code can be equal to this value, which means that the application does not allow showing dialogs (e.g. only one dialog is allowed). Kind: instance property of HTMLDialogElement htmlDialogElement.REJECTION_REASON_DETACHED When the promise returned from openDialog() is rejected, error.code can be equal to this value, which means that the node has been detached from DOM tree. Kind: instance property of HTMLDialogElement htmlDialogElement.nodeName : string Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.localName : string Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.tagName : string Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.nodeType : number Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.namespaceURI : string Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.id : string Kind: instance property of HTMLDialogElement htmlDialogElement.className : string Kind: instance property of HTMLDialogElement htmlDialogElement.attributes : NamedNodeMap Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.style : Style Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.clientLeft : number Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.clientTop : number Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.clientWidth : number Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.clientHeight : number Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.offsetLeft : number Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.offsetTop : number Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.offsetWidth : number Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.offsetHeight : number Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.scrollLeft : number Kind: instance property of HTMLDialogElement htmlDialogElement.scrollTop : number Kind: instance property of HTMLDialogElement htmlDialogElement.scrollWidth : number Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.scrollHeight : number Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.disabled : boolean Kind: instance property of HTMLDialogElement htmlDialogElement.innerHTML : string Kind: instance property of HTMLDialogElement htmlDialogElement.outerHTML : string Kind: instance property of HTMLDialogElement htmlDialogElement.contentEditable Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.isConnected : boolean Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.parentNode : Node Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.firstChild : Node Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.lastChild : Node Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.previousSibling : Node Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.nextSibling : Node Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.firstElementChild : Node Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.lastElementChild : Node Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.previousElementSibling : Node Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.nextElementSibling : Node Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.textContent : string Kind: instance property of HTMLDialogElement htmlDialogElement.childNodes : NodeList Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.ownerDocument Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.offsetParent Kind: instance property of HTMLDialogElement Read only: true htmlDialogElement.showModal() ⇒ Promise Show the modal dialog. Kind: instance method of HTMLDialogElement Returns: Promise - A promise that resolves when the dialog is closed (NSC) after calling the close() method or clicking the \"submit\" button. The promise will be resolved with returnValue as a parameter. The promise can be rejected if the dialog was closed for other reasons e.g. the user hit escape or closed the window, or if the application does not allow showing the dialog. The error parameter will give more details. error.code will be one of the values from HTMLDialogElement.rejectionReasons. htmlDialogElement.close([returnValue]) Closes the dialog; setting the return value (optional) Kind: instance method of HTMLDialogElement Param Type [returnValue] * htmlDialogElement.scrollIntoView() Kind: instance method of HTMLDialogElement htmlDialogElement.scrollIntoViewIfNeeded() Kind: instance method of HTMLDialogElement htmlDialogElement.focus() Kind: instance method of HTMLDialogElement htmlDialogElement.blur() Kind: instance method of HTMLDialogElement htmlDialogElement.getAttribute(name) ⇒ string Kind: instance method of HTMLDialogElement Param Type name string htmlDialogElement.setAttribute(name, value) Kind: instance method of HTMLDialogElement Param Type name string value string htmlDialogElement.removeAttribute(name) Kind: instance method of HTMLDialogElement Param Type name string htmlDialogElement.hasAttribute(name) ⇒ boolean Kind: instance method of HTMLDialogElement Param Type name string htmlDialogElement.getAttributeNode(name) ⇒ * Kind: instance method of HTMLDialogElement Param Type name string htmlDialogElement.setAttributeNode(newAttr) Kind: instance method of HTMLDialogElement Param Type newAttr * htmlDialogElement.removeAttributeNode(oldAttr) Kind: instance method of HTMLDialogElement Param Type oldAttr * htmlDialogElement.getElementsByClassName(name) ⇒ NodeList Kind: instance method of HTMLDialogElement Param Type name string htmlDialogElement.getElementsByTagName(name) ⇒ NodeList Kind: instance method of HTMLDialogElement Param Type name string htmlDialogElement.querySelector(selector) ⇒ Element Kind: instance method of HTMLDialogElement Param Type selector string htmlDialogElement.querySelectorAll(selector) ⇒ NodeList Kind: instance method of HTMLDialogElement Param Type selector string htmlDialogElement.getBoundingClientRect() ⇒ * Kind: instance method of HTMLDialogElement htmlDialogElement.insertAdjacentHTML(position, value) Kind: instance method of HTMLDialogElement Param Type position value string htmlDialogElement.insertAdjacentElement(position, node) ⇒ Node Kind: instance method of HTMLDialogElement Param Type position * node * htmlDialogElement.insertAdjacentText(position, text) Kind: instance method of HTMLDialogElement Param Type position * text * htmlDialogElement.hasChildNodes() ⇒ boolean Kind: instance method of HTMLDialogElement htmlDialogElement.cloneNode(deep) ⇒ Node Kind: instance method of HTMLDialogElement Param Type deep boolean htmlDialogElement.appendChild(child) ⇒ Node Kind: instance method of HTMLDialogElement Param Type child Node htmlDialogElement.insertBefore(child, before) ⇒ Node Kind: instance method of HTMLDialogElement Param Type child Node before Node htmlDialogElement.replaceChild(newChild, oldChild) ⇒ Node Kind: instance method of HTMLDialogElement Param Type newChild Node oldChild Node htmlDialogElement.removeChild(child) ⇒ Node Kind: instance method of HTMLDialogElement Param Type child Node htmlDialogElement.remove() Kind: instance method of HTMLDialogElement htmlDialogElement.before(...nodes) Kind: instance method of HTMLDialogElement Param Type ...nodes Array. htmlDialogElement.after(...nodes) Kind: instance method of HTMLDialogElement Param Type ...nodes Array. htmlDialogElement.replaceWith(...nodes) Kind: instance method of HTMLDialogElement Param Type ...nodes Array. htmlDialogElement.addEventListener(eventName, callback, [capture]) Kind: instance method of HTMLDialogElement Param Type Default eventName * callback * [capture] boolean false htmlDialogElement.removeEventListener(eventName, callback, [capture]) Kind: instance method of HTMLDialogElement Param Type Default eventName * callback * [capture] boolean false htmlDialogElement.dispatchEvent(event) Kind: instance method of HTMLDialogElement Param Type event * "},"reference/uxp/class/HTMLElement.html":{"url":"reference/uxp/class/HTMLElement.html","title":"HTMLElement","keywords":"","body":" HTMLElement ⇐ Element Kind: global class Extends: Element Access: public See: https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement HTMLElement ⇐ Element new HTMLElement(document, nodeName, namespaceURI) .nodeName : string .localName : string .tagName : string .nodeType : number .namespaceURI : string .id : string .className : string .attributes : NamedNodeMap .style : Style .clientLeft : number .clientTop : number .clientWidth : number .clientHeight : number .offsetLeft : number .offsetTop : number .offsetWidth : number .offsetHeight : number .scrollLeft : number .scrollTop : number .scrollWidth : number .scrollHeight : number .disabled : boolean .innerHTML : string .outerHTML : string .contentEditable .isConnected : boolean .parentNode : Node .firstChild : Node .lastChild : Node .previousSibling : Node .nextSibling : Node .firstElementChild : Node .lastElementChild : Node .previousElementSibling : Node .nextElementSibling : Node .textContent : string .childNodes : NodeList .ownerDocument .offsetParent .scrollIntoView() .scrollIntoViewIfNeeded() .focus() .blur() .getAttribute(name) ⇒ string .setAttribute(name, value) .removeAttribute(name) .hasAttribute(name) ⇒ boolean .getAttributeNode(name) ⇒ * .setAttributeNode(newAttr) .removeAttributeNode(oldAttr) .getElementsByClassName(name) ⇒ NodeList .getElementsByTagName(name) ⇒ NodeList .querySelector(selector) ⇒ Element .querySelectorAll(selector) ⇒ NodeList .getBoundingClientRect() ⇒ * .insertAdjacentHTML(position, value) .insertAdjacentElement(position, node) ⇒ Node .insertAdjacentText(position, text) .hasChildNodes() ⇒ boolean .cloneNode(deep) ⇒ Node .appendChild(child) ⇒ Node .insertBefore(child, before) ⇒ Node .replaceChild(newChild, oldChild) ⇒ Node .removeChild(child) ⇒ Node .remove() .before(...nodes) .after(...nodes) .replaceWith(...nodes) .addEventListener(eventName, callback, [capture]) .removeEventListener(eventName, callback, [capture]) .dispatchEvent(event) new HTMLElement(document, nodeName, namespaceURI) Creates an instance of HTMLElement. Param Type document * nodeName * namespaceURI * htmlElement.nodeName : string Kind: instance property of HTMLElement Read only: true htmlElement.localName : string Kind: instance property of HTMLElement Read only: true htmlElement.tagName : string Kind: instance property of HTMLElement Read only: true htmlElement.nodeType : number Kind: instance property of HTMLElement Read only: true htmlElement.namespaceURI : string Kind: instance property of HTMLElement Read only: true htmlElement.id : string Kind: instance property of HTMLElement htmlElement.className : string Kind: instance property of HTMLElement htmlElement.attributes : NamedNodeMap Kind: instance property of HTMLElement Read only: true htmlElement.style : Style Kind: instance property of HTMLElement Read only: true htmlElement.clientLeft : number Kind: instance property of HTMLElement Read only: true htmlElement.clientTop : number Kind: instance property of HTMLElement Read only: true htmlElement.clientWidth : number Kind: instance property of HTMLElement Read only: true htmlElement.clientHeight : number Kind: instance property of HTMLElement Read only: true htmlElement.offsetLeft : number Kind: instance property of HTMLElement Read only: true htmlElement.offsetTop : number Kind: instance property of HTMLElement Read only: true htmlElement.offsetWidth : number Kind: instance property of HTMLElement Read only: true htmlElement.offsetHeight : number Kind: instance property of HTMLElement Read only: true htmlElement.scrollLeft : number Kind: instance property of HTMLElement htmlElement.scrollTop : number Kind: instance property of HTMLElement htmlElement.scrollWidth : number Kind: instance property of HTMLElement Read only: true htmlElement.scrollHeight : number Kind: instance property of HTMLElement Read only: true htmlElement.disabled : boolean Kind: instance property of HTMLElement htmlElement.innerHTML : string Kind: instance property of HTMLElement htmlElement.outerHTML : string Kind: instance property of HTMLElement htmlElement.contentEditable Kind: instance property of HTMLElement Read only: true htmlElement.isConnected : boolean Kind: instance property of HTMLElement Read only: true htmlElement.parentNode : Node Kind: instance property of HTMLElement Read only: true htmlElement.firstChild : Node Kind: instance property of HTMLElement Read only: true htmlElement.lastChild : Node Kind: instance property of HTMLElement Read only: true htmlElement.previousSibling : Node Kind: instance property of HTMLElement Read only: true htmlElement.nextSibling : Node Kind: instance property of HTMLElement Read only: true htmlElement.firstElementChild : Node Kind: instance property of HTMLElement Read only: true htmlElement.lastElementChild : Node Kind: instance property of HTMLElement Read only: true htmlElement.previousElementSibling : Node Kind: instance property of HTMLElement Read only: true htmlElement.nextElementSibling : Node Kind: instance property of HTMLElement Read only: true htmlElement.textContent : string Kind: instance property of HTMLElement htmlElement.childNodes : NodeList Kind: instance property of HTMLElement Read only: true htmlElement.ownerDocument Kind: instance property of HTMLElement Read only: true htmlElement.offsetParent Kind: instance property of HTMLElement Read only: true htmlElement.scrollIntoView() Kind: instance method of HTMLElement htmlElement.scrollIntoViewIfNeeded() Kind: instance method of HTMLElement htmlElement.focus() Kind: instance method of HTMLElement htmlElement.blur() Kind: instance method of HTMLElement htmlElement.getAttribute(name) ⇒ string Kind: instance method of HTMLElement Param Type name string htmlElement.setAttribute(name, value) Kind: instance method of HTMLElement Param Type name string value string htmlElement.removeAttribute(name) Kind: instance method of HTMLElement Param Type name string htmlElement.hasAttribute(name) ⇒ boolean Kind: instance method of HTMLElement Param Type name string htmlElement.getAttributeNode(name) ⇒ * Kind: instance method of HTMLElement Param Type name string htmlElement.setAttributeNode(newAttr) Kind: instance method of HTMLElement Param Type newAttr * htmlElement.removeAttributeNode(oldAttr) Kind: instance method of HTMLElement Param Type oldAttr * htmlElement.getElementsByClassName(name) ⇒ NodeList Kind: instance method of HTMLElement Param Type name string htmlElement.getElementsByTagName(name) ⇒ NodeList Kind: instance method of HTMLElement Param Type name string htmlElement.querySelector(selector) ⇒ Element Kind: instance method of HTMLElement Param Type selector string htmlElement.querySelectorAll(selector) ⇒ NodeList Kind: instance method of HTMLElement Param Type selector string htmlElement.getBoundingClientRect() ⇒ * Kind: instance method of HTMLElement htmlElement.insertAdjacentHTML(position, value) Kind: instance method of HTMLElement Param Type position value string htmlElement.insertAdjacentElement(position, node) ⇒ Node Kind: instance method of HTMLElement Param Type position * node * htmlElement.insertAdjacentText(position, text) Kind: instance method of HTMLElement Param Type position * text * htmlElement.hasChildNodes() ⇒ boolean Kind: instance method of HTMLElement htmlElement.cloneNode(deep) ⇒ Node Kind: instance method of HTMLElement Param Type deep boolean htmlElement.appendChild(child) ⇒ Node Kind: instance method of HTMLElement Param Type child Node htmlElement.insertBefore(child, before) ⇒ Node Kind: instance method of HTMLElement Param Type child Node before Node htmlElement.replaceChild(newChild, oldChild) ⇒ Node Kind: instance method of HTMLElement Param Type newChild Node oldChild Node htmlElement.removeChild(child) ⇒ Node Kind: instance method of HTMLElement Param Type child Node htmlElement.remove() Kind: instance method of HTMLElement htmlElement.before(...nodes) Kind: instance method of HTMLElement Param Type ...nodes Array. htmlElement.after(...nodes) Kind: instance method of HTMLElement Param Type ...nodes Array. htmlElement.replaceWith(...nodes) Kind: instance method of HTMLElement Param Type ...nodes Array. htmlElement.addEventListener(eventName, callback, [capture]) Kind: instance method of HTMLElement Param Type Default eventName * callback * [capture] boolean false htmlElement.removeEventListener(eventName, callback, [capture]) Kind: instance method of HTMLElement Param Type Default eventName * callback * [capture] boolean false htmlElement.dispatchEvent(event) Kind: instance method of HTMLElement Param Type event * "},"reference/uxp/class/HTMLFormElement.html":{"url":"reference/uxp/class/HTMLFormElement.html","title":"HTMLFormElement","keywords":"","body":" HTMLFormElement ⇐ HTMLElement Kind: global class Extends: HTMLElement Access: public See: https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement HTMLFormElement ⇐ HTMLElement .elements .nodeName : string .localName : string .tagName : string .nodeType : number .namespaceURI : string .id : string .className : string .attributes : NamedNodeMap .style : Style .clientLeft : number .clientTop : number .clientWidth : number .clientHeight : number .offsetLeft : number .offsetTop : number .offsetWidth : number .offsetHeight : number .scrollLeft : number .scrollTop : number .scrollWidth : number .scrollHeight : number .disabled : boolean .innerHTML : string .outerHTML : string .contentEditable .isConnected : boolean .parentNode : Node .firstChild : Node .lastChild : Node .previousSibling : Node .nextSibling : Node .firstElementChild : Node .lastElementChild : Node .previousElementSibling : Node .nextElementSibling : Node .textContent : string .childNodes : NodeList .ownerDocument .offsetParent .scrollIntoView() .scrollIntoViewIfNeeded() .focus() .blur() .getAttribute(name) ⇒ string .setAttribute(name, value) .removeAttribute(name) .hasAttribute(name) ⇒ boolean .getAttributeNode(name) ⇒ * .setAttributeNode(newAttr) .removeAttributeNode(oldAttr) .getElementsByClassName(name) ⇒ NodeList .getElementsByTagName(name) ⇒ NodeList .querySelector(selector) ⇒ Element .querySelectorAll(selector) ⇒ NodeList .getBoundingClientRect() ⇒ * .insertAdjacentHTML(position, value) .insertAdjacentElement(position, node) ⇒ Node .insertAdjacentText(position, text) .hasChildNodes() ⇒ boolean .cloneNode(deep) ⇒ Node .appendChild(child) ⇒ Node .insertBefore(child, before) ⇒ Node .replaceChild(newChild, oldChild) ⇒ Node .removeChild(child) ⇒ Node .remove() .before(...nodes) .after(...nodes) .replaceWith(...nodes) .addEventListener(eventName, callback, [capture]) .removeEventListener(eventName, callback, [capture]) .dispatchEvent(event) htmlFormElement.elements Returns an HTMLCollection containing all of the form controls. It should technicaly be an HTMLFormControlsCollection which subclasses HTMLCollection. TODO: Implement HTMLFormControlsCollection and use it here. Kind: instance property of HTMLFormElement See: https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/elements htmlFormElement.nodeName : string Kind: instance property of HTMLFormElement Read only: true htmlFormElement.localName : string Kind: instance property of HTMLFormElement Read only: true htmlFormElement.tagName : string Kind: instance property of HTMLFormElement Read only: true htmlFormElement.nodeType : number Kind: instance property of HTMLFormElement Read only: true htmlFormElement.namespaceURI : string Kind: instance property of HTMLFormElement Read only: true htmlFormElement.id : string Kind: instance property of HTMLFormElement htmlFormElement.className : string Kind: instance property of HTMLFormElement htmlFormElement.attributes : NamedNodeMap Kind: instance property of HTMLFormElement Read only: true htmlFormElement.style : Style Kind: instance property of HTMLFormElement Read only: true htmlFormElement.clientLeft : number Kind: instance property of HTMLFormElement Read only: true htmlFormElement.clientTop : number Kind: instance property of HTMLFormElement Read only: true htmlFormElement.clientWidth : number Kind: instance property of HTMLFormElement Read only: true htmlFormElement.clientHeight : number Kind: instance property of HTMLFormElement Read only: true htmlFormElement.offsetLeft : number Kind: instance property of HTMLFormElement Read only: true htmlFormElement.offsetTop : number Kind: instance property of HTMLFormElement Read only: true htmlFormElement.offsetWidth : number Kind: instance property of HTMLFormElement Read only: true htmlFormElement.offsetHeight : number Kind: instance property of HTMLFormElement Read only: true htmlFormElement.scrollLeft : number Kind: instance property of HTMLFormElement htmlFormElement.scrollTop : number Kind: instance property of HTMLFormElement htmlFormElement.scrollWidth : number Kind: instance property of HTMLFormElement Read only: true htmlFormElement.scrollHeight : number Kind: instance property of HTMLFormElement Read only: true htmlFormElement.disabled : boolean Kind: instance property of HTMLFormElement htmlFormElement.innerHTML : string Kind: instance property of HTMLFormElement htmlFormElement.outerHTML : string Kind: instance property of HTMLFormElement htmlFormElement.contentEditable Kind: instance property of HTMLFormElement Read only: true htmlFormElement.isConnected : boolean Kind: instance property of HTMLFormElement Read only: true htmlFormElement.parentNode : Node Kind: instance property of HTMLFormElement Read only: true htmlFormElement.firstChild : Node Kind: instance property of HTMLFormElement Read only: true htmlFormElement.lastChild : Node Kind: instance property of HTMLFormElement Read only: true htmlFormElement.previousSibling : Node Kind: instance property of HTMLFormElement Read only: true htmlFormElement.nextSibling : Node Kind: instance property of HTMLFormElement Read only: true htmlFormElement.firstElementChild : Node Kind: instance property of HTMLFormElement Read only: true htmlFormElement.lastElementChild : Node Kind: instance property of HTMLFormElement Read only: true htmlFormElement.previousElementSibling : Node Kind: instance property of HTMLFormElement Read only: true htmlFormElement.nextElementSibling : Node Kind: instance property of HTMLFormElement Read only: true htmlFormElement.textContent : string Kind: instance property of HTMLFormElement htmlFormElement.childNodes : NodeList Kind: instance property of HTMLFormElement Read only: true htmlFormElement.ownerDocument Kind: instance property of HTMLFormElement Read only: true htmlFormElement.offsetParent Kind: instance property of HTMLFormElement Read only: true htmlFormElement.scrollIntoView() Kind: instance method of HTMLFormElement htmlFormElement.scrollIntoViewIfNeeded() Kind: instance method of HTMLFormElement htmlFormElement.focus() Kind: instance method of HTMLFormElement htmlFormElement.blur() Kind: instance method of HTMLFormElement htmlFormElement.getAttribute(name) ⇒ string Kind: instance method of HTMLFormElement Param Type name string htmlFormElement.setAttribute(name, value) Kind: instance method of HTMLFormElement Param Type name string value string htmlFormElement.removeAttribute(name) Kind: instance method of HTMLFormElement Param Type name string htmlFormElement.hasAttribute(name) ⇒ boolean Kind: instance method of HTMLFormElement Param Type name string htmlFormElement.getAttributeNode(name) ⇒ * Kind: instance method of HTMLFormElement Param Type name string htmlFormElement.setAttributeNode(newAttr) Kind: instance method of HTMLFormElement Param Type newAttr * htmlFormElement.removeAttributeNode(oldAttr) Kind: instance method of HTMLFormElement Param Type oldAttr * htmlFormElement.getElementsByClassName(name) ⇒ NodeList Kind: instance method of HTMLFormElement Param Type name string htmlFormElement.getElementsByTagName(name) ⇒ NodeList Kind: instance method of HTMLFormElement Param Type name string htmlFormElement.querySelector(selector) ⇒ Element Kind: instance method of HTMLFormElement Param Type selector string htmlFormElement.querySelectorAll(selector) ⇒ NodeList Kind: instance method of HTMLFormElement Param Type selector string htmlFormElement.getBoundingClientRect() ⇒ * Kind: instance method of HTMLFormElement htmlFormElement.insertAdjacentHTML(position, value) Kind: instance method of HTMLFormElement Param Type position value string htmlFormElement.insertAdjacentElement(position, node) ⇒ Node Kind: instance method of HTMLFormElement Param Type position * node * htmlFormElement.insertAdjacentText(position, text) Kind: instance method of HTMLFormElement Param Type position * text * htmlFormElement.hasChildNodes() ⇒ boolean Kind: instance method of HTMLFormElement htmlFormElement.cloneNode(deep) ⇒ Node Kind: instance method of HTMLFormElement Param Type deep boolean htmlFormElement.appendChild(child) ⇒ Node Kind: instance method of HTMLFormElement Param Type child Node htmlFormElement.insertBefore(child, before) ⇒ Node Kind: instance method of HTMLFormElement Param Type child Node before Node htmlFormElement.replaceChild(newChild, oldChild) ⇒ Node Kind: instance method of HTMLFormElement Param Type newChild Node oldChild Node htmlFormElement.removeChild(child) ⇒ Node Kind: instance method of HTMLFormElement Param Type child Node htmlFormElement.remove() Kind: instance method of HTMLFormElement htmlFormElement.before(...nodes) Kind: instance method of HTMLFormElement Param Type ...nodes Array. htmlFormElement.after(...nodes) Kind: instance method of HTMLFormElement Param Type ...nodes Array. htmlFormElement.replaceWith(...nodes) Kind: instance method of HTMLFormElement Param Type ...nodes Array. htmlFormElement.addEventListener(eventName, callback, [capture]) Kind: instance method of HTMLFormElement Param Type Default eventName * callback * [capture] boolean false htmlFormElement.removeEventListener(eventName, callback, [capture]) Kind: instance method of HTMLFormElement Param Type Default eventName * callback * [capture] boolean false htmlFormElement.dispatchEvent(event) Kind: instance method of HTMLFormElement Param Type event * "},"reference/uxp/class/HTMLHeadElement.html":{"url":"reference/uxp/class/HTMLHeadElement.html","title":"HTMLHeadElement","keywords":"","body":" HTMLHeadElement ⇐ HTMLElement Kind: global class Extends: HTMLElement Access: public See: https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement HTMLHeadElement ⇐ HTMLElement new HTMLHeadElement(document, nodeName, namespaceURI) .nodeName : string .localName : string .tagName : string .nodeType : number .namespaceURI : string .id : string .className : string .attributes : NamedNodeMap .style : Style .clientLeft : number .clientTop : number .clientWidth : number .clientHeight : number .offsetLeft : number .offsetTop : number .offsetWidth : number .offsetHeight : number .scrollLeft : number .scrollTop : number .scrollWidth : number .scrollHeight : number .disabled : boolean .innerHTML : string .outerHTML : string .contentEditable .isConnected : boolean .parentNode : Node .firstChild : Node .lastChild : Node .previousSibling : Node .nextSibling : Node .firstElementChild : Node .lastElementChild : Node .previousElementSibling : Node .nextElementSibling : Node .textContent : string .childNodes : NodeList .ownerDocument .offsetParent .scrollIntoView() .scrollIntoViewIfNeeded() .focus() .blur() .getAttribute(name) ⇒ string .setAttribute(name, value) .removeAttribute(name) .hasAttribute(name) ⇒ boolean .getAttributeNode(name) ⇒ * .setAttributeNode(newAttr) .removeAttributeNode(oldAttr) .getElementsByClassName(name) ⇒ NodeList .getElementsByTagName(name) ⇒ NodeList .querySelector(selector) ⇒ Element .querySelectorAll(selector) ⇒ NodeList .getBoundingClientRect() ⇒ * .insertAdjacentHTML(position, value) .insertAdjacentElement(position, node) ⇒ Node .insertAdjacentText(position, text) .hasChildNodes() ⇒ boolean .cloneNode(deep) ⇒ Node .appendChild(child) ⇒ Node .insertBefore(child, before) ⇒ Node .replaceChild(newChild, oldChild) ⇒ Node .removeChild(child) ⇒ Node .remove() .before(...nodes) .after(...nodes) .replaceWith(...nodes) .addEventListener(eventName, callback, [capture]) .removeEventListener(eventName, callback, [capture]) .dispatchEvent(event) new HTMLHeadElement(document, nodeName, namespaceURI) Creates an instance of HTMLHeadElement. Param Type document * nodeName * namespaceURI * htmlHeadElement.nodeName : string Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.localName : string Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.tagName : string Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.nodeType : number Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.namespaceURI : string Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.id : string Kind: instance property of HTMLHeadElement htmlHeadElement.className : string Kind: instance property of HTMLHeadElement htmlHeadElement.attributes : NamedNodeMap Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.style : Style Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.clientLeft : number Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.clientTop : number Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.clientWidth : number Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.clientHeight : number Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.offsetLeft : number Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.offsetTop : number Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.offsetWidth : number Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.offsetHeight : number Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.scrollLeft : number Kind: instance property of HTMLHeadElement htmlHeadElement.scrollTop : number Kind: instance property of HTMLHeadElement htmlHeadElement.scrollWidth : number Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.scrollHeight : number Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.disabled : boolean Kind: instance property of HTMLHeadElement htmlHeadElement.innerHTML : string Kind: instance property of HTMLHeadElement htmlHeadElement.outerHTML : string Kind: instance property of HTMLHeadElement htmlHeadElement.contentEditable Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.isConnected : boolean Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.parentNode : Node Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.firstChild : Node Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.lastChild : Node Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.previousSibling : Node Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.nextSibling : Node Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.firstElementChild : Node Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.lastElementChild : Node Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.previousElementSibling : Node Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.nextElementSibling : Node Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.textContent : string Kind: instance property of HTMLHeadElement htmlHeadElement.childNodes : NodeList Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.ownerDocument Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.offsetParent Kind: instance property of HTMLHeadElement Read only: true htmlHeadElement.scrollIntoView() Kind: instance method of HTMLHeadElement htmlHeadElement.scrollIntoViewIfNeeded() Kind: instance method of HTMLHeadElement htmlHeadElement.focus() Kind: instance method of HTMLHeadElement htmlHeadElement.blur() Kind: instance method of HTMLHeadElement htmlHeadElement.getAttribute(name) ⇒ string Kind: instance method of HTMLHeadElement Param Type name string htmlHeadElement.setAttribute(name, value) Kind: instance method of HTMLHeadElement Param Type name string value string htmlHeadElement.removeAttribute(name) Kind: instance method of HTMLHeadElement Param Type name string htmlHeadElement.hasAttribute(name) ⇒ boolean Kind: instance method of HTMLHeadElement Param Type name string htmlHeadElement.getAttributeNode(name) ⇒ * Kind: instance method of HTMLHeadElement Param Type name string htmlHeadElement.setAttributeNode(newAttr) Kind: instance method of HTMLHeadElement Param Type newAttr * htmlHeadElement.removeAttributeNode(oldAttr) Kind: instance method of HTMLHeadElement Param Type oldAttr * htmlHeadElement.getElementsByClassName(name) ⇒ NodeList Kind: instance method of HTMLHeadElement Param Type name string htmlHeadElement.getElementsByTagName(name) ⇒ NodeList Kind: instance method of HTMLHeadElement Param Type name string htmlHeadElement.querySelector(selector) ⇒ Element Kind: instance method of HTMLHeadElement Param Type selector string htmlHeadElement.querySelectorAll(selector) ⇒ NodeList Kind: instance method of HTMLHeadElement Param Type selector string htmlHeadElement.getBoundingClientRect() ⇒ * Kind: instance method of HTMLHeadElement htmlHeadElement.insertAdjacentHTML(position, value) Kind: instance method of HTMLHeadElement Param Type position value string htmlHeadElement.insertAdjacentElement(position, node) ⇒ Node Kind: instance method of HTMLHeadElement Param Type position * node * htmlHeadElement.insertAdjacentText(position, text) Kind: instance method of HTMLHeadElement Param Type position * text * htmlHeadElement.hasChildNodes() ⇒ boolean Kind: instance method of HTMLHeadElement htmlHeadElement.cloneNode(deep) ⇒ Node Kind: instance method of HTMLHeadElement Param Type deep boolean htmlHeadElement.appendChild(child) ⇒ Node Kind: instance method of HTMLHeadElement Param Type child Node htmlHeadElement.insertBefore(child, before) ⇒ Node Kind: instance method of HTMLHeadElement Param Type child Node before Node htmlHeadElement.replaceChild(newChild, oldChild) ⇒ Node Kind: instance method of HTMLHeadElement Param Type newChild Node oldChild Node htmlHeadElement.removeChild(child) ⇒ Node Kind: instance method of HTMLHeadElement Param Type child Node htmlHeadElement.remove() Kind: instance method of HTMLHeadElement htmlHeadElement.before(...nodes) Kind: instance method of HTMLHeadElement Param Type ...nodes Array. htmlHeadElement.after(...nodes) Kind: instance method of HTMLHeadElement Param Type ...nodes Array. htmlHeadElement.replaceWith(...nodes) Kind: instance method of HTMLHeadElement Param Type ...nodes Array. htmlHeadElement.addEventListener(eventName, callback, [capture]) Kind: instance method of HTMLHeadElement Param Type Default eventName * callback * [capture] boolean false htmlHeadElement.removeEventListener(eventName, callback, [capture]) Kind: instance method of HTMLHeadElement Param Type Default eventName * callback * [capture] boolean false htmlHeadElement.dispatchEvent(event) Kind: instance method of HTMLHeadElement Param Type event * "},"reference/uxp/class/HTMLHtmlElement.html":{"url":"reference/uxp/class/HTMLHtmlElement.html","title":"HTMLHtmlElement","keywords":"","body":" HTMLHtmlElement ⇐ HTMLElement Kind: global class Extends: HTMLElement Access: public See: https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement HTMLHtmlElement ⇐ HTMLElement new HTMLHtmlElement(document, nodeName, namespaceURI) .nodeName : string .localName : string .tagName : string .nodeType : number .namespaceURI : string .id : string .className : string .attributes : NamedNodeMap .style : Style .clientLeft : number .clientTop : number .clientWidth : number .clientHeight : number .offsetLeft : number .offsetTop : number .offsetWidth : number .offsetHeight : number .scrollLeft : number .scrollTop : number .scrollWidth : number .scrollHeight : number .disabled : boolean .innerHTML : string .outerHTML : string .contentEditable .isConnected : boolean .parentNode : Node .firstChild : Node .lastChild : Node .previousSibling : Node .nextSibling : Node .firstElementChild : Node .lastElementChild : Node .previousElementSibling : Node .nextElementSibling : Node .textContent : string .childNodes : NodeList .ownerDocument .offsetParent .scrollIntoView() .scrollIntoViewIfNeeded() .focus() .blur() .getAttribute(name) ⇒ string .setAttribute(name, value) .removeAttribute(name) .hasAttribute(name) ⇒ boolean .getAttributeNode(name) ⇒ * .setAttributeNode(newAttr) .removeAttributeNode(oldAttr) .getElementsByClassName(name) ⇒ NodeList .getElementsByTagName(name) ⇒ NodeList .querySelector(selector) ⇒ Element .querySelectorAll(selector) ⇒ NodeList .getBoundingClientRect() ⇒ * .insertAdjacentHTML(position, value) .insertAdjacentElement(position, node) ⇒ Node .insertAdjacentText(position, text) .hasChildNodes() ⇒ boolean .cloneNode(deep) ⇒ Node .appendChild(child) ⇒ Node .insertBefore(child, before) ⇒ Node .replaceChild(newChild, oldChild) ⇒ Node .removeChild(child) ⇒ Node .remove() .before(...nodes) .after(...nodes) .replaceWith(...nodes) .addEventListener(eventName, callback, [capture]) .removeEventListener(eventName, callback, [capture]) .dispatchEvent(event) new HTMLHtmlElement(document, nodeName, namespaceURI) Creates an instance of HTMLHtmlElement. Param Type document * nodeName * namespaceURI * htmlHtmlElement.nodeName : string Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.localName : string Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.tagName : string Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.nodeType : number Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.namespaceURI : string Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.id : string Kind: instance property of HTMLHtmlElement htmlHtmlElement.className : string Kind: instance property of HTMLHtmlElement htmlHtmlElement.attributes : NamedNodeMap Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.style : Style Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.clientLeft : number Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.clientTop : number Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.clientWidth : number Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.clientHeight : number Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.offsetLeft : number Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.offsetTop : number Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.offsetWidth : number Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.offsetHeight : number Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.scrollLeft : number Kind: instance property of HTMLHtmlElement htmlHtmlElement.scrollTop : number Kind: instance property of HTMLHtmlElement htmlHtmlElement.scrollWidth : number Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.scrollHeight : number Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.disabled : boolean Kind: instance property of HTMLHtmlElement htmlHtmlElement.innerHTML : string Kind: instance property of HTMLHtmlElement htmlHtmlElement.outerHTML : string Kind: instance property of HTMLHtmlElement htmlHtmlElement.contentEditable Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.isConnected : boolean Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.parentNode : Node Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.firstChild : Node Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.lastChild : Node Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.previousSibling : Node Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.nextSibling : Node Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.firstElementChild : Node Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.lastElementChild : Node Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.previousElementSibling : Node Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.nextElementSibling : Node Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.textContent : string Kind: instance property of HTMLHtmlElement htmlHtmlElement.childNodes : NodeList Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.ownerDocument Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.offsetParent Kind: instance property of HTMLHtmlElement Read only: true htmlHtmlElement.scrollIntoView() Kind: instance method of HTMLHtmlElement htmlHtmlElement.scrollIntoViewIfNeeded() Kind: instance method of HTMLHtmlElement htmlHtmlElement.focus() Kind: instance method of HTMLHtmlElement htmlHtmlElement.blur() Kind: instance method of HTMLHtmlElement htmlHtmlElement.getAttribute(name) ⇒ string Kind: instance method of HTMLHtmlElement Param Type name string htmlHtmlElement.setAttribute(name, value) Kind: instance method of HTMLHtmlElement Param Type name string value string htmlHtmlElement.removeAttribute(name) Kind: instance method of HTMLHtmlElement Param Type name string htmlHtmlElement.hasAttribute(name) ⇒ boolean Kind: instance method of HTMLHtmlElement Param Type name string htmlHtmlElement.getAttributeNode(name) ⇒ * Kind: instance method of HTMLHtmlElement Param Type name string htmlHtmlElement.setAttributeNode(newAttr) Kind: instance method of HTMLHtmlElement Param Type newAttr * htmlHtmlElement.removeAttributeNode(oldAttr) Kind: instance method of HTMLHtmlElement Param Type oldAttr * htmlHtmlElement.getElementsByClassName(name) ⇒ NodeList Kind: instance method of HTMLHtmlElement Param Type name string htmlHtmlElement.getElementsByTagName(name) ⇒ NodeList Kind: instance method of HTMLHtmlElement Param Type name string htmlHtmlElement.querySelector(selector) ⇒ Element Kind: instance method of HTMLHtmlElement Param Type selector string htmlHtmlElement.querySelectorAll(selector) ⇒ NodeList Kind: instance method of HTMLHtmlElement Param Type selector string htmlHtmlElement.getBoundingClientRect() ⇒ * Kind: instance method of HTMLHtmlElement htmlHtmlElement.insertAdjacentHTML(position, value) Kind: instance method of HTMLHtmlElement Param Type position value string htmlHtmlElement.insertAdjacentElement(position, node) ⇒ Node Kind: instance method of HTMLHtmlElement Param Type position * node * htmlHtmlElement.insertAdjacentText(position, text) Kind: instance method of HTMLHtmlElement Param Type position * text * htmlHtmlElement.hasChildNodes() ⇒ boolean Kind: instance method of HTMLHtmlElement htmlHtmlElement.cloneNode(deep) ⇒ Node Kind: instance method of HTMLHtmlElement Param Type deep boolean htmlHtmlElement.appendChild(child) ⇒ Node Kind: instance method of HTMLHtmlElement Param Type child Node htmlHtmlElement.insertBefore(child, before) ⇒ Node Kind: instance method of HTMLHtmlElement Param Type child Node before Node htmlHtmlElement.replaceChild(newChild, oldChild) ⇒ Node Kind: instance method of HTMLHtmlElement Param Type newChild Node oldChild Node htmlHtmlElement.removeChild(child) ⇒ Node Kind: instance method of HTMLHtmlElement Param Type child Node htmlHtmlElement.remove() Kind: instance method of HTMLHtmlElement htmlHtmlElement.before(...nodes) Kind: instance method of HTMLHtmlElement Param Type ...nodes Array. htmlHtmlElement.after(...nodes) Kind: instance method of HTMLHtmlElement Param Type ...nodes Array. htmlHtmlElement.replaceWith(...nodes) Kind: instance method of HTMLHtmlElement Param Type ...nodes Array. htmlHtmlElement.addEventListener(eventName, callback, [capture]) Kind: instance method of HTMLHtmlElement Param Type Default eventName * callback * [capture] boolean false htmlHtmlElement.removeEventListener(eventName, callback, [capture]) Kind: instance method of HTMLHtmlElement Param Type Default eventName * callback * [capture] boolean false htmlHtmlElement.dispatchEvent(event) Kind: instance method of HTMLHtmlElement Param Type event * "},"reference/uxp/class/HTMLImageElement.html":{"url":"reference/uxp/class/HTMLImageElement.html","title":"HTMLImageElement","keywords":"","body":" HTMLImageElement ⇐ HTMLElement Kind: global class Extends: HTMLElement Access: public See: https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement HTMLImageElement ⇐ HTMLElement new HTMLImageElement(document, nodeName, namespaceURI) .src : string or File .nodeName : string .localName : string .tagName : string .nodeType : number .namespaceURI : string .id : string .className : string .attributes : NamedNodeMap .style : Style .clientLeft : number .clientTop : number .clientWidth : number .clientHeight : number .offsetLeft : number .offsetTop : number .offsetWidth : number .offsetHeight : number .scrollLeft : number .scrollTop : number .scrollWidth : number .scrollHeight : number .disabled : boolean .innerHTML : string .outerHTML : string .contentEditable .isConnected : boolean .parentNode : Node .firstChild : Node .lastChild : Node .previousSibling : Node .nextSibling : Node .firstElementChild : Node .lastElementChild : Node .previousElementSibling : Node .nextElementSibling : Node .textContent : string .childNodes : NodeList .ownerDocument .offsetParent .scrollIntoView() .scrollIntoViewIfNeeded() .focus() .blur() .getAttribute(name) ⇒ string .setAttribute(name, value) .removeAttribute(name) .hasAttribute(name) ⇒ boolean .getAttributeNode(name) ⇒ * .setAttributeNode(newAttr) .removeAttributeNode(oldAttr) .getElementsByClassName(name) ⇒ NodeList .getElementsByTagName(name) ⇒ NodeList .querySelector(selector) ⇒ Element .querySelectorAll(selector) ⇒ NodeList .getBoundingClientRect() ⇒ * .insertAdjacentHTML(position, value) .insertAdjacentElement(position, node) ⇒ Node .insertAdjacentText(position, text) .hasChildNodes() ⇒ boolean .cloneNode(deep) ⇒ Node .appendChild(child) ⇒ Node .insertBefore(child, before) ⇒ Node .replaceChild(newChild, oldChild) ⇒ Node .removeChild(child) ⇒ Node .remove() .before(...nodes) .after(...nodes) .replaceWith(...nodes) .addEventListener(eventName, callback, [capture]) .removeEventListener(eventName, callback, [capture]) .dispatchEvent(event) new HTMLImageElement(document, nodeName, namespaceURI) Creates an instance of HTMLImageElement. Param Type document * nodeName * namespaceURI * htmlImageElement.src : string or File The source of the image Kind: instance property of HTMLImageElement htmlImageElement.nodeName : string Kind: instance property of HTMLImageElement Read only: true htmlImageElement.localName : string Kind: instance property of HTMLImageElement Read only: true htmlImageElement.tagName : string Kind: instance property of HTMLImageElement Read only: true htmlImageElement.nodeType : number Kind: instance property of HTMLImageElement Read only: true htmlImageElement.namespaceURI : string Kind: instance property of HTMLImageElement Read only: true htmlImageElement.id : string Kind: instance property of HTMLImageElement htmlImageElement.className : string Kind: instance property of HTMLImageElement htmlImageElement.attributes : NamedNodeMap Kind: instance property of HTMLImageElement Read only: true htmlImageElement.style : Style Kind: instance property of HTMLImageElement Read only: true htmlImageElement.clientLeft : number Kind: instance property of HTMLImageElement Read only: true htmlImageElement.clientTop : number Kind: instance property of HTMLImageElement Read only: true htmlImageElement.clientWidth : number Kind: instance property of HTMLImageElement Read only: true htmlImageElement.clientHeight : number Kind: instance property of HTMLImageElement Read only: true htmlImageElement.offsetLeft : number Kind: instance property of HTMLImageElement Read only: true htmlImageElement.offsetTop : number Kind: instance property of HTMLImageElement Read only: true htmlImageElement.offsetWidth : number Kind: instance property of HTMLImageElement Read only: true htmlImageElement.offsetHeight : number Kind: instance property of HTMLImageElement Read only: true htmlImageElement.scrollLeft : number Kind: instance property of HTMLImageElement htmlImageElement.scrollTop : number Kind: instance property of HTMLImageElement htmlImageElement.scrollWidth : number Kind: instance property of HTMLImageElement Read only: true htmlImageElement.scrollHeight : number Kind: instance property of HTMLImageElement Read only: true htmlImageElement.disabled : boolean Kind: instance property of HTMLImageElement htmlImageElement.innerHTML : string Kind: instance property of HTMLImageElement htmlImageElement.outerHTML : string Kind: instance property of HTMLImageElement htmlImageElement.contentEditable Kind: instance property of HTMLImageElement Read only: true htmlImageElement.isConnected : boolean Kind: instance property of HTMLImageElement Read only: true htmlImageElement.parentNode : Node Kind: instance property of HTMLImageElement Read only: true htmlImageElement.firstChild : Node Kind: instance property of HTMLImageElement Read only: true htmlImageElement.lastChild : Node Kind: instance property of HTMLImageElement Read only: true htmlImageElement.previousSibling : Node Kind: instance property of HTMLImageElement Read only: true htmlImageElement.nextSibling : Node Kind: instance property of HTMLImageElement Read only: true htmlImageElement.firstElementChild : Node Kind: instance property of HTMLImageElement Read only: true htmlImageElement.lastElementChild : Node Kind: instance property of HTMLImageElement Read only: true htmlImageElement.previousElementSibling : Node Kind: instance property of HTMLImageElement Read only: true htmlImageElement.nextElementSibling : Node Kind: instance property of HTMLImageElement Read only: true htmlImageElement.textContent : string Kind: instance property of HTMLImageElement htmlImageElement.childNodes : NodeList Kind: instance property of HTMLImageElement Read only: true htmlImageElement.ownerDocument Kind: instance property of HTMLImageElement Read only: true htmlImageElement.offsetParent Kind: instance property of HTMLImageElement Read only: true htmlImageElement.scrollIntoView() Kind: instance method of HTMLImageElement htmlImageElement.scrollIntoViewIfNeeded() Kind: instance method of HTMLImageElement htmlImageElement.focus() Kind: instance method of HTMLImageElement htmlImageElement.blur() Kind: instance method of HTMLImageElement htmlImageElement.getAttribute(name) ⇒ string Kind: instance method of HTMLImageElement Param Type name string htmlImageElement.setAttribute(name, value) Kind: instance method of HTMLImageElement Param Type name string value string htmlImageElement.removeAttribute(name) Kind: instance method of HTMLImageElement Param Type name string htmlImageElement.hasAttribute(name) ⇒ boolean Kind: instance method of HTMLImageElement Param Type name string htmlImageElement.getAttributeNode(name) ⇒ * Kind: instance method of HTMLImageElement Param Type name string htmlImageElement.setAttributeNode(newAttr) Kind: instance method of HTMLImageElement Param Type newAttr * htmlImageElement.removeAttributeNode(oldAttr) Kind: instance method of HTMLImageElement Param Type oldAttr * htmlImageElement.getElementsByClassName(name) ⇒ NodeList Kind: instance method of HTMLImageElement Param Type name string htmlImageElement.getElementsByTagName(name) ⇒ NodeList Kind: instance method of HTMLImageElement Param Type name string htmlImageElement.querySelector(selector) ⇒ Element Kind: instance method of HTMLImageElement Param Type selector string htmlImageElement.querySelectorAll(selector) ⇒ NodeList Kind: instance method of HTMLImageElement Param Type selector string htmlImageElement.getBoundingClientRect() ⇒ * Kind: instance method of HTMLImageElement htmlImageElement.insertAdjacentHTML(position, value) Kind: instance method of HTMLImageElement Param Type position value string htmlImageElement.insertAdjacentElement(position, node) ⇒ Node Kind: instance method of HTMLImageElement Param Type position * node * htmlImageElement.insertAdjacentText(position, text) Kind: instance method of HTMLImageElement Param Type position * text * htmlImageElement.hasChildNodes() ⇒ boolean Kind: instance method of HTMLImageElement htmlImageElement.cloneNode(deep) ⇒ Node Kind: instance method of HTMLImageElement Param Type deep boolean htmlImageElement.appendChild(child) ⇒ Node Kind: instance method of HTMLImageElement Param Type child Node htmlImageElement.insertBefore(child, before) ⇒ Node Kind: instance method of HTMLImageElement Param Type child Node before Node htmlImageElement.replaceChild(newChild, oldChild) ⇒ Node Kind: instance method of HTMLImageElement Param Type newChild Node oldChild Node htmlImageElement.removeChild(child) ⇒ Node Kind: instance method of HTMLImageElement Param Type child Node htmlImageElement.remove() Kind: instance method of HTMLImageElement htmlImageElement.before(...nodes) Kind: instance method of HTMLImageElement Param Type ...nodes Array. htmlImageElement.after(...nodes) Kind: instance method of HTMLImageElement Param Type ...nodes Array. htmlImageElement.replaceWith(...nodes) Kind: instance method of HTMLImageElement Param Type ...nodes Array. htmlImageElement.addEventListener(eventName, callback, [capture]) Kind: instance method of HTMLImageElement Param Type Default eventName * callback * [capture] boolean false htmlImageElement.removeEventListener(eventName, callback, [capture]) Kind: instance method of HTMLImageElement Param Type Default eventName * callback * [capture] boolean false htmlImageElement.dispatchEvent(event) Kind: instance method of HTMLImageElement Param Type event * "},"reference/uxp/class/HTMLInputElement.html":{"url":"reference/uxp/class/HTMLInputElement.html","title":"HTMLInputElement","keywords":"","body":" HTMLInputElement ⇐ HTMLElement Kind: global class Extends: HTMLElement Access: public See: https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement HTMLInputElement ⇐ HTMLElement new HTMLInputElement(document, nodeName, namespaceURI) instance .value : * .defaultValue : string .checked : boolean .indeterminate : boolean .autofocus : boolean .name : string .type : string .placeholder : string .readOnly : boolean .min : string .max : string .step : string .uxpVariant : string .uxpQuiet : string .nodeName : string .localName : string .tagName : string .nodeType : number .namespaceURI : string .id : string .className : string .attributes : NamedNodeMap .style : Style .clientLeft : number .clientTop : number .clientWidth : number .clientHeight : number .offsetLeft : number .offsetTop : number .offsetWidth : number .offsetHeight : number .scrollLeft : number .scrollTop : number .scrollWidth : number .scrollHeight : number .disabled : boolean .innerHTML : string .outerHTML : string .contentEditable .isConnected : boolean .parentNode : Node .firstChild : Node .lastChild : Node .previousSibling : Node .nextSibling : Node .firstElementChild : Node .lastElementChild : Node .previousElementSibling : Node .nextElementSibling : Node .textContent : string .childNodes : NodeList .ownerDocument .offsetParent .scrollIntoView() .scrollIntoViewIfNeeded() .focus() .blur() .getAttribute(name) ⇒ string .setAttribute(name, value) .removeAttribute(name) .hasAttribute(name) ⇒ boolean .getAttributeNode(name) ⇒ * .setAttributeNode(newAttr) .removeAttributeNode(oldAttr) .getElementsByClassName(name) ⇒ NodeList .getElementsByTagName(name) ⇒ NodeList .querySelector(selector) ⇒ Element .querySelectorAll(selector) ⇒ NodeList .getBoundingClientRect() ⇒ * .insertAdjacentHTML(position, value) .insertAdjacentElement(position, node) ⇒ Node .insertAdjacentText(position, text) .hasChildNodes() ⇒ boolean .cloneNode(deep) ⇒ Node .appendChild(child) ⇒ Node .insertBefore(child, before) ⇒ Node .replaceChild(newChild, oldChild) ⇒ Node .removeChild(child) ⇒ Node .remove() .before(...nodes) .after(...nodes) .replaceWith(...nodes) .addEventListener(eventName, callback, [capture]) .removeEventListener(eventName, callback, [capture]) .dispatchEvent(event) static .HTMLTextAreaElement#defaultValue : string new HTMLInputElement(document, nodeName, namespaceURI) Creates an instance of HTMLInputElement. Param Type document * nodeName * namespaceURI * htmlInputElement.value : * Returns the value of the input element. Kind: instance property of HTMLInputElement htmlInputElement.defaultValue : string The defaultValue for the input element (if applicable to the input element's type) Kind: instance property of HTMLInputElement htmlInputElement.checked : boolean Indicates if the checkbox is checked. Kind: instance property of HTMLInputElement htmlInputElement.indeterminate : boolean Indicates if the element is indeterminate Kind: instance property of HTMLInputElement htmlInputElement.autofocus : boolean Indicates if the element will focus automatically when it is loaded in a form. Kind: instance property of HTMLInputElement htmlInputElement.name : string Specifies the name of this input element. Kind: instance property of HTMLInputElement htmlInputElement.type : string Specifies the type of input control Kind: instance property of HTMLInputElement htmlInputElement.placeholder : string The placeholder for the input element (if applicable to the input element's type) Kind: instance property of HTMLInputElement htmlInputElement.readOnly : boolean Determines if the element's content is read only. Kind: instance property of HTMLInputElement htmlInputElement.min : string Minimum value allowed (used for input type=\"range\") Kind: instance property of HTMLInputElement htmlInputElement.max : string Maximum value allowed (used for input type=\"range\") Kind: instance property of HTMLInputElement htmlInputElement.step : string the size of each movement of the slder control (used for input type=\"range\") Kind: instance property of HTMLInputElement htmlInputElement.uxpVariant : string Controls the type of native widget. Kind: instance property of HTMLInputElement htmlInputElement.uxpQuiet : string Determines if a control is rendered in \"quiet\" mode Kind: instance property of HTMLInputElement htmlInputElement.nodeName : string Kind: instance property of HTMLInputElement Read only: true htmlInputElement.localName : string Kind: instance property of HTMLInputElement Read only: true htmlInputElement.tagName : string Kind: instance property of HTMLInputElement Read only: true htmlInputElement.nodeType : number Kind: instance property of HTMLInputElement Read only: true htmlInputElement.namespaceURI : string Kind: instance property of HTMLInputElement Read only: true htmlInputElement.id : string Kind: instance property of HTMLInputElement htmlInputElement.className : string Kind: instance property of HTMLInputElement htmlInputElement.attributes : NamedNodeMap Kind: instance property of HTMLInputElement Read only: true htmlInputElement.style : Style Kind: instance property of HTMLInputElement Read only: true htmlInputElement.clientLeft : number Kind: instance property of HTMLInputElement Read only: true htmlInputElement.clientTop : number Kind: instance property of HTMLInputElement Read only: true htmlInputElement.clientWidth : number Kind: instance property of HTMLInputElement Read only: true htmlInputElement.clientHeight : number Kind: instance property of HTMLInputElement Read only: true htmlInputElement.offsetLeft : number Kind: instance property of HTMLInputElement Read only: true htmlInputElement.offsetTop : number Kind: instance property of HTMLInputElement Read only: true htmlInputElement.offsetWidth : number Kind: instance property of HTMLInputElement Read only: true htmlInputElement.offsetHeight : number Kind: instance property of HTMLInputElement Read only: true htmlInputElement.scrollLeft : number Kind: instance property of HTMLInputElement htmlInputElement.scrollTop : number Kind: instance property of HTMLInputElement htmlInputElement.scrollWidth : number Kind: instance property of HTMLInputElement Read only: true htmlInputElement.scrollHeight : number Kind: instance property of HTMLInputElement Read only: true htmlInputElement.disabled : boolean Kind: instance property of HTMLInputElement htmlInputElement.innerHTML : string Kind: instance property of HTMLInputElement htmlInputElement.outerHTML : string Kind: instance property of HTMLInputElement htmlInputElement.contentEditable Kind: instance property of HTMLInputElement Read only: true htmlInputElement.isConnected : boolean Kind: instance property of HTMLInputElement Read only: true htmlInputElement.parentNode : Node Kind: instance property of HTMLInputElement Read only: true htmlInputElement.firstChild : Node Kind: instance property of HTMLInputElement Read only: true htmlInputElement.lastChild : Node Kind: instance property of HTMLInputElement Read only: true htmlInputElement.previousSibling : Node Kind: instance property of HTMLInputElement Read only: true htmlInputElement.nextSibling : Node Kind: instance property of HTMLInputElement Read only: true htmlInputElement.firstElementChild : Node Kind: instance property of HTMLInputElement Read only: true htmlInputElement.lastElementChild : Node Kind: instance property of HTMLInputElement Read only: true htmlInputElement.previousElementSibling : Node Kind: instance property of HTMLInputElement Read only: true htmlInputElement.nextElementSibling : Node Kind: instance property of HTMLInputElement Read only: true htmlInputElement.textContent : string Kind: instance property of HTMLInputElement htmlInputElement.childNodes : NodeList Kind: instance property of HTMLInputElement Read only: true htmlInputElement.ownerDocument Kind: instance property of HTMLInputElement Read only: true htmlInputElement.offsetParent Kind: instance property of HTMLInputElement Read only: true htmlInputElement.scrollIntoView() Kind: instance method of HTMLInputElement htmlInputElement.scrollIntoViewIfNeeded() Kind: instance method of HTMLInputElement htmlInputElement.focus() Kind: instance method of HTMLInputElement htmlInputElement.blur() Kind: instance method of HTMLInputElement htmlInputElement.getAttribute(name) ⇒ string Kind: instance method of HTMLInputElement Param Type name string htmlInputElement.setAttribute(name, value) Kind: instance method of HTMLInputElement Param Type name string value string htmlInputElement.removeAttribute(name) Kind: instance method of HTMLInputElement Param Type name string htmlInputElement.hasAttribute(name) ⇒ boolean Kind: instance method of HTMLInputElement Param Type name string htmlInputElement.getAttributeNode(name) ⇒ * Kind: instance method of HTMLInputElement Param Type name string htmlInputElement.setAttributeNode(newAttr) Kind: instance method of HTMLInputElement Param Type newAttr * htmlInputElement.removeAttributeNode(oldAttr) Kind: instance method of HTMLInputElement Param Type oldAttr * htmlInputElement.getElementsByClassName(name) ⇒ NodeList Kind: instance method of HTMLInputElement Param Type name string htmlInputElement.getElementsByTagName(name) ⇒ NodeList Kind: instance method of HTMLInputElement Param Type name string htmlInputElement.querySelector(selector) ⇒ Element Kind: instance method of HTMLInputElement Param Type selector string htmlInputElement.querySelectorAll(selector) ⇒ NodeList Kind: instance method of HTMLInputElement Param Type selector string htmlInputElement.getBoundingClientRect() ⇒ * Kind: instance method of HTMLInputElement htmlInputElement.insertAdjacentHTML(position, value) Kind: instance method of HTMLInputElement Param Type position value string htmlInputElement.insertAdjacentElement(position, node) ⇒ Node Kind: instance method of HTMLInputElement Param Type position * node * htmlInputElement.insertAdjacentText(position, text) Kind: instance method of HTMLInputElement Param Type position * text * htmlInputElement.hasChildNodes() ⇒ boolean Kind: instance method of HTMLInputElement htmlInputElement.cloneNode(deep) ⇒ Node Kind: instance method of HTMLInputElement Param Type deep boolean htmlInputElement.appendChild(child) ⇒ Node Kind: instance method of HTMLInputElement Param Type child Node htmlInputElement.insertBefore(child, before) ⇒ Node Kind: instance method of HTMLInputElement Param Type child Node before Node htmlInputElement.replaceChild(newChild, oldChild) ⇒ Node Kind: instance method of HTMLInputElement Param Type newChild Node oldChild Node htmlInputElement.removeChild(child) ⇒ Node Kind: instance method of HTMLInputElement Param Type child Node htmlInputElement.remove() Kind: instance method of HTMLInputElement htmlInputElement.before(...nodes) Kind: instance method of HTMLInputElement Param Type ...nodes Array. htmlInputElement.after(...nodes) Kind: instance method of HTMLInputElement Param Type ...nodes Array. htmlInputElement.replaceWith(...nodes) Kind: instance method of HTMLInputElement Param Type ...nodes Array. htmlInputElement.addEventListener(eventName, callback, [capture]) Kind: instance method of HTMLInputElement Param Type Default eventName * callback * [capture] boolean false htmlInputElement.removeEventListener(eventName, callback, [capture]) Kind: instance method of HTMLInputElement Param Type Default eventName * callback * [capture] boolean false htmlInputElement.dispatchEvent(event) Kind: instance method of HTMLInputElement Param Type event * HTMLInputElement.HTMLTextAreaElement#defaultValue : string The defaultValue for the textarea element Kind: static property of HTMLInputElement "},"reference/uxp/class/HTMLLabelElement.html":{"url":"reference/uxp/class/HTMLLabelElement.html","title":"HTMLLabelElement","keywords":"","body":" HTMLLabelElement ⇐ HTMLElement Kind: global class Extends: HTMLElement Access: public See: https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement HTMLLabelElement ⇐ HTMLElement new HTMLLabelElement(document, nodeName, namespaceURI) .control : HTMLElement .nodeName : string .localName : string .tagName : string .nodeType : number .namespaceURI : string .id : string .className : string .attributes : NamedNodeMap .style : Style .clientLeft : number .clientTop : number .clientWidth : number .clientHeight : number .offsetLeft : number .offsetTop : number .offsetWidth : number .offsetHeight : number .scrollLeft : number .scrollTop : number .scrollWidth : number .scrollHeight : number .disabled : boolean .innerHTML : string .outerHTML : string .contentEditable .isConnected : boolean .parentNode : Node .firstChild : Node .lastChild : Node .previousSibling : Node .nextSibling : Node .firstElementChild : Node .lastElementChild : Node .previousElementSibling : Node .nextElementSibling : Node .textContent : string .childNodes : NodeList .ownerDocument .offsetParent .scrollIntoView() .scrollIntoViewIfNeeded() .focus() .blur() .getAttribute(name) ⇒ string .setAttribute(name, value) .removeAttribute(name) .hasAttribute(name) ⇒ boolean .getAttributeNode(name) ⇒ * .setAttributeNode(newAttr) .removeAttributeNode(oldAttr) .getElementsByClassName(name) ⇒ NodeList .getElementsByTagName(name) ⇒ NodeList .querySelector(selector) ⇒ Element .querySelectorAll(selector) ⇒ NodeList .getBoundingClientRect() ⇒ * .insertAdjacentHTML(position, value) .insertAdjacentElement(position, node) ⇒ Node .insertAdjacentText(position, text) .hasChildNodes() ⇒ boolean .cloneNode(deep) ⇒ Node .appendChild(child) ⇒ Node .insertBefore(child, before) ⇒ Node .replaceChild(newChild, oldChild) ⇒ Node .removeChild(child) ⇒ Node .remove() .before(...nodes) .after(...nodes) .replaceWith(...nodes) .addEventListener(eventName, callback, [capture]) .removeEventListener(eventName, callback, [capture]) .dispatchEvent(event) new HTMLLabelElement(document, nodeName, namespaceURI) Creates an instance of HTMLLabelElement. Param Type document * nodeName * namespaceURI * htmlLabelElement.control : HTMLElement Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.nodeName : string Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.localName : string Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.tagName : string Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.nodeType : number Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.namespaceURI : string Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.id : string Kind: instance property of HTMLLabelElement htmlLabelElement.className : string Kind: instance property of HTMLLabelElement htmlLabelElement.attributes : NamedNodeMap Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.style : Style Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.clientLeft : number Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.clientTop : number Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.clientWidth : number Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.clientHeight : number Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.offsetLeft : number Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.offsetTop : number Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.offsetWidth : number Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.offsetHeight : number Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.scrollLeft : number Kind: instance property of HTMLLabelElement htmlLabelElement.scrollTop : number Kind: instance property of HTMLLabelElement htmlLabelElement.scrollWidth : number Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.scrollHeight : number Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.disabled : boolean Kind: instance property of HTMLLabelElement htmlLabelElement.innerHTML : string Kind: instance property of HTMLLabelElement htmlLabelElement.outerHTML : string Kind: instance property of HTMLLabelElement htmlLabelElement.contentEditable Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.isConnected : boolean Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.parentNode : Node Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.firstChild : Node Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.lastChild : Node Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.previousSibling : Node Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.nextSibling : Node Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.firstElementChild : Node Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.lastElementChild : Node Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.previousElementSibling : Node Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.nextElementSibling : Node Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.textContent : string Kind: instance property of HTMLLabelElement htmlLabelElement.childNodes : NodeList Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.ownerDocument Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.offsetParent Kind: instance property of HTMLLabelElement Read only: true htmlLabelElement.scrollIntoView() Kind: instance method of HTMLLabelElement htmlLabelElement.scrollIntoViewIfNeeded() Kind: instance method of HTMLLabelElement htmlLabelElement.focus() Kind: instance method of HTMLLabelElement htmlLabelElement.blur() Kind: instance method of HTMLLabelElement htmlLabelElement.getAttribute(name) ⇒ string Kind: instance method of HTMLLabelElement Param Type name string htmlLabelElement.setAttribute(name, value) Kind: instance method of HTMLLabelElement Param Type name string value string htmlLabelElement.removeAttribute(name) Kind: instance method of HTMLLabelElement Param Type name string htmlLabelElement.hasAttribute(name) ⇒ boolean Kind: instance method of HTMLLabelElement Param Type name string htmlLabelElement.getAttributeNode(name) ⇒ * Kind: instance method of HTMLLabelElement Param Type name string htmlLabelElement.setAttributeNode(newAttr) Kind: instance method of HTMLLabelElement Param Type newAttr * htmlLabelElement.removeAttributeNode(oldAttr) Kind: instance method of HTMLLabelElement Param Type oldAttr * htmlLabelElement.getElementsByClassName(name) ⇒ NodeList Kind: instance method of HTMLLabelElement Param Type name string htmlLabelElement.getElementsByTagName(name) ⇒ NodeList Kind: instance method of HTMLLabelElement Param Type name string htmlLabelElement.querySelector(selector) ⇒ Element Kind: instance method of HTMLLabelElement Param Type selector string htmlLabelElement.querySelectorAll(selector) ⇒ NodeList Kind: instance method of HTMLLabelElement Param Type selector string htmlLabelElement.getBoundingClientRect() ⇒ * Kind: instance method of HTMLLabelElement htmlLabelElement.insertAdjacentHTML(position, value) Kind: instance method of HTMLLabelElement Param Type position value string htmlLabelElement.insertAdjacentElement(position, node) ⇒ Node Kind: instance method of HTMLLabelElement Param Type position * node * htmlLabelElement.insertAdjacentText(position, text) Kind: instance method of HTMLLabelElement Param Type position * text * htmlLabelElement.hasChildNodes() ⇒ boolean Kind: instance method of HTMLLabelElement htmlLabelElement.cloneNode(deep) ⇒ Node Kind: instance method of HTMLLabelElement Param Type deep boolean htmlLabelElement.appendChild(child) ⇒ Node Kind: instance method of HTMLLabelElement Param Type child Node htmlLabelElement.insertBefore(child, before) ⇒ Node Kind: instance method of HTMLLabelElement Param Type child Node before Node htmlLabelElement.replaceChild(newChild, oldChild) ⇒ Node Kind: instance method of HTMLLabelElement Param Type newChild Node oldChild Node htmlLabelElement.removeChild(child) ⇒ Node Kind: instance method of HTMLLabelElement Param Type child Node htmlLabelElement.remove() Kind: instance method of HTMLLabelElement htmlLabelElement.before(...nodes) Kind: instance method of HTMLLabelElement Param Type ...nodes Array. htmlLabelElement.after(...nodes) Kind: instance method of HTMLLabelElement Param Type ...nodes Array. htmlLabelElement.replaceWith(...nodes) Kind: instance method of HTMLLabelElement Param Type ...nodes Array. htmlLabelElement.addEventListener(eventName, callback, [capture]) Kind: instance method of HTMLLabelElement Param Type Default eventName * callback * [capture] boolean false htmlLabelElement.removeEventListener(eventName, callback, [capture]) Kind: instance method of HTMLLabelElement Param Type Default eventName * callback * [capture] boolean false htmlLabelElement.dispatchEvent(event) Kind: instance method of HTMLLabelElement Param Type event * "},"reference/uxp/class/HTMLLinkElement.html":{"url":"reference/uxp/class/HTMLLinkElement.html","title":"HTMLLinkElement","keywords":"","body":" HTMLLinkElement ⇐ HTMLElement Kind: global class Extends: HTMLElement Access: public See: https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement HTMLLinkElement ⇐ HTMLElement new HTMLLinkElement(document, nodeName, namespaceURI) .nodeName : string .localName : string .tagName : string .nodeType : number .namespaceURI : string .id : string .className : string .attributes : NamedNodeMap .style : Style .clientLeft : number .clientTop : number .clientWidth : number .clientHeight : number .offsetLeft : number .offsetTop : number .offsetWidth : number .offsetHeight : number .scrollLeft : number .scrollTop : number .scrollWidth : number .scrollHeight : number .disabled : boolean .innerHTML : string .outerHTML : string .contentEditable .isConnected : boolean .parentNode : Node .firstChild : Node .lastChild : Node .previousSibling : Node .nextSibling : Node .firstElementChild : Node .lastElementChild : Node .previousElementSibling : Node .nextElementSibling : Node .textContent : string .childNodes : NodeList .ownerDocument .offsetParent .scrollIntoView() .scrollIntoViewIfNeeded() .focus() .blur() .getAttribute(name) ⇒ string .setAttribute(name, value) .removeAttribute(name) .hasAttribute(name) ⇒ boolean .getAttributeNode(name) ⇒ * .setAttributeNode(newAttr) .removeAttributeNode(oldAttr) .getElementsByClassName(name) ⇒ NodeList .getElementsByTagName(name) ⇒ NodeList .querySelector(selector) ⇒ Element .querySelectorAll(selector) ⇒ NodeList .getBoundingClientRect() ⇒ * .insertAdjacentHTML(position, value) .insertAdjacentElement(position, node) ⇒ Node .insertAdjacentText(position, text) .hasChildNodes() ⇒ boolean .cloneNode(deep) ⇒ Node .appendChild(child) ⇒ Node .insertBefore(child, before) ⇒ Node .replaceChild(newChild, oldChild) ⇒ Node .removeChild(child) ⇒ Node .remove() .before(...nodes) .after(...nodes) .replaceWith(...nodes) .addEventListener(eventName, callback, [capture]) .removeEventListener(eventName, callback, [capture]) .dispatchEvent(event) new HTMLLinkElement(document, nodeName, namespaceURI) Creates an instance of HTMLLinkElement. Param Type document * nodeName * namespaceURI * htmlLinkElement.nodeName : string Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.localName : string Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.tagName : string Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.nodeType : number Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.namespaceURI : string Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.id : string Kind: instance property of HTMLLinkElement htmlLinkElement.className : string Kind: instance property of HTMLLinkElement htmlLinkElement.attributes : NamedNodeMap Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.style : Style Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.clientLeft : number Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.clientTop : number Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.clientWidth : number Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.clientHeight : number Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.offsetLeft : number Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.offsetTop : number Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.offsetWidth : number Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.offsetHeight : number Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.scrollLeft : number Kind: instance property of HTMLLinkElement htmlLinkElement.scrollTop : number Kind: instance property of HTMLLinkElement htmlLinkElement.scrollWidth : number Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.scrollHeight : number Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.disabled : boolean Kind: instance property of HTMLLinkElement htmlLinkElement.innerHTML : string Kind: instance property of HTMLLinkElement htmlLinkElement.outerHTML : string Kind: instance property of HTMLLinkElement htmlLinkElement.contentEditable Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.isConnected : boolean Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.parentNode : Node Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.firstChild : Node Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.lastChild : Node Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.previousSibling : Node Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.nextSibling : Node Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.firstElementChild : Node Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.lastElementChild : Node Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.previousElementSibling : Node Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.nextElementSibling : Node Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.textContent : string Kind: instance property of HTMLLinkElement htmlLinkElement.childNodes : NodeList Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.ownerDocument Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.offsetParent Kind: instance property of HTMLLinkElement Read only: true htmlLinkElement.scrollIntoView() Kind: instance method of HTMLLinkElement htmlLinkElement.scrollIntoViewIfNeeded() Kind: instance method of HTMLLinkElement htmlLinkElement.focus() Kind: instance method of HTMLLinkElement htmlLinkElement.blur() Kind: instance method of HTMLLinkElement htmlLinkElement.getAttribute(name) ⇒ string Kind: instance method of HTMLLinkElement Param Type name string htmlLinkElement.setAttribute(name, value) Kind: instance method of HTMLLinkElement Param Type name string value string htmlLinkElement.removeAttribute(name) Kind: instance method of HTMLLinkElement Param Type name string htmlLinkElement.hasAttribute(name) ⇒ boolean Kind: instance method of HTMLLinkElement Param Type name string htmlLinkElement.getAttributeNode(name) ⇒ * Kind: instance method of HTMLLinkElement Param Type name string htmlLinkElement.setAttributeNode(newAttr) Kind: instance method of HTMLLinkElement Param Type newAttr * htmlLinkElement.removeAttributeNode(oldAttr) Kind: instance method of HTMLLinkElement Param Type oldAttr * htmlLinkElement.getElementsByClassName(name) ⇒ NodeList Kind: instance method of HTMLLinkElement Param Type name string htmlLinkElement.getElementsByTagName(name) ⇒ NodeList Kind: instance method of HTMLLinkElement Param Type name string htmlLinkElement.querySelector(selector) ⇒ Element Kind: instance method of HTMLLinkElement Param Type selector string htmlLinkElement.querySelectorAll(selector) ⇒ NodeList Kind: instance method of HTMLLinkElement Param Type selector string htmlLinkElement.getBoundingClientRect() ⇒ * Kind: instance method of HTMLLinkElement htmlLinkElement.insertAdjacentHTML(position, value) Kind: instance method of HTMLLinkElement Param Type position value string htmlLinkElement.insertAdjacentElement(position, node) ⇒ Node Kind: instance method of HTMLLinkElement Param Type position * node * htmlLinkElement.insertAdjacentText(position, text) Kind: instance method of HTMLLinkElement Param Type position * text * htmlLinkElement.hasChildNodes() ⇒ boolean Kind: instance method of HTMLLinkElement htmlLinkElement.cloneNode(deep) ⇒ Node Kind: instance method of HTMLLinkElement Param Type deep boolean htmlLinkElement.appendChild(child) ⇒ Node Kind: instance method of HTMLLinkElement Param Type child Node htmlLinkElement.insertBefore(child, before) ⇒ Node Kind: instance method of HTMLLinkElement Param Type child Node before Node htmlLinkElement.replaceChild(newChild, oldChild) ⇒ Node Kind: instance method of HTMLLinkElement Param Type newChild Node oldChild Node htmlLinkElement.removeChild(child) ⇒ Node Kind: instance method of HTMLLinkElement Param Type child Node htmlLinkElement.remove() Kind: instance method of HTMLLinkElement htmlLinkElement.before(...nodes) Kind: instance method of HTMLLinkElement Param Type ...nodes Array. htmlLinkElement.after(...nodes) Kind: instance method of HTMLLinkElement Param Type ...nodes Array. htmlLinkElement.replaceWith(...nodes) Kind: instance method of HTMLLinkElement Param Type ...nodes Array. htmlLinkElement.addEventListener(eventName, callback, [capture]) Kind: instance method of HTMLLinkElement Param Type Default eventName * callback * [capture] boolean false htmlLinkElement.removeEventListener(eventName, callback, [capture]) Kind: instance method of HTMLLinkElement Param Type Default eventName * callback * [capture] boolean false htmlLinkElement.dispatchEvent(event) Kind: instance method of HTMLLinkElement Param Type event * "},"reference/uxp/class/HTMLMenuElement.html":{"url":"reference/uxp/class/HTMLMenuElement.html","title":"HTMLMenuElement","keywords":"","body":" HTMLMenuElement ⇐ HTMLElement Kind: global class Extends: HTMLElement Access: public See: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu HTMLMenuElement ⇐ HTMLElement new HTMLMenuElement(document, nodeName, namespaceURI) .nodeName : string .localName : string .tagName : string .nodeType : number .namespaceURI : string .id : string .className : string .attributes : NamedNodeMap .style : Style .clientLeft : number .clientTop : number .clientWidth : number .clientHeight : number .offsetLeft : number .offsetTop : number .offsetWidth : number .offsetHeight : number .scrollLeft : number .scrollTop : number .scrollWidth : number .scrollHeight : number .disabled : boolean .innerHTML : string .outerHTML : string .contentEditable .isConnected : boolean .parentNode : Node .firstChild : Node .lastChild : Node .previousSibling : Node .nextSibling : Node .firstElementChild : Node .lastElementChild : Node .previousElementSibling : Node .nextElementSibling : Node .textContent : string .childNodes : NodeList .ownerDocument .offsetParent .popupAt(x, y) .scrollIntoView() .scrollIntoViewIfNeeded() .focus() .blur() .getAttribute(name) ⇒ string .setAttribute(name, value) .removeAttribute(name) .hasAttribute(name) ⇒ boolean .getAttributeNode(name) ⇒ * .setAttributeNode(newAttr) .removeAttributeNode(oldAttr) .getElementsByClassName(name) ⇒ NodeList .getElementsByTagName(name) ⇒ NodeList .querySelector(selector) ⇒ Element .querySelectorAll(selector) ⇒ NodeList .getBoundingClientRect() ⇒ * .insertAdjacentHTML(position, value) .insertAdjacentElement(position, node) ⇒ Node .insertAdjacentText(position, text) .hasChildNodes() ⇒ boolean .cloneNode(deep) ⇒ Node .appendChild(child) ⇒ Node .insertBefore(child, before) ⇒ Node .replaceChild(newChild, oldChild) ⇒ Node .removeChild(child) ⇒ Node .remove() .before(...nodes) .after(...nodes) .replaceWith(...nodes) .addEventListener(eventName, callback, [capture]) .removeEventListener(eventName, callback, [capture]) .dispatchEvent(event) new HTMLMenuElement(document, nodeName, namespaceURI) Creates an instance of HTMLMenuElement. Param Type document * nodeName * namespaceURI * htmlMenuElement.nodeName : string Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.localName : string Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.tagName : string Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.nodeType : number Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.namespaceURI : string Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.id : string Kind: instance property of HTMLMenuElement htmlMenuElement.className : string Kind: instance property of HTMLMenuElement htmlMenuElement.attributes : NamedNodeMap Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.style : Style Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.clientLeft : number Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.clientTop : number Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.clientWidth : number Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.clientHeight : number Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.offsetLeft : number Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.offsetTop : number Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.offsetWidth : number Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.offsetHeight : number Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.scrollLeft : number Kind: instance property of HTMLMenuElement htmlMenuElement.scrollTop : number Kind: instance property of HTMLMenuElement htmlMenuElement.scrollWidth : number Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.scrollHeight : number Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.disabled : boolean Kind: instance property of HTMLMenuElement htmlMenuElement.innerHTML : string Kind: instance property of HTMLMenuElement htmlMenuElement.outerHTML : string Kind: instance property of HTMLMenuElement htmlMenuElement.contentEditable Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.isConnected : boolean Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.parentNode : Node Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.firstChild : Node Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.lastChild : Node Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.previousSibling : Node Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.nextSibling : Node Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.firstElementChild : Node Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.lastElementChild : Node Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.previousElementSibling : Node Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.nextElementSibling : Node Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.textContent : string Kind: instance property of HTMLMenuElement htmlMenuElement.childNodes : NodeList Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.ownerDocument Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.offsetParent Kind: instance property of HTMLMenuElement Read only: true htmlMenuElement.popupAt(x, y) Render the menu at the x,y coordinates Kind: instance method of HTMLMenuElement Param Type x number y number htmlMenuElement.scrollIntoView() Kind: instance method of HTMLMenuElement htmlMenuElement.scrollIntoViewIfNeeded() Kind: instance method of HTMLMenuElement htmlMenuElement.focus() Kind: instance method of HTMLMenuElement htmlMenuElement.blur() Kind: instance method of HTMLMenuElement htmlMenuElement.getAttribute(name) ⇒ string Kind: instance method of HTMLMenuElement Param Type name string htmlMenuElement.setAttribute(name, value) Kind: instance method of HTMLMenuElement Param Type name string value string htmlMenuElement.removeAttribute(name) Kind: instance method of HTMLMenuElement Param Type name string htmlMenuElement.hasAttribute(name) ⇒ boolean Kind: instance method of HTMLMenuElement Param Type name string htmlMenuElement.getAttributeNode(name) ⇒ * Kind: instance method of HTMLMenuElement Param Type name string htmlMenuElement.setAttributeNode(newAttr) Kind: instance method of HTMLMenuElement Param Type newAttr * htmlMenuElement.removeAttributeNode(oldAttr) Kind: instance method of HTMLMenuElement Param Type oldAttr * htmlMenuElement.getElementsByClassName(name) ⇒ NodeList Kind: instance method of HTMLMenuElement Param Type name string htmlMenuElement.getElementsByTagName(name) ⇒ NodeList Kind: instance method of HTMLMenuElement Param Type name string htmlMenuElement.querySelector(selector) ⇒ Element Kind: instance method of HTMLMenuElement Param Type selector string htmlMenuElement.querySelectorAll(selector) ⇒ NodeList Kind: instance method of HTMLMenuElement Param Type selector string htmlMenuElement.getBoundingClientRect() ⇒ * Kind: instance method of HTMLMenuElement htmlMenuElement.insertAdjacentHTML(position, value) Kind: instance method of HTMLMenuElement Param Type position value string htmlMenuElement.insertAdjacentElement(position, node) ⇒ Node Kind: instance method of HTMLMenuElement Param Type position * node * htmlMenuElement.insertAdjacentText(position, text) Kind: instance method of HTMLMenuElement Param Type position * text * htmlMenuElement.hasChildNodes() ⇒ boolean Kind: instance method of HTMLMenuElement htmlMenuElement.cloneNode(deep) ⇒ Node Kind: instance method of HTMLMenuElement Param Type deep boolean htmlMenuElement.appendChild(child) ⇒ Node Kind: instance method of HTMLMenuElement Param Type child Node htmlMenuElement.insertBefore(child, before) ⇒ Node Kind: instance method of HTMLMenuElement Param Type child Node before Node htmlMenuElement.replaceChild(newChild, oldChild) ⇒ Node Kind: instance method of HTMLMenuElement Param Type newChild Node oldChild Node htmlMenuElement.removeChild(child) ⇒ Node Kind: instance method of HTMLMenuElement Param Type child Node htmlMenuElement.remove() Kind: instance method of HTMLMenuElement htmlMenuElement.before(...nodes) Kind: instance method of HTMLMenuElement Param Type ...nodes Array. htmlMenuElement.after(...nodes) Kind: instance method of HTMLMenuElement Param Type ...nodes Array. htmlMenuElement.replaceWith(...nodes) Kind: instance method of HTMLMenuElement Param Type ...nodes Array. htmlMenuElement.addEventListener(eventName, callback, [capture]) Kind: instance method of HTMLMenuElement Param Type Default eventName * callback * [capture] boolean false htmlMenuElement.removeEventListener(eventName, callback, [capture]) Kind: instance method of HTMLMenuElement Param Type Default eventName * callback * [capture] boolean false htmlMenuElement.dispatchEvent(event) Kind: instance method of HTMLMenuElement Param Type event * "},"reference/uxp/class/HTMLOptionElement.html":{"url":"reference/uxp/class/HTMLOptionElement.html","title":"HTMLOptionElement","keywords":"","body":" HTMLOptionElement ⇐ HTMLElement Kind: global class Extends: HTMLElement Access: public See: https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement HTMLOptionElement ⇐ HTMLElement new HTMLOptionElement(document, nodeName, namespaceURI) .value : string .nodeName : string .localName : string .tagName : string .nodeType : number .namespaceURI : string .id : string .className : string .attributes : NamedNodeMap .style : Style .clientLeft : number .clientTop : number .clientWidth : number .clientHeight : number .offsetLeft : number .offsetTop : number .offsetWidth : number .offsetHeight : number .scrollLeft : number .scrollTop : number .scrollWidth : number .scrollHeight : number .disabled : boolean .innerHTML : string .outerHTML : string .contentEditable .isConnected : boolean .parentNode : Node .firstChild : Node .lastChild : Node .previousSibling : Node .nextSibling : Node .firstElementChild : Node .lastElementChild : Node .previousElementSibling : Node .nextElementSibling : Node .textContent : string .childNodes : NodeList .ownerDocument .offsetParent .scrollIntoView() .scrollIntoViewIfNeeded() .focus() .blur() .getAttribute(name) ⇒ string .setAttribute(name, value) .removeAttribute(name) .hasAttribute(name) ⇒ boolean .getAttributeNode(name) ⇒ * .setAttributeNode(newAttr) .removeAttributeNode(oldAttr) .getElementsByClassName(name) ⇒ NodeList .getElementsByTagName(name) ⇒ NodeList .querySelector(selector) ⇒ Element .querySelectorAll(selector) ⇒ NodeList .getBoundingClientRect() ⇒ * .insertAdjacentHTML(position, value) .insertAdjacentElement(position, node) ⇒ Node .insertAdjacentText(position, text) .hasChildNodes() ⇒ boolean .cloneNode(deep) ⇒ Node .appendChild(child) ⇒ Node .insertBefore(child, before) ⇒ Node .replaceChild(newChild, oldChild) ⇒ Node .removeChild(child) ⇒ Node .remove() .before(...nodes) .after(...nodes) .replaceWith(...nodes) .addEventListener(eventName, callback, [capture]) .removeEventListener(eventName, callback, [capture]) .dispatchEvent(event) new HTMLOptionElement(document, nodeName, namespaceURI) Creates an instance of HTMLOptionElement. Param Type document * nodeName * namespaceURI * htmlOptionElement.value : string Kind: instance property of HTMLOptionElement htmlOptionElement.nodeName : string Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.localName : string Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.tagName : string Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.nodeType : number Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.namespaceURI : string Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.id : string Kind: instance property of HTMLOptionElement htmlOptionElement.className : string Kind: instance property of HTMLOptionElement htmlOptionElement.attributes : NamedNodeMap Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.style : Style Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.clientLeft : number Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.clientTop : number Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.clientWidth : number Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.clientHeight : number Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.offsetLeft : number Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.offsetTop : number Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.offsetWidth : number Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.offsetHeight : number Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.scrollLeft : number Kind: instance property of HTMLOptionElement htmlOptionElement.scrollTop : number Kind: instance property of HTMLOptionElement htmlOptionElement.scrollWidth : number Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.scrollHeight : number Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.disabled : boolean Kind: instance property of HTMLOptionElement htmlOptionElement.innerHTML : string Kind: instance property of HTMLOptionElement htmlOptionElement.outerHTML : string Kind: instance property of HTMLOptionElement htmlOptionElement.contentEditable Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.isConnected : boolean Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.parentNode : Node Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.firstChild : Node Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.lastChild : Node Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.previousSibling : Node Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.nextSibling : Node Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.firstElementChild : Node Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.lastElementChild : Node Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.previousElementSibling : Node Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.nextElementSibling : Node Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.textContent : string Kind: instance property of HTMLOptionElement htmlOptionElement.childNodes : NodeList Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.ownerDocument Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.offsetParent Kind: instance property of HTMLOptionElement Read only: true htmlOptionElement.scrollIntoView() Kind: instance method of HTMLOptionElement htmlOptionElement.scrollIntoViewIfNeeded() Kind: instance method of HTMLOptionElement htmlOptionElement.focus() Kind: instance method of HTMLOptionElement htmlOptionElement.blur() Kind: instance method of HTMLOptionElement htmlOptionElement.getAttribute(name) ⇒ string Kind: instance method of HTMLOptionElement Param Type name string htmlOptionElement.setAttribute(name, value) Kind: instance method of HTMLOptionElement Param Type name string value string htmlOptionElement.removeAttribute(name) Kind: instance method of HTMLOptionElement Param Type name string htmlOptionElement.hasAttribute(name) ⇒ boolean Kind: instance method of HTMLOptionElement Param Type name string htmlOptionElement.getAttributeNode(name) ⇒ * Kind: instance method of HTMLOptionElement Param Type name string htmlOptionElement.setAttributeNode(newAttr) Kind: instance method of HTMLOptionElement Param Type newAttr * htmlOptionElement.removeAttributeNode(oldAttr) Kind: instance method of HTMLOptionElement Param Type oldAttr * htmlOptionElement.getElementsByClassName(name) ⇒ NodeList Kind: instance method of HTMLOptionElement Param Type name string htmlOptionElement.getElementsByTagName(name) ⇒ NodeList Kind: instance method of HTMLOptionElement Param Type name string htmlOptionElement.querySelector(selector) ⇒ Element Kind: instance method of HTMLOptionElement Param Type selector string htmlOptionElement.querySelectorAll(selector) ⇒ NodeList Kind: instance method of HTMLOptionElement Param Type selector string htmlOptionElement.getBoundingClientRect() ⇒ * Kind: instance method of HTMLOptionElement htmlOptionElement.insertAdjacentHTML(position, value) Kind: instance method of HTMLOptionElement Param Type position value string htmlOptionElement.insertAdjacentElement(position, node) ⇒ Node Kind: instance method of HTMLOptionElement Param Type position * node * htmlOptionElement.insertAdjacentText(position, text) Kind: instance method of HTMLOptionElement Param Type position * text * htmlOptionElement.hasChildNodes() ⇒ boolean Kind: instance method of HTMLOptionElement htmlOptionElement.cloneNode(deep) ⇒ Node Kind: instance method of HTMLOptionElement Param Type deep boolean htmlOptionElement.appendChild(child) ⇒ Node Kind: instance method of HTMLOptionElement Param Type child Node htmlOptionElement.insertBefore(child, before) ⇒ Node Kind: instance method of HTMLOptionElement Param Type child Node before Node htmlOptionElement.replaceChild(newChild, oldChild) ⇒ Node Kind: instance method of HTMLOptionElement Param Type newChild Node oldChild Node htmlOptionElement.removeChild(child) ⇒ Node Kind: instance method of HTMLOptionElement Param Type child Node htmlOptionElement.remove() Kind: instance method of HTMLOptionElement htmlOptionElement.before(...nodes) Kind: instance method of HTMLOptionElement Param Type ...nodes Array. htmlOptionElement.after(...nodes) Kind: instance method of HTMLOptionElement Param Type ...nodes Array. htmlOptionElement.replaceWith(...nodes) Kind: instance method of HTMLOptionElement Param Type ...nodes Array. htmlOptionElement.addEventListener(eventName, callback, [capture]) Kind: instance method of HTMLOptionElement Param Type Default eventName * callback * [capture] boolean false htmlOptionElement.removeEventListener(eventName, callback, [capture]) Kind: instance method of HTMLOptionElement Param Type Default eventName * callback * [capture] boolean false htmlOptionElement.dispatchEvent(event) Kind: instance method of HTMLOptionElement Param Type event * "},"reference/uxp/class/HTMLScriptElement.html":{"url":"reference/uxp/class/HTMLScriptElement.html","title":"HTMLScriptElement","keywords":"","body":" HTMLScriptElement ⇐ HTMLElement Kind: global class Extends: HTMLElement Access: public See: https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement HTMLScriptElement ⇐ HTMLElement new HTMLScriptElement(document, nodeName, namespaceURI) .type : string .src : string .charset : string .text : string .nodeName : string .localName : string .tagName : string .nodeType : number .namespaceURI : string .id : string .className : string .attributes : NamedNodeMap .style : Style .clientLeft : number .clientTop : number .clientWidth : number .clientHeight : number .offsetLeft : number .offsetTop : number .offsetWidth : number .offsetHeight : number .scrollLeft : number .scrollTop : number .scrollWidth : number .scrollHeight : number .disabled : boolean .innerHTML : string .outerHTML : string .contentEditable .isConnected : boolean .parentNode : Node .firstChild : Node .lastChild : Node .previousSibling : Node .nextSibling : Node .firstElementChild : Node .lastElementChild : Node .previousElementSibling : Node .nextElementSibling : Node .textContent : string .childNodes : NodeList .ownerDocument .offsetParent .scrollIntoView() .scrollIntoViewIfNeeded() .focus() .blur() .getAttribute(name) ⇒ string .setAttribute(name, value) .removeAttribute(name) .hasAttribute(name) ⇒ boolean .getAttributeNode(name) ⇒ * .setAttributeNode(newAttr) .removeAttributeNode(oldAttr) .getElementsByClassName(name) ⇒ NodeList .getElementsByTagName(name) ⇒ NodeList .querySelector(selector) ⇒ Element .querySelectorAll(selector) ⇒ NodeList .getBoundingClientRect() ⇒ * .insertAdjacentHTML(position, value) .insertAdjacentElement(position, node) ⇒ Node .insertAdjacentText(position, text) .hasChildNodes() ⇒ boolean .cloneNode(deep) ⇒ Node .appendChild(child) ⇒ Node .insertBefore(child, before) ⇒ Node .replaceChild(newChild, oldChild) ⇒ Node .removeChild(child) ⇒ Node .remove() .before(...nodes) .after(...nodes) .replaceWith(...nodes) .addEventListener(eventName, callback, [capture]) .removeEventListener(eventName, callback, [capture]) .dispatchEvent(event) new HTMLScriptElement(document, nodeName, namespaceURI) Creates an instance of HTMLScriptElement. Param Type document * nodeName * namespaceURI * htmlScriptElement.type : string Kind: instance property of HTMLScriptElement htmlScriptElement.src : string Kind: instance property of HTMLScriptElement htmlScriptElement.charset : string Kind: instance property of HTMLScriptElement htmlScriptElement.text : string Kind: instance property of HTMLScriptElement htmlScriptElement.nodeName : string Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.localName : string Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.tagName : string Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.nodeType : number Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.namespaceURI : string Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.id : string Kind: instance property of HTMLScriptElement htmlScriptElement.className : string Kind: instance property of HTMLScriptElement htmlScriptElement.attributes : NamedNodeMap Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.style : Style Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.clientLeft : number Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.clientTop : number Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.clientWidth : number Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.clientHeight : number Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.offsetLeft : number Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.offsetTop : number Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.offsetWidth : number Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.offsetHeight : number Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.scrollLeft : number Kind: instance property of HTMLScriptElement htmlScriptElement.scrollTop : number Kind: instance property of HTMLScriptElement htmlScriptElement.scrollWidth : number Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.scrollHeight : number Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.disabled : boolean Kind: instance property of HTMLScriptElement htmlScriptElement.innerHTML : string Kind: instance property of HTMLScriptElement htmlScriptElement.outerHTML : string Kind: instance property of HTMLScriptElement htmlScriptElement.contentEditable Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.isConnected : boolean Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.parentNode : Node Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.firstChild : Node Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.lastChild : Node Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.previousSibling : Node Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.nextSibling : Node Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.firstElementChild : Node Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.lastElementChild : Node Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.previousElementSibling : Node Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.nextElementSibling : Node Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.textContent : string Kind: instance property of HTMLScriptElement Overrides: textContent htmlScriptElement.childNodes : NodeList Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.ownerDocument Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.offsetParent Kind: instance property of HTMLScriptElement Read only: true htmlScriptElement.scrollIntoView() Kind: instance method of HTMLScriptElement htmlScriptElement.scrollIntoViewIfNeeded() Kind: instance method of HTMLScriptElement htmlScriptElement.focus() Kind: instance method of HTMLScriptElement htmlScriptElement.blur() Kind: instance method of HTMLScriptElement htmlScriptElement.getAttribute(name) ⇒ string Kind: instance method of HTMLScriptElement Param Type name string htmlScriptElement.setAttribute(name, value) Kind: instance method of HTMLScriptElement Param Type name string value string htmlScriptElement.removeAttribute(name) Kind: instance method of HTMLScriptElement Param Type name string htmlScriptElement.hasAttribute(name) ⇒ boolean Kind: instance method of HTMLScriptElement Param Type name string htmlScriptElement.getAttributeNode(name) ⇒ * Kind: instance method of HTMLScriptElement Param Type name string htmlScriptElement.setAttributeNode(newAttr) Kind: instance method of HTMLScriptElement Param Type newAttr * htmlScriptElement.removeAttributeNode(oldAttr) Kind: instance method of HTMLScriptElement Param Type oldAttr * htmlScriptElement.getElementsByClassName(name) ⇒ NodeList Kind: instance method of HTMLScriptElement Param Type name string htmlScriptElement.getElementsByTagName(name) ⇒ NodeList Kind: instance method of HTMLScriptElement Param Type name string htmlScriptElement.querySelector(selector) ⇒ Element Kind: instance method of HTMLScriptElement Param Type selector string htmlScriptElement.querySelectorAll(selector) ⇒ NodeList Kind: instance method of HTMLScriptElement Param Type selector string htmlScriptElement.getBoundingClientRect() ⇒ * Kind: instance method of HTMLScriptElement htmlScriptElement.insertAdjacentHTML(position, value) Kind: instance method of HTMLScriptElement Param Type position value string htmlScriptElement.insertAdjacentElement(position, node) ⇒ Node Kind: instance method of HTMLScriptElement Param Type position * node * htmlScriptElement.insertAdjacentText(position, text) Kind: instance method of HTMLScriptElement Param Type position * text * htmlScriptElement.hasChildNodes() ⇒ boolean Kind: instance method of HTMLScriptElement htmlScriptElement.cloneNode(deep) ⇒ Node Kind: instance method of HTMLScriptElement Param Type deep boolean htmlScriptElement.appendChild(child) ⇒ Node Kind: instance method of HTMLScriptElement Param Type child Node htmlScriptElement.insertBefore(child, before) ⇒ Node Kind: instance method of HTMLScriptElement Param Type child Node before Node htmlScriptElement.replaceChild(newChild, oldChild) ⇒ Node Kind: instance method of HTMLScriptElement Param Type newChild Node oldChild Node htmlScriptElement.removeChild(child) ⇒ Node Kind: instance method of HTMLScriptElement Param Type child Node htmlScriptElement.remove() Kind: instance method of HTMLScriptElement htmlScriptElement.before(...nodes) Kind: instance method of HTMLScriptElement Param Type ...nodes Array. htmlScriptElement.after(...nodes) Kind: instance method of HTMLScriptElement Param Type ...nodes Array. htmlScriptElement.replaceWith(...nodes) Kind: instance method of HTMLScriptElement Param Type ...nodes Array. htmlScriptElement.addEventListener(eventName, callback, [capture]) Kind: instance method of HTMLScriptElement Param Type Default eventName * callback * [capture] boolean false htmlScriptElement.removeEventListener(eventName, callback, [capture]) Kind: instance method of HTMLScriptElement Param Type Default eventName * callback * [capture] boolean false htmlScriptElement.dispatchEvent(event) Kind: instance method of HTMLScriptElement Param Type event * "},"reference/uxp/class/HTMLSelectElement.html":{"url":"reference/uxp/class/HTMLSelectElement.html","title":"HTMLSelectElement","keywords":"","body":" HTMLSelectElement ⇐ HTMLElement Kind: global class Extends: HTMLElement Access: public See: https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement HTMLSelectElement ⇐ HTMLElement new HTMLSelectElement(document, nodeName, namespaceURI) .value : string .selectedNode : Node .selectedIndex : number .selectedOptions : Array. .uxpVariant : string .uxpQuiet : string .options : NodeList .nodeName : string .localName : string .tagName : string .nodeType : number .namespaceURI : string .id : string .className : string .attributes : NamedNodeMap .style : Style .clientLeft : number .clientTop : number .clientWidth : number .clientHeight : number .offsetLeft : number .offsetTop : number .offsetWidth : number .offsetHeight : number .scrollLeft : number .scrollTop : number .scrollWidth : number .scrollHeight : number .disabled : boolean .innerHTML : string .outerHTML : string .contentEditable .isConnected : boolean .parentNode : Node .firstChild : Node .lastChild : Node .previousSibling : Node .nextSibling : Node .firstElementChild : Node .lastElementChild : Node .previousElementSibling : Node .nextElementSibling : Node .textContent : string .childNodes : NodeList .ownerDocument .offsetParent .scrollIntoView() .scrollIntoViewIfNeeded() .focus() .blur() .getAttribute(name) ⇒ string .setAttribute(name, value) .removeAttribute(name) .hasAttribute(name) ⇒ boolean .getAttributeNode(name) ⇒ * .setAttributeNode(newAttr) .removeAttributeNode(oldAttr) .getElementsByClassName(name) ⇒ NodeList .getElementsByTagName(name) ⇒ NodeList .querySelector(selector) ⇒ Element .querySelectorAll(selector) ⇒ NodeList .getBoundingClientRect() ⇒ * .insertAdjacentHTML(position, value) .insertAdjacentElement(position, node) ⇒ Node .insertAdjacentText(position, text) .hasChildNodes() ⇒ boolean .cloneNode(deep) ⇒ Node .appendChild(child) ⇒ Node .insertBefore(child, before) ⇒ Node .replaceChild(newChild, oldChild) ⇒ Node .removeChild(child) ⇒ Node .remove() .before(...nodes) .after(...nodes) .replaceWith(...nodes) .addEventListener(eventName, callback, [capture]) .removeEventListener(eventName, callback, [capture]) .dispatchEvent(event) new HTMLSelectElement(document, nodeName, namespaceURI) Creates an instance of HTMLSelectElement. Param Type document * nodeName * namespaceURI * htmlSelectElement.value : string Kind: instance property of HTMLSelectElement htmlSelectElement.selectedNode : Node Kind: instance property of HTMLSelectElement htmlSelectElement.selectedIndex : number Kind: instance property of HTMLSelectElement htmlSelectElement.selectedOptions : Array. Kind: instance property of HTMLSelectElement htmlSelectElement.uxpVariant : string Variant Kind: instance property of HTMLSelectElement htmlSelectElement.uxpQuiet : string Determines if control renders quietly Kind: instance property of HTMLSelectElement htmlSelectElement.options : NodeList Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.nodeName : string Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.localName : string Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.tagName : string Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.nodeType : number Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.namespaceURI : string Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.id : string Kind: instance property of HTMLSelectElement htmlSelectElement.className : string Kind: instance property of HTMLSelectElement htmlSelectElement.attributes : NamedNodeMap Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.style : Style Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.clientLeft : number Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.clientTop : number Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.clientWidth : number Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.clientHeight : number Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.offsetLeft : number Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.offsetTop : number Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.offsetWidth : number Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.offsetHeight : number Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.scrollLeft : number Kind: instance property of HTMLSelectElement htmlSelectElement.scrollTop : number Kind: instance property of HTMLSelectElement htmlSelectElement.scrollWidth : number Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.scrollHeight : number Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.disabled : boolean Kind: instance property of HTMLSelectElement htmlSelectElement.innerHTML : string Kind: instance property of HTMLSelectElement htmlSelectElement.outerHTML : string Kind: instance property of HTMLSelectElement htmlSelectElement.contentEditable Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.isConnected : boolean Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.parentNode : Node Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.firstChild : Node Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.lastChild : Node Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.previousSibling : Node Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.nextSibling : Node Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.firstElementChild : Node Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.lastElementChild : Node Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.previousElementSibling : Node Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.nextElementSibling : Node Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.textContent : string Kind: instance property of HTMLSelectElement htmlSelectElement.childNodes : NodeList Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.ownerDocument Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.offsetParent Kind: instance property of HTMLSelectElement Read only: true htmlSelectElement.scrollIntoView() Kind: instance method of HTMLSelectElement htmlSelectElement.scrollIntoViewIfNeeded() Kind: instance method of HTMLSelectElement htmlSelectElement.focus() Kind: instance method of HTMLSelectElement htmlSelectElement.blur() Kind: instance method of HTMLSelectElement htmlSelectElement.getAttribute(name) ⇒ string Kind: instance method of HTMLSelectElement Param Type name string htmlSelectElement.setAttribute(name, value) Kind: instance method of HTMLSelectElement Param Type name string value string htmlSelectElement.removeAttribute(name) Kind: instance method of HTMLSelectElement Param Type name string htmlSelectElement.hasAttribute(name) ⇒ boolean Kind: instance method of HTMLSelectElement Param Type name string htmlSelectElement.getAttributeNode(name) ⇒ * Kind: instance method of HTMLSelectElement Param Type name string htmlSelectElement.setAttributeNode(newAttr) Kind: instance method of HTMLSelectElement Param Type newAttr * htmlSelectElement.removeAttributeNode(oldAttr) Kind: instance method of HTMLSelectElement Param Type oldAttr * htmlSelectElement.getElementsByClassName(name) ⇒ NodeList Kind: instance method of HTMLSelectElement Param Type name string htmlSelectElement.getElementsByTagName(name) ⇒ NodeList Kind: instance method of HTMLSelectElement Param Type name string htmlSelectElement.querySelector(selector) ⇒ Element Kind: instance method of HTMLSelectElement Param Type selector string htmlSelectElement.querySelectorAll(selector) ⇒ NodeList Kind: instance method of HTMLSelectElement Param Type selector string htmlSelectElement.getBoundingClientRect() ⇒ * Kind: instance method of HTMLSelectElement htmlSelectElement.insertAdjacentHTML(position, value) Kind: instance method of HTMLSelectElement Param Type position value string htmlSelectElement.insertAdjacentElement(position, node) ⇒ Node Kind: instance method of HTMLSelectElement Param Type position * node * htmlSelectElement.insertAdjacentText(position, text) Kind: instance method of HTMLSelectElement Param Type position * text * htmlSelectElement.hasChildNodes() ⇒ boolean Kind: instance method of HTMLSelectElement htmlSelectElement.cloneNode(deep) ⇒ Node Kind: instance method of HTMLSelectElement Param Type deep boolean htmlSelectElement.appendChild(child) ⇒ Node Kind: instance method of HTMLSelectElement Param Type child Node htmlSelectElement.insertBefore(child, before) ⇒ Node Kind: instance method of HTMLSelectElement Param Type child Node before Node htmlSelectElement.replaceChild(newChild, oldChild) ⇒ Node Kind: instance method of HTMLSelectElement Param Type newChild Node oldChild Node htmlSelectElement.removeChild(child) ⇒ Node Kind: instance method of HTMLSelectElement Param Type child Node htmlSelectElement.remove() Kind: instance method of HTMLSelectElement htmlSelectElement.before(...nodes) Kind: instance method of HTMLSelectElement Param Type ...nodes Array. htmlSelectElement.after(...nodes) Kind: instance method of HTMLSelectElement Param Type ...nodes Array. htmlSelectElement.replaceWith(...nodes) Kind: instance method of HTMLSelectElement Param Type ...nodes Array. htmlSelectElement.addEventListener(eventName, callback, [capture]) Kind: instance method of HTMLSelectElement Param Type Default eventName * callback * [capture] boolean false htmlSelectElement.removeEventListener(eventName, callback, [capture]) Kind: instance method of HTMLSelectElement Param Type Default eventName * callback * [capture] boolean false htmlSelectElement.dispatchEvent(event) Kind: instance method of HTMLSelectElement Param Type event * "},"reference/uxp/class/HTMLStyleElement.html":{"url":"reference/uxp/class/HTMLStyleElement.html","title":"HTMLStyleElement","keywords":"","body":" HTMLStyleElement ⇐ HTMLElement Kind: global class Extends: HTMLElement Access: public See: https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement HTMLStyleElement ⇐ HTMLElement new HTMLStyleElement(document, nodeName, namespaceURI) .nodeName : string .localName : string .tagName : string .nodeType : number .namespaceURI : string .id : string .className : string .attributes : NamedNodeMap .style : Style .clientLeft : number .clientTop : number .clientWidth : number .clientHeight : number .offsetLeft : number .offsetTop : number .offsetWidth : number .offsetHeight : number .scrollLeft : number .scrollTop : number .scrollWidth : number .scrollHeight : number .disabled : boolean .innerHTML : string .outerHTML : string .contentEditable .isConnected : boolean .parentNode : Node .firstChild : Node .lastChild : Node .previousSibling : Node .nextSibling : Node .firstElementChild : Node .lastElementChild : Node .previousElementSibling : Node .nextElementSibling : Node .textContent : string .childNodes : NodeList .ownerDocument .offsetParent .scrollIntoView() .scrollIntoViewIfNeeded() .focus() .blur() .getAttribute(name) ⇒ string .setAttribute(name, value) .removeAttribute(name) .hasAttribute(name) ⇒ boolean .getAttributeNode(name) ⇒ * .setAttributeNode(newAttr) .removeAttributeNode(oldAttr) .getElementsByClassName(name) ⇒ NodeList .getElementsByTagName(name) ⇒ NodeList .querySelector(selector) ⇒ Element .querySelectorAll(selector) ⇒ NodeList .getBoundingClientRect() ⇒ * .insertAdjacentHTML(position, value) .insertAdjacentElement(position, node) ⇒ Node .insertAdjacentText(position, text) .hasChildNodes() ⇒ boolean .cloneNode(deep) ⇒ Node .appendChild(child) ⇒ Node .insertBefore(child, before) ⇒ Node .replaceChild(newChild, oldChild) ⇒ Node .removeChild(child) ⇒ Node .remove() .before(...nodes) .after(...nodes) .replaceWith(...nodes) .addEventListener(eventName, callback, [capture]) .removeEventListener(eventName, callback, [capture]) .dispatchEvent(event) new HTMLStyleElement(document, nodeName, namespaceURI) Creates an instance of HTMLStyleElement. Param Type document * nodeName * namespaceURI * htmlStyleElement.nodeName : string Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.localName : string Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.tagName : string Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.nodeType : number Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.namespaceURI : string Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.id : string Kind: instance property of HTMLStyleElement htmlStyleElement.className : string Kind: instance property of HTMLStyleElement htmlStyleElement.attributes : NamedNodeMap Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.style : Style Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.clientLeft : number Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.clientTop : number Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.clientWidth : number Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.clientHeight : number Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.offsetLeft : number Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.offsetTop : number Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.offsetWidth : number Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.offsetHeight : number Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.scrollLeft : number Kind: instance property of HTMLStyleElement htmlStyleElement.scrollTop : number Kind: instance property of HTMLStyleElement htmlStyleElement.scrollWidth : number Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.scrollHeight : number Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.disabled : boolean Kind: instance property of HTMLStyleElement htmlStyleElement.innerHTML : string Kind: instance property of HTMLStyleElement htmlStyleElement.outerHTML : string Kind: instance property of HTMLStyleElement htmlStyleElement.contentEditable Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.isConnected : boolean Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.parentNode : Node Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.firstChild : Node Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.lastChild : Node Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.previousSibling : Node Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.nextSibling : Node Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.firstElementChild : Node Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.lastElementChild : Node Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.previousElementSibling : Node Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.nextElementSibling : Node Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.textContent : string Kind: instance property of HTMLStyleElement htmlStyleElement.childNodes : NodeList Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.ownerDocument Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.offsetParent Kind: instance property of HTMLStyleElement Read only: true htmlStyleElement.scrollIntoView() Kind: instance method of HTMLStyleElement htmlStyleElement.scrollIntoViewIfNeeded() Kind: instance method of HTMLStyleElement htmlStyleElement.focus() Kind: instance method of HTMLStyleElement htmlStyleElement.blur() Kind: instance method of HTMLStyleElement htmlStyleElement.getAttribute(name) ⇒ string Kind: instance method of HTMLStyleElement Param Type name string htmlStyleElement.setAttribute(name, value) Kind: instance method of HTMLStyleElement Param Type name string value string htmlStyleElement.removeAttribute(name) Kind: instance method of HTMLStyleElement Param Type name string htmlStyleElement.hasAttribute(name) ⇒ boolean Kind: instance method of HTMLStyleElement Param Type name string htmlStyleElement.getAttributeNode(name) ⇒ * Kind: instance method of HTMLStyleElement Param Type name string htmlStyleElement.setAttributeNode(newAttr) Kind: instance method of HTMLStyleElement Param Type newAttr * htmlStyleElement.removeAttributeNode(oldAttr) Kind: instance method of HTMLStyleElement Param Type oldAttr * htmlStyleElement.getElementsByClassName(name) ⇒ NodeList Kind: instance method of HTMLStyleElement Param Type name string htmlStyleElement.getElementsByTagName(name) ⇒ NodeList Kind: instance method of HTMLStyleElement Param Type name string htmlStyleElement.querySelector(selector) ⇒ Element Kind: instance method of HTMLStyleElement Param Type selector string htmlStyleElement.querySelectorAll(selector) ⇒ NodeList Kind: instance method of HTMLStyleElement Param Type selector string htmlStyleElement.getBoundingClientRect() ⇒ * Kind: instance method of HTMLStyleElement htmlStyleElement.insertAdjacentHTML(position, value) Kind: instance method of HTMLStyleElement Param Type position value string htmlStyleElement.insertAdjacentElement(position, node) ⇒ Node Kind: instance method of HTMLStyleElement Param Type position * node * htmlStyleElement.insertAdjacentText(position, text) Kind: instance method of HTMLStyleElement Param Type position * text * htmlStyleElement.hasChildNodes() ⇒ boolean Kind: instance method of HTMLStyleElement htmlStyleElement.cloneNode(deep) ⇒ Node Kind: instance method of HTMLStyleElement Param Type deep boolean htmlStyleElement.appendChild(child) ⇒ Node Kind: instance method of HTMLStyleElement Param Type child Node htmlStyleElement.insertBefore(child, before) ⇒ Node Kind: instance method of HTMLStyleElement Param Type child Node before Node htmlStyleElement.replaceChild(newChild, oldChild) ⇒ Node Kind: instance method of HTMLStyleElement Param Type newChild Node oldChild Node htmlStyleElement.removeChild(child) ⇒ Node Kind: instance method of HTMLStyleElement Param Type child Node htmlStyleElement.remove() Kind: instance method of HTMLStyleElement htmlStyleElement.before(...nodes) Kind: instance method of HTMLStyleElement Param Type ...nodes Array. htmlStyleElement.after(...nodes) Kind: instance method of HTMLStyleElement Param Type ...nodes Array. htmlStyleElement.replaceWith(...nodes) Kind: instance method of HTMLStyleElement Param Type ...nodes Array. htmlStyleElement.addEventListener(eventName, callback, [capture]) Kind: instance method of HTMLStyleElement Param Type Default eventName * callback * [capture] boolean false htmlStyleElement.removeEventListener(eventName, callback, [capture]) Kind: instance method of HTMLStyleElement Param Type Default eventName * callback * [capture] boolean false htmlStyleElement.dispatchEvent(event) Kind: instance method of HTMLStyleElement Param Type event * "},"reference/uxp/class/HTMLTextAreaElement.html":{"url":"reference/uxp/class/HTMLTextAreaElement.html","title":"HTMLTextAreaElement","keywords":"","body":" HTMLTextAreaElement ⇐ HTMLElement Kind: global class Extends: HTMLElement Access: public See: https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement HTMLTextAreaElement ⇐ HTMLElement new HTMLTextAreaElement(document, nodeName, namespaceURI) .value : string .placeholder : string .readOnly : boolean .nodeName : string .localName : string .tagName : string .nodeType : number .namespaceURI : string .id : string .className : string .attributes : NamedNodeMap .style : Style .clientLeft : number .clientTop : number .clientWidth : number .clientHeight : number .offsetLeft : number .offsetTop : number .offsetWidth : number .offsetHeight : number .scrollLeft : number .scrollTop : number .scrollWidth : number .scrollHeight : number .disabled : boolean .innerHTML : string .outerHTML : string .contentEditable .isConnected : boolean .parentNode : Node .firstChild : Node .lastChild : Node .previousSibling : Node .nextSibling : Node .firstElementChild : Node .lastElementChild : Node .previousElementSibling : Node .nextElementSibling : Node .textContent : string .childNodes : NodeList .ownerDocument .offsetParent .scrollIntoView() .scrollIntoViewIfNeeded() .focus() .blur() .getAttribute(name) ⇒ string .setAttribute(name, value) .removeAttribute(name) .hasAttribute(name) ⇒ boolean .getAttributeNode(name) ⇒ * .setAttributeNode(newAttr) .removeAttributeNode(oldAttr) .getElementsByClassName(name) ⇒ NodeList .getElementsByTagName(name) ⇒ NodeList .querySelector(selector) ⇒ Element .querySelectorAll(selector) ⇒ NodeList .getBoundingClientRect() ⇒ * .insertAdjacentHTML(position, value) .insertAdjacentElement(position, node) ⇒ Node .insertAdjacentText(position, text) .hasChildNodes() ⇒ boolean .cloneNode(deep) ⇒ Node .appendChild(child) ⇒ Node .insertBefore(child, before) ⇒ Node .replaceChild(newChild, oldChild) ⇒ Node .removeChild(child) ⇒ Node .remove() .before(...nodes) .after(...nodes) .replaceWith(...nodes) .addEventListener(eventName, callback, [capture]) .removeEventListener(eventName, callback, [capture]) .dispatchEvent(event) new HTMLTextAreaElement(document, nodeName, namespaceURI) Creates an instance of HTMLTextAreaElement. Param Type document * nodeName * namespaceURI * htmlTextAreaElement.value : string Kind: instance property of HTMLTextAreaElement htmlTextAreaElement.placeholder : string Kind: instance property of HTMLTextAreaElement htmlTextAreaElement.readOnly : boolean Kind: instance property of HTMLTextAreaElement htmlTextAreaElement.nodeName : string Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.localName : string Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.tagName : string Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.nodeType : number Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.namespaceURI : string Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.id : string Kind: instance property of HTMLTextAreaElement htmlTextAreaElement.className : string Kind: instance property of HTMLTextAreaElement htmlTextAreaElement.attributes : NamedNodeMap Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.style : Style Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.clientLeft : number Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.clientTop : number Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.clientWidth : number Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.clientHeight : number Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.offsetLeft : number Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.offsetTop : number Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.offsetWidth : number Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.offsetHeight : number Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.scrollLeft : number Kind: instance property of HTMLTextAreaElement htmlTextAreaElement.scrollTop : number Kind: instance property of HTMLTextAreaElement htmlTextAreaElement.scrollWidth : number Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.scrollHeight : number Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.disabled : boolean Kind: instance property of HTMLTextAreaElement htmlTextAreaElement.innerHTML : string Kind: instance property of HTMLTextAreaElement htmlTextAreaElement.outerHTML : string Kind: instance property of HTMLTextAreaElement htmlTextAreaElement.contentEditable Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.isConnected : boolean Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.parentNode : Node Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.firstChild : Node Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.lastChild : Node Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.previousSibling : Node Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.nextSibling : Node Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.firstElementChild : Node Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.lastElementChild : Node Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.previousElementSibling : Node Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.nextElementSibling : Node Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.textContent : string Kind: instance property of HTMLTextAreaElement htmlTextAreaElement.childNodes : NodeList Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.ownerDocument Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.offsetParent Kind: instance property of HTMLTextAreaElement Read only: true htmlTextAreaElement.scrollIntoView() Kind: instance method of HTMLTextAreaElement htmlTextAreaElement.scrollIntoViewIfNeeded() Kind: instance method of HTMLTextAreaElement htmlTextAreaElement.focus() Kind: instance method of HTMLTextAreaElement htmlTextAreaElement.blur() Kind: instance method of HTMLTextAreaElement htmlTextAreaElement.getAttribute(name) ⇒ string Kind: instance method of HTMLTextAreaElement Param Type name string htmlTextAreaElement.setAttribute(name, value) Kind: instance method of HTMLTextAreaElement Param Type name string value string htmlTextAreaElement.removeAttribute(name) Kind: instance method of HTMLTextAreaElement Param Type name string htmlTextAreaElement.hasAttribute(name) ⇒ boolean Kind: instance method of HTMLTextAreaElement Param Type name string htmlTextAreaElement.getAttributeNode(name) ⇒ * Kind: instance method of HTMLTextAreaElement Param Type name string htmlTextAreaElement.setAttributeNode(newAttr) Kind: instance method of HTMLTextAreaElement Param Type newAttr * htmlTextAreaElement.removeAttributeNode(oldAttr) Kind: instance method of HTMLTextAreaElement Param Type oldAttr * htmlTextAreaElement.getElementsByClassName(name) ⇒ NodeList Kind: instance method of HTMLTextAreaElement Param Type name string htmlTextAreaElement.getElementsByTagName(name) ⇒ NodeList Kind: instance method of HTMLTextAreaElement Param Type name string htmlTextAreaElement.querySelector(selector) ⇒ Element Kind: instance method of HTMLTextAreaElement Param Type selector string htmlTextAreaElement.querySelectorAll(selector) ⇒ NodeList Kind: instance method of HTMLTextAreaElement Param Type selector string htmlTextAreaElement.getBoundingClientRect() ⇒ * Kind: instance method of HTMLTextAreaElement htmlTextAreaElement.insertAdjacentHTML(position, value) Kind: instance method of HTMLTextAreaElement Param Type position value string htmlTextAreaElement.insertAdjacentElement(position, node) ⇒ Node Kind: instance method of HTMLTextAreaElement Param Type position * node * htmlTextAreaElement.insertAdjacentText(position, text) Kind: instance method of HTMLTextAreaElement Param Type position * text * htmlTextAreaElement.hasChildNodes() ⇒ boolean Kind: instance method of HTMLTextAreaElement htmlTextAreaElement.cloneNode(deep) ⇒ Node Kind: instance method of HTMLTextAreaElement Param Type deep boolean htmlTextAreaElement.appendChild(child) ⇒ Node Kind: instance method of HTMLTextAreaElement Param Type child Node htmlTextAreaElement.insertBefore(child, before) ⇒ Node Kind: instance method of HTMLTextAreaElement Param Type child Node before Node htmlTextAreaElement.replaceChild(newChild, oldChild) ⇒ Node Kind: instance method of HTMLTextAreaElement Param Type newChild Node oldChild Node htmlTextAreaElement.removeChild(child) ⇒ Node Kind: instance method of HTMLTextAreaElement Param Type child Node htmlTextAreaElement.remove() Kind: instance method of HTMLTextAreaElement htmlTextAreaElement.before(...nodes) Kind: instance method of HTMLTextAreaElement Param Type ...nodes Array. htmlTextAreaElement.after(...nodes) Kind: instance method of HTMLTextAreaElement Param Type ...nodes Array. htmlTextAreaElement.replaceWith(...nodes) Kind: instance method of HTMLTextAreaElement Param Type ...nodes Array. htmlTextAreaElement.addEventListener(eventName, callback, [capture]) Kind: instance method of HTMLTextAreaElement Param Type Default eventName * callback * [capture] boolean false htmlTextAreaElement.removeEventListener(eventName, callback, [capture]) Kind: instance method of HTMLTextAreaElement Param Type Default eventName * callback * [capture] boolean false htmlTextAreaElement.dispatchEvent(event) Kind: instance method of HTMLTextAreaElement Param Type event * "},"reference/uxp/events-index.html":{"url":"reference/uxp/events-index.html","title":"Events","keywords":"","body":"Events Adobe XD supports a subset of HTML events. Event MDN Link blur MDN docs change MDN docs click MDN docs close MDN docs focus MDN docs input MDN docs keydown MDN docs load MDN docs message MDN docs pointerEnter MDN docs pointerMove MDN docs pointerLeave MDN docs progress MDN docs resize MDN docs The following event classes are supported by XD: BaseUIEvent CloseEvent Event EventTarget FocusEvent GestureEvent KeyboardEvent MessageEvent PointerEvent ProgressEvent blur Dispatched whenever the focus leaves the currently focused control. This can be useful if you want to validate the contents of a field immediately after entry. element.addEventListener(\"blur\", evt => { if (Number.isNaN(Number(evt.target.value))) { evt.target.value = \"\"; } });     Applies to Focusable controls (input elements, buttons) Since XD 13 change Dispatched after the contents of an input control change. This event only occurs after the last input to the control; so you won't see an event for every key press or mouse move. element.addEventListener(\"change\", evt => { console.log(evt.target.data); });     Applies to Focusable controls (input elements, buttons) Since XD 13 click Dispatched when the user clicks or taps on the element. Subsequent clicks may be ignored if they fall within the \"double click\" time span.     Applies to All elements Since XD 13 close Dispatched when a websocket is closed.     Applies to WebSocket Since XD 13 focus Dispatched whenever a focusable control receives focus.     Applies to All focusable controls (input elements, buttons) Since XD 13 input Dispatched whenever there is input in an input control. This will fire with every change.     Applies to All focusable controls (input elements, buttons) Since XD 13 keydown Dispatched whenever a key is pressed.     Applies to All focusable controls (input elements, buttons) Since XD 13 load Dispatched when the element has loaded.     Applies to Dialogs ( HTMLDialogElement ) Since XD 13 message Dispatched when a websocket receives a message.     Applies to WebSocket Since XD 13 pointerEnter Dispatched when the mouse cursor enters the element's bounds.     Applies to All non-interactive elements. Interactive elements do not support pointer events. Since XD 13 pointerMove Dispatched when the mouse cursor moves within the element's bounds.     Applies to All non-interactive elements. Interactive elements do not support pointer events. Since XD 13 pointerLeave Dispatched when the mouse cursor leaves the element's bounds.     Applies to All non-interactive elements. Interactive elements do not support pointer events. Since XD 13 progress Dispatched whenever there is some progress to report in an XMLHttpRequest transfer.     Applies to XMLHttpRequest Since XD 13 resize Dispatched whenever a dialog is resized. Since dialogs cannot be currently resized, this event only fires once, when the dialog is made visible.     Applies to Dialogs ( HTMLDialogElement ) Since XD 13 "},"reference/uxp/class/BaseUIEvent.html":{"url":"reference/uxp/class/BaseUIEvent.html","title":"BaseUIEvent","keywords":"","body":" BaseUIEvent ⇐ Event Kind: global classExtends: Event Access: publicSee: https://developer.mozilla.org/en-US/docs/Web/API/UIEvent BaseUIEvent ⇐ Event new BaseUIEvent(type, eventInit) .pointerId .width : number .height : number .presure : number .tangentialPressure : number .tiltX : number .tiltY : number .twist : number .clientX : number .clientY : number .offsetX : number .offsetY : number .pageX : number .pageY : number .screenX : number .screenY : number .movementX : number .movementY : number .button : number .buttons .detail .pointerType .altKey .shiftKey .metaKey .ctrlKey .isPrimary .type .isTrusted : boolean .target : Node .currentTarget : Node .bubbles : boolean .cancelable : boolean .eventPhase .defaultPrevented : boolean .returnValue : * .preventDefault() .stopImmediatePropagation() .stopPropagation() new BaseUIEvent(type, eventInit) Creates an instance of BaseUIEvent. Param Type type * eventInit * baseUIEvent.pointerId Kind: instance property of BaseUIEvent Read only: true baseUIEvent.width : number Kind: instance property of BaseUIEvent Read only: true baseUIEvent.height : number Kind: instance property of BaseUIEvent Read only: true baseUIEvent.presure : number Kind: instance property of BaseUIEvent Read only: true baseUIEvent.tangentialPressure : number Kind: instance property of BaseUIEvent Read only: true baseUIEvent.tiltX : number Kind: instance property of BaseUIEvent Read only: true baseUIEvent.tiltY : number Kind: instance property of BaseUIEvent Read only: true baseUIEvent.twist : number Kind: instance property of BaseUIEvent Read only: true baseUIEvent.clientX : number Kind: instance property of BaseUIEvent Read only: true baseUIEvent.clientY : number Kind: instance property of BaseUIEvent Read only: true baseUIEvent.offsetX : number Kind: instance property of BaseUIEvent Read only: true baseUIEvent.offsetY : number Kind: instance property of BaseUIEvent Read only: true baseUIEvent.pageX : number Kind: instance property of BaseUIEvent Read only: true baseUIEvent.pageY : number Kind: instance property of BaseUIEvent Read only: true baseUIEvent.screenX : number Kind: instance property of BaseUIEvent Read only: true baseUIEvent.screenY : number Kind: instance property of BaseUIEvent Read only: true baseUIEvent.movementX : number Kind: instance property of BaseUIEvent Read only: true baseUIEvent.movementY : number Kind: instance property of BaseUIEvent Read only: true baseUIEvent.button : number Kind: instance property of BaseUIEvent Read only: true baseUIEvent.buttons Kind: instance property of BaseUIEvent Read only: true baseUIEvent.detail Kind: instance property of BaseUIEvent Read only: true baseUIEvent.pointerType Kind: instance property of BaseUIEvent Read only: true baseUIEvent.altKey Kind: instance property of BaseUIEvent Read only: true baseUIEvent.shiftKey Kind: instance property of BaseUIEvent Read only: true baseUIEvent.metaKey Kind: instance property of BaseUIEvent Read only: true baseUIEvent.ctrlKey Kind: instance property of BaseUIEvent Read only: true baseUIEvent.isPrimary Kind: instance property of BaseUIEvent Read only: true baseUIEvent.type Kind: instance property of BaseUIEvent Read only: true baseUIEvent.isTrusted : boolean Kind: instance property of BaseUIEvent Read only: true baseUIEvent.target : Node Kind: instance property of BaseUIEvent Read only: true baseUIEvent.currentTarget : Node Kind: instance property of BaseUIEvent Read only: true baseUIEvent.bubbles : boolean Kind: instance property of BaseUIEvent Read only: true baseUIEvent.cancelable : boolean Kind: instance property of BaseUIEvent Read only: true baseUIEvent.eventPhase Kind: instance property of BaseUIEvent Read only: true baseUIEvent.defaultPrevented : boolean Kind: instance property of BaseUIEvent Read only: true baseUIEvent.returnValue : * Kind: instance property of BaseUIEvent baseUIEvent.preventDefault() Kind: instance method of BaseUIEvent baseUIEvent.stopImmediatePropagation() Kind: instance method of BaseUIEvent baseUIEvent.stopPropagation() Kind: instance method of BaseUIEvent "},"reference/uxp/class/CloseEvent.html":{"url":"reference/uxp/class/CloseEvent.html","title":"CloseEvent","keywords":"","body":" CloseEvent ⇐ Event Kind: global classExtends: Event Access: publicSee: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent CloseEvent ⇐ Event new CloseEvent(code, reason, wasClean) .code ⇒ number .reason ⇒ number .wasClean ⇒ boolean .type .isTrusted : boolean .target : Node .currentTarget : Node .bubbles : boolean .cancelable : boolean .eventPhase .defaultPrevented : boolean .returnValue : * .preventDefault() .stopImmediatePropagation() .stopPropagation() new CloseEvent(code, reason, wasClean) Creates an instance of CloseEvent. Param Type code * reason * wasClean * closeEvent.code ⇒ number Kind: instance property of CloseEvent Returns: number - returns the close code sent by the server. closeEvent.reason ⇒ number Kind: instance property of CloseEvent Returns: number - returns the string indicating the reason the server closed the connection.. closeEvent.wasClean ⇒ boolean Kind: instance property of CloseEvent Returns: boolean - returns a boolean that inndicates whether or not the connection was cleanly closed. closeEvent.type Kind: instance property of CloseEvent Read only: true closeEvent.isTrusted : boolean Kind: instance property of CloseEvent Read only: true closeEvent.target : Node Kind: instance property of CloseEvent Read only: true closeEvent.currentTarget : Node Kind: instance property of CloseEvent Read only: true closeEvent.bubbles : boolean Kind: instance property of CloseEvent Read only: true closeEvent.cancelable : boolean Kind: instance property of CloseEvent Read only: true closeEvent.eventPhase Kind: instance property of CloseEvent Read only: true closeEvent.defaultPrevented : boolean Kind: instance property of CloseEvent Read only: true closeEvent.returnValue : * Kind: instance property of CloseEvent closeEvent.preventDefault() Kind: instance method of CloseEvent closeEvent.stopImmediatePropagation() Kind: instance method of CloseEvent closeEvent.stopPropagation() Kind: instance method of CloseEvent "},"reference/uxp/class/Event.html":{"url":"reference/uxp/class/Event.html","title":"Event","keywords":"","body":" Event Kind: global classAccess: publicSee: https://developer.mozilla.org/en-US/docs/Web/API/Event Event new Event(eventType, eventInit) instance .type .isTrusted : boolean .target : Node .currentTarget : Node .bubbles : boolean .cancelable : boolean .eventPhase .defaultPrevented : boolean .returnValue : * .preventDefault() .stopImmediatePropagation() .stopPropagation() static .NONE .CAPTURING_PHASE .AT_TARGET .BUBBLING_PHASE new Event(eventType, eventInit) Creates an instance of Event. Param Type eventType * eventInit * event.type Kind: instance property of Event Read only: true event.isTrusted : boolean Kind: instance property of Event Read only: true event.target : Node Kind: instance property of Event Read only: true event.currentTarget : Node Kind: instance property of Event Read only: true event.bubbles : boolean Kind: instance property of Event Read only: true event.cancelable : boolean Kind: instance property of Event Read only: true event.eventPhase Kind: instance property of Event Read only: true event.defaultPrevented : boolean Kind: instance property of Event Read only: true event.returnValue : * Kind: instance property of Event event.preventDefault() Kind: instance method of Event event.stopImmediatePropagation() Kind: instance method of Event event.stopPropagation() Kind: instance method of Event Event.NONE Kind: static property of Event Event.CAPTURING_PHASE Kind: static property of Event Event.AT_TARGET Kind: static property of Event Event.BUBBLING_PHASE Kind: static property of Event "},"reference/uxp/class/EventTarget.html":{"url":"reference/uxp/class/EventTarget.html","title":"EventTarget","keywords":"","body":" EventTarget Kind: global class Access: public See: https://developer.mozilla.org/en-US/docs/Web/API/EventTarget EventTarget .addEventListener(eventName, callback, [capture]) .removeEventListener(eventName, callback, [capture]) .dispatchEvent(event) eventTarget.addEventListener(eventName, callback, [capture]) Kind: instance method of EventTarget Param Type Default eventName * callback * [capture] boolean false eventTarget.removeEventListener(eventName, callback, [capture]) Kind: instance method of EventTarget Param Type Default eventName * callback * [capture] boolean false eventTarget.dispatchEvent(event) Kind: instance method of EventTarget Param Type event * "},"reference/uxp/class/FocusEvent.html":{"url":"reference/uxp/class/FocusEvent.html","title":"FocusEvent","keywords":"","body":" FocusEvent ⇐ Event Kind: global classExtends: Event Access: publicSee: https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent FocusEvent ⇐ Event new FocusEvent(type, eventInit) .relatedTarget .type .isTrusted : boolean .target : Node .currentTarget : Node .bubbles : boolean .cancelable : boolean .eventPhase .defaultPrevented : boolean .returnValue : * .preventDefault() .stopImmediatePropagation() .stopPropagation() new FocusEvent(type, eventInit) Creates an instance of FocusEvent. Param Type type * eventInit * focusEvent.relatedTarget Kind: instance property of FocusEvent Read only: true focusEvent.type Kind: instance property of FocusEvent Read only: true focusEvent.isTrusted : boolean Kind: instance property of FocusEvent Read only: true focusEvent.target : Node Kind: instance property of FocusEvent Read only: true focusEvent.currentTarget : Node Kind: instance property of FocusEvent Read only: true focusEvent.bubbles : boolean Kind: instance property of FocusEvent Read only: true focusEvent.cancelable : boolean Kind: instance property of FocusEvent Read only: true focusEvent.eventPhase Kind: instance property of FocusEvent Read only: true focusEvent.defaultPrevented : boolean Kind: instance property of FocusEvent Read only: true focusEvent.returnValue : * Kind: instance property of FocusEvent focusEvent.preventDefault() Kind: instance method of FocusEvent focusEvent.stopImmediatePropagation() Kind: instance method of FocusEvent focusEvent.stopPropagation() Kind: instance method of FocusEvent "},"reference/uxp/class/GestureEvent.html":{"url":"reference/uxp/class/GestureEvent.html","title":"GestureEvent","keywords":"","body":" GestureEvent ⇐ BaseUIEvent Kind: global classExtends: BaseUIEvent Access: publicSee: https://developer.mozilla.org/en-US/docs/Web/API/GestureEvent GestureEvent ⇐ BaseUIEvent new GestureEvent(type, eventInit) .expansion : number .rotation : number .scale : number .translationX : number .translationY : number .velocityAngular : number .velocityExpansion : number .velocityX : number .velocityY : number .pointerId .width : number .height : number .presure : number .tangentialPressure : number .tiltX : number .tiltY : number .twist : number .clientX : number .clientY : number .offsetX : number .offsetY : number .pageX : number .pageY : number .screenX : number .screenY : number .movementX : number .movementY : number .button : number .buttons .detail .pointerType .altKey .shiftKey .metaKey .ctrlKey .isPrimary .type .isTrusted : boolean .target : Node .currentTarget : Node .bubbles : boolean .cancelable : boolean .eventPhase .defaultPrevented : boolean .returnValue : * .preventDefault() .stopImmediatePropagation() .stopPropagation() new GestureEvent(type, eventInit) Creates an instance of GestureEvent. Param Type type * eventInit * gestureEvent.expansion : number Kind: instance property of GestureEvent Read only: true gestureEvent.rotation : number Kind: instance property of GestureEvent Read only: true gestureEvent.scale : number Kind: instance property of GestureEvent Read only: true gestureEvent.translationX : number Kind: instance property of GestureEvent Read only: true gestureEvent.translationY : number Kind: instance property of GestureEvent Read only: true gestureEvent.velocityAngular : number Kind: instance property of GestureEvent Read only: true gestureEvent.velocityExpansion : number Kind: instance property of GestureEvent Read only: true gestureEvent.velocityX : number Kind: instance property of GestureEvent Read only: true gestureEvent.velocityY : number Kind: instance property of GestureEvent Read only: true gestureEvent.pointerId Kind: instance property of GestureEvent Read only: true gestureEvent.width : number Kind: instance property of GestureEvent Read only: true gestureEvent.height : number Kind: instance property of GestureEvent Read only: true gestureEvent.presure : number Kind: instance property of GestureEvent Read only: true gestureEvent.tangentialPressure : number Kind: instance property of GestureEvent Read only: true gestureEvent.tiltX : number Kind: instance property of GestureEvent Read only: true gestureEvent.tiltY : number Kind: instance property of GestureEvent Read only: true gestureEvent.twist : number Kind: instance property of GestureEvent Read only: true gestureEvent.clientX : number Kind: instance property of GestureEvent Read only: true gestureEvent.clientY : number Kind: instance property of GestureEvent Read only: true gestureEvent.offsetX : number Kind: instance property of GestureEvent Read only: true gestureEvent.offsetY : number Kind: instance property of GestureEvent Read only: true gestureEvent.pageX : number Kind: instance property of GestureEvent Read only: true gestureEvent.pageY : number Kind: instance property of GestureEvent Read only: true gestureEvent.screenX : number Kind: instance property of GestureEvent Read only: true gestureEvent.screenY : number Kind: instance property of GestureEvent Read only: true gestureEvent.movementX : number Kind: instance property of GestureEvent Read only: true gestureEvent.movementY : number Kind: instance property of GestureEvent Read only: true gestureEvent.button : number Kind: instance property of GestureEvent Read only: true gestureEvent.buttons Kind: instance property of GestureEvent Read only: true gestureEvent.detail Kind: instance property of GestureEvent Read only: true gestureEvent.pointerType Kind: instance property of GestureEvent Read only: true gestureEvent.altKey Kind: instance property of GestureEvent Read only: true gestureEvent.shiftKey Kind: instance property of GestureEvent Read only: true gestureEvent.metaKey Kind: instance property of GestureEvent Read only: true gestureEvent.ctrlKey Kind: instance property of GestureEvent Read only: true gestureEvent.isPrimary Kind: instance property of GestureEvent Read only: true gestureEvent.type Kind: instance property of GestureEvent Read only: true gestureEvent.isTrusted : boolean Kind: instance property of GestureEvent Read only: true gestureEvent.target : Node Kind: instance property of GestureEvent Read only: true gestureEvent.currentTarget : Node Kind: instance property of GestureEvent Read only: true gestureEvent.bubbles : boolean Kind: instance property of GestureEvent Read only: true gestureEvent.cancelable : boolean Kind: instance property of GestureEvent Read only: true gestureEvent.eventPhase Kind: instance property of GestureEvent Read only: true gestureEvent.defaultPrevented : boolean Kind: instance property of GestureEvent Read only: true gestureEvent.returnValue : * Kind: instance property of GestureEvent gestureEvent.preventDefault() Kind: instance method of GestureEvent gestureEvent.stopImmediatePropagation() Kind: instance method of GestureEvent gestureEvent.stopPropagation() Kind: instance method of GestureEvent "},"reference/uxp/class/KeyboardEvent.html":{"url":"reference/uxp/class/KeyboardEvent.html","title":"KeyboardEvent","keywords":"","body":" KeyboardEvent ⇐ Event Kind: global classExtends: Event Access: publicSee: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent KeyboardEvent ⇐ Event new KeyboardEvent(type, eventInit) .altKey .ctrlKey .metaKey .shiftKey .code .keyCode .key .location .repeat .type .isTrusted : boolean .target : Node .currentTarget : Node .bubbles : boolean .cancelable : boolean .eventPhase .defaultPrevented : boolean .returnValue : * .getModifierState(keyArgs) ⇒ boolean .preventDefault() .stopImmediatePropagation() .stopPropagation() new KeyboardEvent(type, eventInit) Creates an instance of KeyboardEvent. Param Type type * eventInit * keyboardEvent.altKey Kind: instance property of KeyboardEvent Read only: true keyboardEvent.ctrlKey Kind: instance property of KeyboardEvent Read only: true keyboardEvent.metaKey Kind: instance property of KeyboardEvent Read only: true keyboardEvent.shiftKey Kind: instance property of KeyboardEvent Read only: true keyboardEvent.code Kind: instance property of KeyboardEvent Read only: true keyboardEvent.keyCode Kind: instance property of KeyboardEvent Read only: true keyboardEvent.key Kind: instance property of KeyboardEvent Read only: true keyboardEvent.location Kind: instance property of KeyboardEvent Read only: true keyboardEvent.repeat Kind: instance property of KeyboardEvent Read only: true keyboardEvent.type Kind: instance property of KeyboardEvent Read only: true keyboardEvent.isTrusted : boolean Kind: instance property of KeyboardEvent Read only: true keyboardEvent.target : Node Kind: instance property of KeyboardEvent Read only: true keyboardEvent.currentTarget : Node Kind: instance property of KeyboardEvent Read only: true keyboardEvent.bubbles : boolean Kind: instance property of KeyboardEvent Read only: true keyboardEvent.cancelable : boolean Kind: instance property of KeyboardEvent Read only: true keyboardEvent.eventPhase Kind: instance property of KeyboardEvent Read only: true keyboardEvent.defaultPrevented : boolean Kind: instance property of KeyboardEvent Read only: true keyboardEvent.returnValue : * Kind: instance property of KeyboardEvent keyboardEvent.getModifierState(keyArgs) ⇒ boolean Kind: instance method of KeyboardEvent Param Type keyArgs string keyboardEvent.preventDefault() Kind: instance method of KeyboardEvent keyboardEvent.stopImmediatePropagation() Kind: instance method of KeyboardEvent keyboardEvent.stopPropagation() Kind: instance method of KeyboardEvent "},"reference/uxp/class/MessageEvent.html":{"url":"reference/uxp/class/MessageEvent.html","title":"MessageEvent","keywords":"","body":" MessageEvent ⇐ Event Kind: global classExtends: Event Access: publicSee: https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent MessageEvent ⇐ Event new MessageEvent(data, origin, source, eventInit) .data ⇒ string .origin ⇒ string .source ⇒ string .type .isTrusted : boolean .target : Node .currentTarget : Node .bubbles : boolean .cancelable : boolean .eventPhase .defaultPrevented : boolean .returnValue : * .preventDefault() .stopImmediatePropagation() .stopPropagation() new MessageEvent(data, origin, source, eventInit) Creates an instance of MessageEvent. Param Type data * origin * source * eventInit * messageEvent.data ⇒ string Kind: instance property of MessageEvent Returns: string - returns the data sent by the server. messageEvent.origin ⇒ string Kind: instance property of MessageEvent Returns: string - returns the origin of the message. messageEvent.source ⇒ string Kind: instance property of MessageEvent Returns: string - returns the string indicating the messageEventSource. messageEvent.type Kind: instance property of MessageEvent Read only: true messageEvent.isTrusted : boolean Kind: instance property of MessageEvent Read only: true messageEvent.target : Node Kind: instance property of MessageEvent Read only: true messageEvent.currentTarget : Node Kind: instance property of MessageEvent Read only: true messageEvent.bubbles : boolean Kind: instance property of MessageEvent Read only: true messageEvent.cancelable : boolean Kind: instance property of MessageEvent Read only: true messageEvent.eventPhase Kind: instance property of MessageEvent Read only: true messageEvent.defaultPrevented : boolean Kind: instance property of MessageEvent Read only: true messageEvent.returnValue : * Kind: instance property of MessageEvent messageEvent.preventDefault() Kind: instance method of MessageEvent messageEvent.stopImmediatePropagation() Kind: instance method of MessageEvent messageEvent.stopPropagation() Kind: instance method of MessageEvent "},"reference/uxp/class/PointerEvent.html":{"url":"reference/uxp/class/PointerEvent.html","title":"PointerEvent","keywords":"","body":" PointerEvent ⇐ BaseUIEvent Kind: global classExtends: BaseUIEvent Access: publicSee: https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent PointerEvent ⇐ BaseUIEvent new PointerEvent(type, eventInit) .pointerId .width : number .height : number .presure : number .tangentialPressure : number .tiltX : number .tiltY : number .twist : number .clientX : number .clientY : number .offsetX : number .offsetY : number .pageX : number .pageY : number .screenX : number .screenY : number .movementX : number .movementY : number .button : number .buttons .detail .pointerType .altKey .shiftKey .metaKey .ctrlKey .isPrimary .type .isTrusted : boolean .target : Node .currentTarget : Node .bubbles : boolean .cancelable : boolean .eventPhase .defaultPrevented : boolean .returnValue : * .preventDefault() .stopImmediatePropagation() .stopPropagation() new PointerEvent(type, eventInit) Creates an instance of PointerEvent. Param Type type * eventInit * pointerEvent.pointerId Kind: instance property of PointerEvent Read only: true pointerEvent.width : number Kind: instance property of PointerEvent Read only: true pointerEvent.height : number Kind: instance property of PointerEvent Read only: true pointerEvent.presure : number Kind: instance property of PointerEvent Read only: true pointerEvent.tangentialPressure : number Kind: instance property of PointerEvent Read only: true pointerEvent.tiltX : number Kind: instance property of PointerEvent Read only: true pointerEvent.tiltY : number Kind: instance property of PointerEvent Read only: true pointerEvent.twist : number Kind: instance property of PointerEvent Read only: true pointerEvent.clientX : number Kind: instance property of PointerEvent Read only: true pointerEvent.clientY : number Kind: instance property of PointerEvent Read only: true pointerEvent.offsetX : number Kind: instance property of PointerEvent Read only: true pointerEvent.offsetY : number Kind: instance property of PointerEvent Read only: true pointerEvent.pageX : number Kind: instance property of PointerEvent Read only: true pointerEvent.pageY : number Kind: instance property of PointerEvent Read only: true pointerEvent.screenX : number Kind: instance property of PointerEvent Read only: true pointerEvent.screenY : number Kind: instance property of PointerEvent Read only: true pointerEvent.movementX : number Kind: instance property of PointerEvent Read only: true pointerEvent.movementY : number Kind: instance property of PointerEvent Read only: true pointerEvent.button : number Kind: instance property of PointerEvent Read only: true pointerEvent.buttons Kind: instance property of PointerEvent Read only: true pointerEvent.detail Kind: instance property of PointerEvent Read only: true pointerEvent.pointerType Kind: instance property of PointerEvent Read only: true pointerEvent.altKey Kind: instance property of PointerEvent Read only: true pointerEvent.shiftKey Kind: instance property of PointerEvent Read only: true pointerEvent.metaKey Kind: instance property of PointerEvent Read only: true pointerEvent.ctrlKey Kind: instance property of PointerEvent Read only: true pointerEvent.isPrimary Kind: instance property of PointerEvent Read only: true pointerEvent.type Kind: instance property of PointerEvent Read only: true pointerEvent.isTrusted : boolean Kind: instance property of PointerEvent Read only: true pointerEvent.target : Node Kind: instance property of PointerEvent Read only: true pointerEvent.currentTarget : Node Kind: instance property of PointerEvent Read only: true pointerEvent.bubbles : boolean Kind: instance property of PointerEvent Read only: true pointerEvent.cancelable : boolean Kind: instance property of PointerEvent Read only: true pointerEvent.eventPhase Kind: instance property of PointerEvent Read only: true pointerEvent.defaultPrevented : boolean Kind: instance property of PointerEvent Read only: true pointerEvent.returnValue : * Kind: instance property of PointerEvent pointerEvent.preventDefault() Kind: instance method of PointerEvent pointerEvent.stopImmediatePropagation() Kind: instance method of PointerEvent pointerEvent.stopPropagation() Kind: instance method of PointerEvent "},"reference/uxp/class/ProgressEvent.html":{"url":"reference/uxp/class/ProgressEvent.html","title":"ProgressEvent","keywords":"","body":" ProgressEvent ⇐ Event Kind: global classExtends: Event Access: publicSee https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent https://xhr.spec.whatwg.org/#progressevent ProgressEvent ⇐ Event instance .type .isTrusted : boolean .target : Node .currentTarget : Node .bubbles : boolean .cancelable : boolean .eventPhase .defaultPrevented : boolean .returnValue : * .preventDefault() .stopImmediatePropagation() .stopPropagation() static .module.exports new module.exports(typeArg, [eventInit]) .lengthComputable .loaded .total .initEvent(typeArg, bubbles, cancelable) progressEvent.type Kind: instance property of ProgressEvent Read only: true progressEvent.isTrusted : boolean Kind: instance property of ProgressEvent Read only: true progressEvent.target : Node Kind: instance property of ProgressEvent Read only: true progressEvent.currentTarget : Node Kind: instance property of ProgressEvent Read only: true progressEvent.bubbles : boolean Kind: instance property of ProgressEvent Read only: true progressEvent.cancelable : boolean Kind: instance property of ProgressEvent Read only: true progressEvent.eventPhase Kind: instance property of ProgressEvent Read only: true progressEvent.defaultPrevented : boolean Kind: instance property of ProgressEvent Read only: true progressEvent.returnValue : * Kind: instance property of ProgressEvent progressEvent.preventDefault() Kind: instance method of ProgressEvent progressEvent.stopImmediatePropagation() Kind: instance method of ProgressEvent progressEvent.stopPropagation() Kind: instance method of ProgressEvent ProgressEvent.module.exports Kind: static class of ProgressEvent new module.exports(typeArg, [eventInit]) Creates an instance of ProgressEvent. Param Type Default typeArg * [eventInit] * {} ProgressEvent.lengthComputable Kind: static property of ProgressEvent Read only: true ProgressEvent.loaded Kind: static property of ProgressEvent Read only: true ProgressEvent.total Kind: static property of ProgressEvent Read only: true ProgressEvent.initEvent(typeArg, bubbles, cancelable) Kind: static method of ProgressEvent Param Type typeArg * bubbles * cancelable * "},"known-issues.html":{"url":"known-issues.html","title":"Known issues","keywords":"","body":"XD Plugin API Known Issues General Issues Developer/Side-loading Specific Plugin menus and handlers may not be in-sync across documents during development If someone modifies a plugin's files on disk while XD is running, and then opens more windows in XD, any windows that were open before reflect the old version of the plugin while windows that were opened later reflect the new version of the plugin. The menu bar will always reflect the old version of the plugin regardless of which window is current. Plugin Management If Plugin Manager is open when you invoke Reload Plugins, it will not reflect any changes to the manifest (plugin name, description, icon) until you close & reopen it. Scenegraph It is possible to set nodes to 0 width or 0 height. Scenenode setters block negative size values but allow 0 size, even though in many cases it is equally nonsensical. We do block 0 size in the UI. In the past, XD's renderer would fail asserts (possibly even crash) with 0-size objects. I couldn't repro that any more, but unless we're covering it well as an officially supported case, it could easily regress again. There are some other minor bugs though, e.g. sharing fails if you have any 0-width/height artboards and bitmap export fails if any of the top-level items you're trying to export are 0-width/height. Longer plugin command names may be truncated in the menu on Windows Workaround: keep your plugin command names short! User Interface Checkboxes may fail to render correctly if in a scrollable container. To work around this issue, make sure the containing element has a background color. (transparent does not count; macOS only.) It is not possible to trigger the emoji selector in a text field on macOS. SVG images are not supported in the UI. When tabbing in a scroll view, the scroll view is not automatically scrolled to ensure the target control is in view (macOS Only). Inline layout is not supported. Inline elements will render as block elements instead. HTML Elements It is not currently possible to set a checkbox to checked without also passing a value to the attribute. This means will fail to render a checked checkbox. Instead you must use tags must have a value attribute, or referencing the select's value property will return undefined. does not show the value as selected. Instead, get a reference to the element and call setAttribute(\"value\", …). If you don’t specify a width for your form, block elements inside may not take up the entire width. Workaround: always set a width for your form elements. forms only support method=\"dialog\". They do not submit to a URL automatically. It is not currently possible to specify the tab order. The size of a cannot be set with rows or cols. Use CSS styles height and width respectively. is not currently supported. is not currently supported. HTML5 input validation is not supported. Images that fail to load will not render any “broken icon” image in place. Input elements do not accept defaultValue. is not supported. tags do not support selected or disabled attributes. is not supported. Wrap around the control instead. is not supported. is not supported. CSS line-height is currently implemented incorrectly. This will be fixed in a future release. For now, avoid line-height. It is not currently possible to assign multiple border colors to a container. :focus, :active are not currently supported. baseline alignment is not currently supported. Full CSS cascade and inheritance is not currently supported. Media queries are not supported. em unit is not supported. The font shorthand CSS rule is not supported. text-transform is not supported cursor is not supported Styles of elements within a span are ignored. In order to clip an image (say, with border-radius: 10px), you must also specify overflow: hidden. z-index is not supported. To achieve z-index behavior, use the DOM order instead. CSS transitions and animations are not supported. DOM When a dialog is closed, it is not removed from the DOM. This is per spec. If you want the dialog to be removed from the DOM, you must call HTMLDialogElement#remove explicitly. When applying HTML using innerHTML and friends, inline styles are ignored. You can, however, supply tags and use class attributes to assign styles. When applying HTML using innerHTML, event handlers and scripts are not parsed. This is by design. Events Interactive elements do not support Pointer% events keypress and keyup are not currently supported on macOS. In React, checkboxes do not trigger change events. You can use a ref instead to assign an event handler. /*…*/)} /> Network I/O On macOS, it is not possible to use self-signed certificates with secure Websockets. Websockets do not support extensions. XHR does not support cookies. responseURL is not supported on XHR File I/O Blob is not supported. Use ArrayBuffer instead. "},"changes.html":{"url":"changes.html","title":"Change log","keywords":"","body":"Change Log Public Release 14.0.42 New API Features Document & node metadata: Store plugin-specific info on individual scenegraph nodes or in the document in general. Viewport: Pan and zoom the view of the document, and get information about the current viewport bounds. Text: Get/set paragraph spacing; create/modify area text; more easily work with uniform-styled text via convenience getter/setter APIs for character attributes. Published links: Get latest links for prototypes & design specs that have been shared from the current document. Breaking Changes Plugins can only write to the clipboard or modify the selection while actively running a menu command (same as the rules for making scenegraph changes). Fixes and improvements For convenience, the arguments passed to plugin commands are now also available as scenegraph.selection and scenegraph.root. Exporting renditions to a folder created by your plugin now works reliably on Windows if the folder name contains spaces or other special characters. Rectangle.cornerRadii now returns correct values if the corners are not all the same radius. User-facing plugin features \"Discover Plugins\" listing improvements: Sort by plugin name, in addition to the default of sorting by release date. Searching the plugin listing now searches the description field in addition to just the plugin title. Safe mode: To temporarily disable all plugins for troubleshooting purposes, launch XD while holding down Shift. Re-launching XD will re-enable all plugins. Uninstalling a plugin now clears its data/settings folder. Users are now prompted to confirm before uninstalling. Known Issues See the Known Issues page for a comprehensive list. Public Release 13.0.12 Fixes and improvements You can now export renditions to any user-chosen location on Windows. Caveat: exporting renditions to a folder created by your plugin will not work if the folder name contains spaces or other special characters. See known issues for details. Breaking Changes File IO - If the user cancels getFileForOpening() in single-file mode (the default), the API now resolves with null instead of an empty array. The multiple-file mode continues to resolve with an empty array when canceled. Export Renditions - You cannot make multiple concurrent calls to application.createRenditions(), since it was not guaranteed to work correctly in this case. Either wait for for the Promise from one call to finish before calling again, or accumulate all your requests into one array and make a single call for all of them. The undocumented global APIs localStorage and sessionStorage have been removed for now. "},"GLOSSARY.html":{"url":"GLOSSARY.html","title":"Glossary","keywords":"","body":"Glossary Welcome to the glossary! This is a list of terms to make sure we're all talking about the same thing. Glossary terms are highlighted throughout the documentation like this: JavaScript. To see the definition, just hover your mouse over the word, or click on the word to jump back to this glossary page. Application An XD-specific namespace that provides access to various methods that aren't specific to the XD document. Read more. Base64 A representation of binary data that can be transferred safely over the internet. Clipboard A temporary storage location that the user can utilize to save or retrieve text or other snippets on command. Adobe XD provides an API for accessing the clipboard. Class A template (of sorts) used to instantiate objects. An instance has the same instance methods and properties as specified in the class. CSS Short for Cascading Style Sheets. Adobe XD supports a subset of CSS. Developer Console Displays logs and errors generated by your plugin, helping you debug your code. DOM Short for Document Object Model. Generally refers to the HTML5 DOM. ECMAScript See JavaScript. ES5 An older version of JavaScript from 2009. ES6 A modern version of JavaScript. See ES2015. ES2015 A modern version of JavaScript, previously named ES6. Destructive Action An action, which when taken, is destructive to the user's open document or their files. Such an action may be undoable, but this is not always the case. Dialog Represents a user interface concept whereby a sheet or window is displayed and asks the user for more information (hence the word \"dialog\" – the user and computer are dialoguing together). Dismissive Button A dismissive button will close a dialog. Whether an action continues after the dismissal of the dialog depends upon which button is clicked. \"OK\", \"Cancel\", \"Yes\", \"Don't Save\", \"Delete\" can all be dismissive buttons. Edit Context Represents the context within which a plugin or user is allowed to make edits to the user's scenegraph. Read more. GUID A globally unique identifier. HTML Short for hypertext markup language. XD Supports a subset of HTML. HTML5 The modern version of HTML. ImageFill Used to fill a SceneNode with bitmap data. Read more Instance An instance of a class. May also refer to instance properties or methods. JavaScript JavaScript is a common programming language that is used in many various contexts, including the web and on servers. Adobe XD uses JavaScript to help leverage the existing skills of the entire JavaScript ecosystem. JSON Short for JavaScript Object Notation. Manifest A manifest is used to declare various facts about a plugin. For example, a manifest includes the plugin's name, a unique ID, and what functions correspond with what menu items. Read more. Node A tree node. Depending on context, this node may refer to a HTML5 DOM Node or an XD Scenegraph node. React Also known as ReactJS. A declarative, component-based JavaScript library for building user interfaces. Learn more about React. SceneNode A SceneNode represents a node within the user's scenegraph. Scenegraph A scenegraph represents the user's document. It is so called because it is a tree (a kind of graph) of nodes that, when taken together, represents the entire \"scene\" of the document. Adobe XD provides an API for manipulating the scenegraph. Learn more about the scenegraph. SceneNodeList A list of scene nodes. Read more Static A static method or property. These exist at the class level, and not on instantiated objects. UXP Short for Unified Extensibility Platform. Adobe XD uses UXP for some of its extensibility APIs. XHR Short for XMLHttpRequest. XMLHttpRequest An network I/O API that can be used to request information from local and remote endpoints. See documentation. WebSocket A network I/O API that enables real-time communication with local and remote endpoints. See documentation. Widget Any interactive control or rendition provided by the user interface. For example, a clickable \"button\" is a widget. "},"plugin-api-roadmap.html":{"url":"plugin-api-roadmap.html","title":"Plugin API roadmap","keywords":"","body":"Plugin API Roadmap We've got a lot of stuff planned for the future of the Adobe XD platform, and we've built out a roadmap. Take a look around, and if you've got a suggestion for an API feature, please make a request on the Adobe XD Platform forums. If you want to request a feature for Adobe XD itself, please make the request on the Adobe XD UserVoice forum. Roadmap Open in separate page "}}